UNIT TEST FIX IMPLEMENTATION PLAN (Roadmap & Status)

Legend:
Done = Test fixed and passing consistently
Partial = Some related fixes implemented, test still failing
X = Not started yet
Critical = Must fix immediately (segfaults, major failures)
High = Important for system stability
Medium = Affects features but not core stability
Low = Polish/optimization issues

Scope Overview:
A systematic approach to fixing the 66 failing unit tests (13% failure rate) out of 518 total tests. Failures span multiple core systems including AI, Equipment, Loot, Combat, Save System, and Dialogue. The plan prioritizes critical stability issues (segfaults), then addresses systemic failures affecting multiple components, followed by isolated feature-specific bugs. All fixes will maintain deterministic behavior, avoid breaking existing functionality, and include regression prevention measures.

FAILURE ANALYSIS SUMMARY:
- Total Tests: 518
- Failing: 66 (13% failure rate)
- Passing: 452 (87% pass rate)
- Segfaults: 6 critical crashes
- Timeouts: 3 performance issues
- Assertion failures: 57 logic bugs
- Code layering violations: 146 dependency issues

PHASE 0. CRITICAL STABILITY FIXES (Critical Priority)
0.1 Fix segmentation faults causing immediate crashes (6 tests) (X)
    - test_ai_phase11_scenario (SEGFAULT)
    - test_ai_phase11_repro_trace (SEGFAULT)
    - test_loot_phase16_personal_mode (SEGFAULT)
    - test_loot_phase16_need_greed_trade (SEGFAULT)
    - test_save_phase15_inventory_partial_backup (SEGFAULT)
    - test_save_roundtrip (SEGFAULT)
0.2 Fix infinite loop/timeout issues (3 tests) (X)
    - test_ai_phase11_core_nodes (Timeout)
    - test_boot (Timeout)
    - test_enemy_spawning (Timeout)
0.3 Memory safety audit for null pointer dereferences and buffer overruns (X)
0.4 Add defensive programming checks to prevent crashes (X)
0.5 Tests: validate crash fixes don't cause new regressions (X)

PHASE 1. CODE ARCHITECTURE & DEPENDENCY FIXES (High Priority)
1.1 Resolve dependency layering violations (146 violations) (X)
    - Fix audio_vfx -> game layer violations (combat.h includes)
    - Fix core/app -> higher layer violations (equipment, loot, vendor, game)
    - Fix equipment -> stat_cache circular dependencies
    - Fix integration bridges violating layer boundaries
1.2 Refactor circular includes between core systems (X)
1.3 Establish clear layer boundaries: core -> integration -> game -> ui (X)
1.4 Add include guards and forward declarations where appropriate (X)
1.5 Update build system to enforce layer violations as errors (X)
1.6 Tests: code_audit_check_layering should pass (X)

PHASE 2. AI SYSTEM FIXES (High Priority)
2.1 Fix blackboard write/read functionality (Done)
    - test_ai_phase2_blackboard: Fix ROGUE_BB_WRITE_MAX logic
    - Verify key collision handling and type safety
2.2 Fix perception system line-of-sight calculations (X)
    - test_ai_phase3_perception: Fix can_see() geometry
    - Validate angle calculations and occlusion detection
2.3 Fix behavior tree node execution (X)
    - test_ai_phase4_nodes: Fix node completion detection
    - test_ai_phase4_tactical: Fix tree tick return values
2.4 Fix advanced AI features causing instability (X)
    - test_ai_phase11_blackboard_fuzz: Fuzz testing robustness
    - Stabilize scenario execution and repro tracing
2.5 Tests: All AI tests should pass consistently (X)

PHASE 3. EQUIPMENT SYSTEM FIXES (High Priority)
3.1 Fix socket system functionality (X)
    - test_equipment_phase5_sockets: Fix socket addition logic
    - Verify socket count validation and gem insertion
3.2 Fix enchanting and reforge systems (X)
    - test_equipment_phase5_enchant_reforge: Fix reforge logic
    - test_equipment_phase5_protective_seal: Fix seal preservation
3.3 Fix stat aggregation and persistence (X)
    - test_equipment_phase2_stat_cache: Fix cache invalidation
    - test_equipment_phase2_affix_layers: Fix layer ordering
    - test_equipment_phase2_resists: Fix resistance calculations
3.4 Fix equipment persistence roundtrip (X)
    - test_equipment_phase1_persistence: Fix save/load consistency
    - test_equipment_phase13_persistence: Fix advanced persistence
3.5 Fix reactive systems and mutation (X)
    - test_equipment_phase7_reactive_shield: Fix trigger logic
    - test_equipment_phase18_mutation: Fix mutation algorithms
3.6 Fix crafting integration (X)
    - test_equipment_phase10_crafting: Fix crafting pipeline
    - test_equipment_phase10_crafting_success: Fix success rates
    - test_equipment_phase10_quality: Fix quality calculations
3.7 Tests: All equipment tests should pass (X)

PHASE 4. LOOT SYSTEM FIXES (Medium Priority)
4.1 Fix loot pickup and inventory integration (X)
    - test_loot_phase3_pickup: Fix inventory count updates
    - Verify coin collection and stack merging
4.2 Fix loot merging and despawn logic (X)
    - test_loot_phase6_merge_despawn: Fix merge conditions
    - Validate proximity merging and timeout handling
4.3 Fix loot persistence and roundtrip (X)
    - test_loot_phase20_4_persistence_roundtrip: Fix save consistency
    - Verify item state preservation across sessions
4.4 Fix loot generation and validation (X)
    - test_loot_phase17_5_diff: Fix differential generation
    - test_loot_phase23_example_pack: Fix example validation
    - test_loot_phase23_style_guide: Fix style compliance
4.5 Tests: All loot system tests should pass (X)

PHASE 5. COMBAT SYSTEM FIXES (Medium Priority)
5.1 Fix team obstruction and targeting (X)
    - test_combat_phase5_team_obstruction: Fix team filtering
    - Verify friendly fire prevention and targeting logic
5.2 Fix hitbox system (X)
    - test_combat_phase5_hitbox_primitives: Fix primitive detection
    - test_combat_phase5_hitbox_authoring_broadphase: Fix broadphase
5.3 Fix combat mechanics (X)
    - test_combat_phase3_encumbrance: Fix encumbrance calculations
    - test_combat_phase3_hyper_armor: Fix armor immunity
    - test_combat_phase4_cc: Fix crowd control effects
5.4 Fix damage and events (X)
    - test_determinism_damage_events: Fix event determinism
    - Ensure reproducible combat outcomes
5.5 Tests: All combat tests should pass (X)

PHASE 6. SAVE SYSTEM FIXES (Medium Priority)
6.1 Fix save system roundtrip issues (Done)
    - test_save_phase7_inventory_durability_roundtrip: Fix durability preservation
    - Verify all game state saves and loads correctly
6.2 Fix dependency and integration manager (X)
    - test_dependency_manager: Fix dependency resolution
    - test_integration_manager: Fix component integration
6.3 Tests: All save system tests should pass (X)

PHASE 7. CONFIGURATION & DATA SYSTEM FIXES (Medium Priority)
7.1 Fix configuration validation (X)
    - test_config_system_validation: Fix validation logic
    - Ensure all config files are properly validated
7.2 Fix dialogue JSON loading (X)
    - test_dialogue_json: Fix JSON parsing errors
    - Verify dialogue file format compliance
7.3 Fix crafting system integration (X)
    - test_crafting_phase2_gathering: Fix resource gathering
    - test_crafting_phase3_refinement: Fix refinement logic
7.4 Tests: All config and data tests should pass (X)

PHASE 8. UI & VENDOR SYSTEM FIXES (Low Priority)
8.1 Fix start screen functionality (X)
    - test_start_screen_phase10_1_headless: Fix headless mode
8.2 Fix vendor special offers (X)
    - test_vendor_phase6_special_offers: Fix offer generation
8.3 Fix inventory tagging and rules (X)
    - test_inventory_phase3_tags: Fix tag assignments
    - test_inventory_phase3_lock_rule_enforce: Fix rule enforcement
8.4 Tests: All UI and vendor tests should pass (X)

PHASE 9. WORLD GENERATION & ENEMY FIXES (Low Priority)
9.1 Fix worldgen optimization (X)
    - test_worldgen_phase14_optimization: Fix generation performance
9.2 Fix enemy integration (X)
    - test_enemy_integration_phase6: Fix enemy behavior integration
9.3 Fix integration bridges (X)
    - test_phase3_1_enemy_ai_bridge: Fix AI bridge integration
    - test_phase3_7_worldgen_enemy_bridge: Fix worldgen enemy bridge
9.4 Tests: All worldgen and enemy tests should pass (X)

PHASE 10. PROGRESSION & AFFIX SYSTEM FIXES (Low Priority)
10.1 Fix progression maze generation (X)
     - test_progression_phase4_maze: Fix maze algorithm stability
10.2 Fix affix persistence (X)
     - test_affix_persistence_roundtrip: Fix affix save/load
10.3 Fix repair cost calculations (X)
     - test_repair_costs: Fix cost formula accuracy
10.4 Tests: All progression tests should pass (X)

PHASE 11. REGRESSION PREVENTION & VALIDATION (Medium Priority)
11.1 Add comprehensive test suite validation (X)
11.2 Implement test isolation to prevent cascading failures (X)
11.3 Add performance benchmarks for timeout-prone tests (X)
11.4 Create determinism validation for all random systems (X)
11.5 Add memory leak detection in test harness (X)
11.6 Implement continuous integration test monitoring (X)
11.7 Tests: Full test suite should achieve >95% pass rate (X)

PHASE 12. OPTIMIZATION & MONITORING (Low Priority)
12.1 Optimize slow-running tests for CI efficiency (X)
12.2 Add test execution time monitoring (X)
12.3 Implement flaky test detection and reporting (X)
12.4 Add test coverage analysis and gap identification (X)
12.5 Create test maintenance documentation (X)
12.6 Tests: All tests complete within reasonable time bounds (X)

IMPLEMENTATION STRATEGY:
1. **Immediate Focus**: Fix all segfaults and timeouts first to prevent crashes
2. **Systematic Approach**: Address dependency violations before feature bugs
3. **Risk Management**: Test each fix in isolation before moving to next
4. **Regression Prevention**: Add new tests for each bug fixed
5. **Performance Monitoring**: Track test execution times and memory usage
6. **Documentation**: Update test documentation and failure troubleshooting guides

TESTING METHODOLOGY:
1. **Isolation Testing**: Run each fixed test in isolation to verify fix
2. **Integration Testing**: Run related test groups to check for regressions
3. **Full Suite Validation**: Run complete test suite after each phase
4. **Stress Testing**: Run tests multiple times to verify stability
5. **Performance Testing**: Monitor resource usage and execution times
6. **Determinism Validation**: Ensure reproducible test outcomes

SUCCESS CRITERIA:
- All 66 failing tests pass consistently
- No new test failures introduced
- Test suite execution time remains reasonable (<10 minutes)
- Memory leaks eliminated from test harness
- Test pass rate >95% maintained over time
- Code layering violations completely resolved
- All segfaults and critical crashes eliminated

RISK MITIGATION:
- **Backup Strategy**: Maintain working test baseline before each major fix
- **Incremental Fixes**: Fix tests in small groups to isolate issues
- **Rollback Plan**: Quick revert capability if fixes cause regressions
- **Validation Gates**: Require full suite pass before proceeding to next phase
- **Performance Monitoring**: Track and alert on performance degradation
- **Expert Review**: Code review all fixes affecting core systems
