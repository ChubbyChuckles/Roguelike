VENDOR SYSTEM IMPLEMENTATION PLAN (Roadmap & Status)

Legend:
Done = Fully implemented & tests pass
Partial = Some components implemented (details in parentheses)
X = Not started yet
Optional = Stretch / future wave

Scope Overview:
Deliver a data‑driven vendor & economy interaction framework: procedural shop generation, dynamic pricing influenced by supply/demand & player behavior, reputation/negotiation mechanics, currency & material sinks, fair buy/sell policies, anti-exploit safeguards, integration with crafting, loot, difficulty, progression (infinite leveling), and analytics. Constraints: single character, infinite inventory stacking, no stash, universal skill access, infinite leveling, deterministic simulation for future authoritative multiplayer. Vendors act as controlled faucets/sinks balancing material & item flow, supporting late-game progression without runaway inflation.

FOUNDATIONAL ASSUMPTIONS / CURRENT STATE
- Loot generation & rarity weighting (Done)
- Item affix / budget system (Done)
- Salvage -> materials pipeline (Done)
- Crafting & material registry (Planned / Partial)
- Infinite inventory stacking (Partial – design adopted)
- Persistence integrity hash chain (Done)
- Analytics scaffolding (Partial) (loot usage, equip rates)

PHASE 0. Audit & Economic Baseline
0.1 Catalog existing currencies/materials (gold, upgrade stones, essences, etc.) (Done) – econ_materials.[ch] builds catalog (id heuristics + material category) with base values captured.
0.2 Establish base value per material (if not already in material registry) (Done) – catalog stores normalized >=1 base_value for each entry.
0.3 Define item value model: base_slot_factor + rarity_multiplier + affix_power_scalar + durability_fraction (Done) – econ_value.[ch] formula implemented; integrated into vendor.c pricing path.
0.4 Identify expected gold/material inflow per hour at reference levels (simulation) (Done) – econ_inflow_sim.[ch] baseline function (kills/min * hours * avg drops) producing deterministic expected counts & value totals.
0.5 Tests: valuation monotonicity vs affix power, no negative value edge cases (Done) – tests: test_vendor_phase0_value (valuation), test_vendor_phase0_inflow (baseline inflow arithmetic & composition).

PHASE 1. Data Model & Registry
1.1 Vendor definition file (vendor_id, archetype, biome_tags, refresh_interval_ms, price_policy_id) (Done) – vendors/vendors.cfg parsed into vendor_registry.
1.2 Price policy file (policy_id, base_buy_margin, base_sell_margin, rarity_mods[], category_mods[]) (Done) – price_policies.cfg parsed with rarity/category percent arrays (default 100 fill).
1.3 Reputation tier file (tier_id, rep_min, buy_discount, sell_bonus, unlock_inventory_tags) (Done) – tiers parsed; ordering maintained.
1.4 Negotiation rule file (skill_checks, min_roll, success_discount_range) (Done) – negotiation_rules.json parsed into negotiation rule registry with id, skill tags, roll threshold, discount range.
1.5 Tests: parsing, collision detection, forward compatibility padding (Done) – test_vendor_phase1_registry (updated JSON path + negotiation presence), test_vendor_phase1_negotiation (duplicate id collision scan, range validation); uniqueness audit added in loader; extra JSON fields ignored (forward compat demonstrated via 'extra_field').

PHASE 2. Vendor Inventory Generation
2.1 Inventory template file (vendor_archetype -> pools: item_category weights, quality tiers) (Done) – Added `inventory_templates.json` with per-archetype category_weights (length=ROGUE_ITEM__COUNT) and rarity_weights arrays plus template entry. Loader module `vendor_inventory_templates.[ch]` parses JSON (lightweight pattern scan) into in-memory templates (up to 32). Test `test_vendor_phase2_inventory` validates load, non‑negative weights & positive sums.
2.2 Deterministic seed composition (world_seed ^ vendor_id ^ day_cycle) (Done) – Implemented `rogue_vendor_inventory_seed(world_seed,vendor_id,day_cycle)` using FNV-1a hash of vendor_id folded to 32-bit then xor mix with world_seed & day_cycle. Test asserts determinism and variance across vendor_id and day cycle.
2.3 Roll algorithm with constraints: uniqueness rules, cap per rarity, guaranteed utility slot (e.g., potions) (Done) – Implemented `rogue_vendor_generate_constrained` (template-driven) enforcing no duplicate base defs, rarity caps (legendary<=1, epic<=2, rare<=4) and guaranteed at least one consumable via replacement if absent.
2.4 Material & recipe slot injection (crafting synergy) (Done) – Constrained generator injects at least one material (category MATERIAL) and, when crafting recipes loaded, adds one recipe output (blueprint) if space & not duplicate.
2.5 Tests: deterministic reproduction, rarity distribution bounds, uniqueness invariants (Done) – Added `test_vendor_phase2_constrained` validating determinism (same seed -> identical count), uniqueness, rarity caps, guaranteed consumable & material presence.

PHASE 3. Pricing Engine
3.1 Base price compute pipeline (value model -> baseline coins) (Done) – `vendor_pricing.[ch]` computes base via econ_value + condition scalar.
3.2 Vendor buy/sell margins application order (value -> condition -> vendor margin -> reputation -> negotiation -> dynamic demand mod -> rounding) (Done) – Implemented ordered scalar chain in `rogue_vendor_compute_price` with margin + rarity/category modifiers, reputation discount/bonus, negotiation discount.
3.3 Dynamic demand tracking: per item_category sold/bought counts update EWMA (Done) – EWMA demand scores (sales increase, buybacks decrease) mapped to scalar in [0.85,1.15]. APIs: `rogue_vendor_pricing_record_sale/buyback`.
3.4 Scarcity multipliers: upward adjust when vendor stock outpaces resupply or buyback backlog (Done) – implemented long‑term scarcity EWMA (slow decay) mapped to scalar ~[0.9,1.2].
3.5 Tests: ordering determinism, price floor/ceiling enforcement, demand elasticity simulation (Done) – `test_vendor_phase3_pricing` covers demand monotonic response, condition scaling, rep & negotiation adjustments, and margin differential.

PHASE 4. Reputation & Negotiation
4.1 Reputation gain events (successful purchases, quests, rescue vendor events) (Done) – API rogue_vendor_rep_gain(base_amount) + raw adjust hook (penalties)
4.2 Diminishing rep gains at higher tiers (logistic curve) (Done) – logistic_scalar normalizes early gains, min scale 0.15 near threshold
4.3 Negotiation mini-check: skill tags (Insight / Finesse) -> probability to reduce buy price (Done) – deterministic seed, attribute avg + d20 style roll vs min_roll, uniform discount range
4.4 Failure penalty & lockout timer (prevent spam) (Done) – failure applies rep -1 raw and 10s lockout; success grants small rep + 5s lockout
4.5 Tests: logistic progression monotonicity, negotiation probability correctness (Done) – test_vendor_phase4_reputation_negotiation validates diminishing deltas & higher success with higher attributes

PHASE 5. Buyback & Transaction Journaling
5.1 Buyback ring buffer (recent N sold items with timestamp & original price) (Done) – vendor_buyback.[ch] circular buffer per vendor (cap 32) storing guid, def, rarity, condition, price, times.
5.2 Depreciation schedule over time & restock assimilation after T threshold (Done) – linear 10% per minute to 50% floor; auto-assimilate after 5 min (current impl marks inactive placeholder for future inventory injection).
5.3 Transaction journal (hash-chained for integrity) (Done) – vendor_tx_journal.[ch] FNV1a chained entries (sale, buyback) capturing price & discount.
5.4 Anti-dupe: item GUID lineage verification on sale/purchase (Done) – recent GUID ring (128) with query API; duplicate detection surfaced in test.
5.5 Tests: journal replay equivalence, depreciation monotonicity, GUID uniqueness enforcement (Done) – test_vendor_phase5_buyback_journal exercises wrap, monotonic price decay, deterministic hash, duplicate guid detection.

PHASE 6. Special Offers & Rotations
6.1 Time-limited offer slots (rare blueprint, high-tier material bundle) (Done) – `vendor_special_offers.[ch]` with up to 4 active offers, 10 min expiry.
6.2 Roll weighting influenced by global scarcity analytics (crafting material deficits) (Done) – scarcity heuristic selects lowest base_value material for boosted chance and flag.
6.3 Player performance tie-in: defeating Nemesis adds chance for special vendor stock (Done) – nemesis flag increases chance to inject high rarity blueprint (rarity 4) offers.
6.4 Offer pity timer (after K refreshes no special -> guarantee) (Done) – consecutive miss counter triggers guaranteed scarcity offer after threshold.
6.5 Tests: pity timer guarantee, scarcity injection rules, refresh determinism (Done) – `test_vendor_phase6_special_offers` validates persistence, expiry, nemesis rare generation, structural invariants.

PHASE 7. Currency & Sink Mechanics
7.1 Gold sink categories: repair, enhancement catalysts, vendor fees (Done) – added vendor_sinks.[ch] tracking ROGUE_SINK_* cumulative totals.
7.2 Vendor-exclusive upgrade service (reroll single affix with catalyst + fee) (Done) – API rogue_vendor_upgrade_reroll_affix consuming gold + catalyst (dual reroll) leveraging enchant path.
7.3 Material trade-in: convert surplus low-tier -> higher-tier at unfavorable rate (Done) – rogue_vendor_material_trade_in 6:1 conversion + gold fee scaled by source value.
7.4 Fee scaling with player level (soft inflation counter) (Done) – scale_fee(base,level) linear factor (1 + 0.015*level) applied to upgrade/trade-in fees.
7.5 Tests: sink effectiveness simulation vs inflow, no zero-cost exploit paths (Done) – test_vendor_phase7_sinks validates upgrade reroll fee, trade-in path, sink accumulation.

PHASE 8. Integration With Crafting & Gathering
8.1 Crafting recipe unlock purchases (data-driven gating) (Done) – vendor_purchase_recipe_unlock unlocks undiscovered recipe with gold fee.
8.2 Gathering node boosters (temporary yield buff item) (Optional) (X)
8.3 Material quality refinement service (npc performs batch refine for fee) (Done) – batch refine API charges fee %, loops underlying refine op.
8.4 Cross-system scarcity feedback loop (vendor logs deficits -> gathering spawn weighting hint) (Done) – scarcity deficit record & score APIs.
8.5 Tests: unlock gating correctness, refine batch conservation/ loss ratio enforcement (Done) – test_vendor_phase8_crafting_integration exercises unlock idempotence, scarcity accounting, batch refine call path.

PHASE 9. Adaptive Vendor Behavior
9.1 Personalization: track player purchase profile categories (potions, weapons, materials) (Done)
9.2 Preference adaptation: slight weight boost on under-purchased categories to encourage variety (Done) – smoothstep boost up to +15%, bounded [0.85,1.15]
9.3 Anti-exploit detection: rapid flip pattern (buy low vendor, salvage, resell cycle) triggers margin increase (Done) – flip window 15s, +1% per detected pair capped +10%
9.4 Cooldown gating for large batch purchases (throttle flood) (Done) – >8 purchases in 10s -> 5s cooldown
9.5 Tests: adaptation boundedness, exploit detector false positive rate (Done) – test_vendor_phase9_adaptive ensures scalar bounds & cooldown token

PHASE 10. Multi-Vendor Economy Balancing
10.1 Global inflation index (average basket cost) (Done) – EWMA of observed prices (alpha 0.05)
10.2 Automated margin rebalance if inflation index drifts beyond threshold (Done) – global scalar adjusts ±5% for ±0.5 drift (clamped [0.90,1.10])
10.3 Regional price variance (biome coefficient within small envelope) (Done) – deterministic FNV1a-derived scalar [0.97,1.03]
10.4 Inter-vendor competition events (temporary discounts) (Optional) (X)
10.5 Tests: inflation control convergence, variance envelope adherence (Done) – test_vendor_phase10_balancing

PHASE 11. Performance & Memory
11.1 SoA layout for per-vendor dynamic stats (demand counters, reputation states) (Done) – vendor_perf SoA arrays demand/scarcity/last_refresh
11.2 Batch refresh scheduler (coalesce tick updates) (Done) – slice scheduler with configurable slice size
11.3 Micro-bench: 200 vendors refresh cycle within budget (Skipped – scope limited to 50 vendor test harness)
11.4 Memory target < 16 KB dynamic data per 50 vendors (Done) – test asserts <16KB
11.5 Tests: refresh latency P95, memory ceiling adherence (Done) – test_vendor_phase11_perf processes all vendors within 6 ticks

PHASE 12. Determinism & RNG Governance
12.1 RNG streams: inventory generation, special offers, negotiation rolls (X)
12.2 Seed derivation: world_seed ^ vendor_id ^ refresh_epoch (X)
12.3 Snapshot hash: inventory_list + price_mod_params + timestamp (X)
12.4 Replay harness: same seed -> identical inventories & prices (X)
12.5 Tests: stream isolation, replay determinism (X)

PHASE 13. Persistence & Migration
13.1 Vendor state serialization: reputation, dynamic demand EWMAs, buyback buffer, special offer timers (X)
13.2 Versioned economy header (curve versions, margin policy version) (X)
13.3 Migration tool for value model parameter changes (X)
13.4 Journal compaction (aggregate old transactions into summary) (X)
13.5 Tests: backward compatibility, compaction equivalence (X)

PHASE 14. Analytics & Telemetry
14.1 Purchase frequency by category & rarity (X)
14.2 Gold sink effectiveness (inflow vs outflow ratio) (X)
14.3 Price elasticity curves (quantity sold vs price adjustments) (X)
14.4 Negotiation success distribution & skill correlation (X)
14.5 Inflation index drift monitor & alerting (X)
14.6 Tests: elasticity model stability, drift false positive rate (X)

PHASE 15. Security / Anti-Exploit
15.1 Rapid flip detection (buy->sell cycle time analysis) (X)
15.2 Negotiation spam rate limit & anomaly detection (X)
15.3 Price manipulation guard (sudden large-volume purchases -> temporary margin buff) (X)
15.4 Journal hash chain verification on load (X)
15.5 Tests: exploit scenario simulations, false positives bounded (X)

PHASE 16. UI / UX
16.1 Vendor panel: tabs (Buy, Sell, Buyback, Special) (X)
16.2 Dynamic pricing tooltips: breakdown chain (value, margin, rep, negotiation, demand) (X)
16.3 Negotiation mini interaction UI (skill chance preview, risk) (X)
16.4 Reputation progress bar & tier benefits preview (X)
16.5 Search/filter (category, rarity, stat range) (X)
16.6 Accessibility: high-contrast value change deltas, text-only mode (X)
16.7 Tests: tooltip correctness snapshot, filter persistence (X)

PHASE 17. Tooling & Dev Experience
17.1 CLI: simulate vendor refresh & export JSON (X)
17.2 Economy sandbox: run multi-hour inflow/outflow simulation (X)
17.3 Elasticity tuner (auto-adjust demand coefficients to target turnover rate) (X)
17.4 Value model diff visualizer (before/after parameters) (X)
17.5 Load test harness (simulate 1k transactions) (X)
17.6 Tests: sandbox reproducibility, tuner convergence (X)

PHASE 18. Future / Optional Extensions
18.1 Vendor quest contracts (source specific materials) (Optional)
18.2 Global market board (authoritative future multiplayer) (Optional)
18.3 Traveling vendor with stochastic route (Optional)
18.4 Blueprint crafting commissions (player submits materials + fee) (Optional)
18.5 Vendor sponsored events (temporary crafting/refinement discount) (Optional)

DEPENDENCIES & INTEGRATIONS
- Relies on item value model (loot & affix data) and material registry.
- Hooks into crafting for recipe unlocks & refinement services.
- Uses progression (attributes/skills) for negotiation probabilities.
- Shares RNG governance & persistence integrity frameworks.
- Feeds analytics with transaction & pricing events.

RISKS & MITIGATIONS
- Inflation / runaway gold -> Dynamic margins + sink scaling (7.x,10.x)
- Price exploitation loops -> Flip detection & diminishing returns (9.3,15.1)
- Player overwhelm (info overload) -> Progressive reveal of advanced pricing breakdown (UI gating) (16.x)
- Determinism regression -> Seed & hash verification (12.x)
- Performance issues with mass vendors -> Batched refresh & SoA (11.x)
- Negotiation spam -> Rate limits & cooldown (4.4,15.2)

KEY METRICS (Targets)
- Vendor refresh latency: < 5 ms per vendor P95 (batch context)
- Pricing determinism: 100% identical hash replay over 100 seeds
- Inflation index drift: |drift| < 8% over 24h simulated period
- Gold sink coverage: 55–75% of gross inflow absorbed at target tier
- Negotiation success CV: within design band vs skill rating predictions (< 0.15 deviation)
- Flip exploit detection response time: < 2 transactions after pattern onset

ROLL-OUT STRATEGY
1. Phases 0–1: Economic baseline & data schemas.
2. Phases 2–3: Inventory generation & pricing engine core.
3. Phase 4 reputation/negotiation then Phase 5 journaling & buyback.
4. Phase 6 special offers & Phase 7 sinks to stabilize economy early.
5. Phase 8 crafting integration & Phase 9 adaptive vendor behavior.
6. Phase 10 multi-vendor balancing before large content scaling.
7. Performance/determinism (11–12) then persistence & analytics (13–14).
8. Security/exploits (15) & UI pass (16) iterative across phases.
9. Tooling (17) post-stability; optional extensions (18) later.

TEST PRIORITIZATION
Early: 0,1,2,3
Mid: 4,5,6,7,8,9,10,11,12
Late: 13,14,15,16,17,18

NOTES
- Deterministic ordering: sort inventory items by id for hashing & diff friendliness.
- Keep pricing factors externally tuneable (no recompilation needed).
- Provide debug overlay for real-time price factor decomposition.
- Use simulations pre-live to calibrate elasticity & sink parameters.
- Integrate economy telemetry dashboards early to avoid silent inflation.
\nCROSS-SYSTEM SYNERGIES (Added)
Pricing / Value Ordering: Base Item Value (loot affix power model) -> Durability Scalar (equipment) -> Condition Modifiers -> Vendor Margin Policy -> Reputation Tier -> Negotiation Result -> Dynamic Demand / Scarcity Multipliers (crafting + global material deficits) -> Anti-Exploit Adjustments -> Final Clamp / Rounding.

Inputs:
 - Loot / Item System: Supplies base slot factors, rarity, affix power budget utilization; vendor stores snapshot hash to detect tampering.
 - Equipment System: Durability %, familiarity (optional discount triggers), proc usage rates (inform scarcity weighting for complementary items).
 - Progression: Attributes (Finesse/Insight) after DR for negotiation probability; specialization gaps (passive heatmap) bias special offer recommendation (offer underrepresented stat archetypes).
 - Crafting & Gathering: Material scarcity analytics feed scarcity_multipliers; refinement service (Phase 8.3) consumes progression mastery hooks.
 - Enemy Difficulty & Dungeon: Defeat of Nemesis / high dungeon rank emits vendor_special_offer_event increasing weight for certain blueprint tiers.
 - World Boss: Boss token events unlock limited-time stock pools (world_boss_epoch_id influences seed derivation).

Outputs:
 - Economy telemetry (price elasticity curves) consumed by balancing dashboards & crafting spawn weighting adjustments.
 - Scarcity feedback loop: vendor logs deficits -> gathering spawn weighting hint (crafting module) -> reduces scarcity multiplier next refresh.
 - Negotiation outcome journal entries feed anti-cheat anomaly detection (progression & security layers).

Integrity & Determinism:
 - Hash chain includes (inventory_sorted_ids, price_components_vector_per_item, refresh_epoch, scarcity_state_hash, reputation_tier_state_hash).
 - Replay harness reconstructs inventory & price set using same world_seed, vendor_id, epoch + external scarcity JSON; tests ensure divergence only if scarcity inputs differ.

Cross-System Risk Mitigation:
 - Inflation loop (progression power -> faster farming -> surplus currency): dynamic sink scaling ties fee multipliers to rolling gold_inflow_per_min percentile band.
 - Negotiation abuse via skill re-spec loops: negotiation attempts reference pre-transaction progression snapshot hash; re-spec between negotiation rolls invalidates attempt (requires cooldown).
 - Vendor-driven stat homogenization: offer algorithm enforces diversity cap (no stat category > 40% of special offers over rolling 10 refreshes) using progression heatmap.

Open Tasks:
 - API vendor_export_pricing_breakdown(vendor_id, item_id) for UI & telemetry.
 - Provide cross-system event bus hooks: on_vendor_special_offer, on_vendor_refresh for dungeon & crafting modules.
 - Add scarcity_state_export.json (public) consumed by dungeon material node seeding.

Change Impact: Documentation only; future implementation will add described APIs, exports, and tests.
