HIT SYSTEM REWORK IMPLEMENTATION PLAN (Weapon-Length, Directional, Overlap-Based, VFX/SFX Feedback)

Legend:
Done = Fully implemented & validated
Partial = Some components implemented (details)
X = Not started

Objective Summary:
Replace current abstract strike timing / implicit reach logic with a physically grounded, weapon-length driven hit detection system that:
- Models a per-frame weapon sweep volume based on weapon length and orientation.
- Detects overlap with enemy hitboxes from any direction (full 360° coverage).
- Plays directional impact SFX, damage flash (single blink), particle burst along hit normal.
- Applies knockback scaled by level & strength differential.
- Triggers enemy explosion effect if one-shot (overkill condition) distinct from standard death.
- Provides debug overlay toggling weapon & enemy bounding volumes and slash animation frames.
- Renders an 8-frame slash VFX sheet with weapon sprite overlaid and pose-corrected (x,y,theta per frame).

PHASE 0. Baseline Audit & Decomposition (Immediate)
0.1 Inventory current hit logic: identify strike activation window, reach calc, current damage application site (combat / enemy_system_ai intersection).
0.2 Enumerate data already available: player facing vector, weapon archetype stats, enemy AABBs or position+radius, combo state.
0.3 Confirm existing knockback & critical/overkill pipeline endpoints.
0.4 Gather existing rendering hooks for debug draw & damage flash (tint/flash_timer).
Deliverable: summary doc in docs/hit_system_audit.md (optional) (X)

PHASE 1. Data Structures & Configuration (Done)
1.1 Weapon geometry struct: length_px, width_px (for capsule), pivot_offset (from player origin), slash_vfx_id.
1.2 Enemy hitbox standardization: ensure each enemy exposes canonical hurt AABB and derived capsule (center,radius,height) if vertical layering needed.
1.3 Slash animation table: 8 entries with per-frame weapon overlay transform {dx, dy, angle_deg, scale}.
1.4 Authoring format (JSON): weapons_hit_geo.json & slash_vfx_overlays.json with arrays keyed by weapon_type / vfx_id.
1.5 Loader functions with fallback logging & validation (length>0, frame count==8).
1.6 Tests: load valid JSON, reject malformed, ensure overlay frame count. (X)

PHASE 2. Runtime Hit Volume Generation (Done)
2.1 Represent weapon sweep this frame as capsule: start = player_pos + pivot_offset, end = start + facing * length_px.
2.2 During strike phase only: compute instantaneous capsule; optionally expand slightly for fast weapons (speed scalar * 0.1 * length) to mitigate tunneling.
2.3 Multi-frame accumulation: maintain last capsule and union test for enemies not yet hit (one-hit per strike unless multi-hit weapon flag later).
2.4 Debug overlay: append capsule to debug draw list (color: cyan) when hit_debug enabled.
2.5 Tests (unit): geometric overlap between capsule and synthetic enemy AABB / circle across directions (N,E,S,W, diagonals). (X)

PHASE 3. Overlap Detection Pipeline (Done)
3.1 Broadphase: AABB of capsule vs enemy AABB array (reuse or add lightweight loop; small enemy counts justify O(n)).
3.2 Narrowphase: capsule vs AABB intersection (segment distance <= (weapon_width/2 + enemy_padding)).
3.3 Directional normal: compute from enemy center to closest point on segment; normalize for VFX emission direction & knockback.
3.4 Maintain per-strike hit registry (enemy id bitset) to prevent duplicate hits.
3.5 Expose API rogue_combat_weapon_sweep_apply(dt_ms) returning hit count.
3.6 Tests: ensure no double hits, directional coverage 360°, correct normal sign. (X)

PHASE 4. Feedback: SFX, Flash, Particles, Knockback
4.1 Impact SFX: add sound id table per weapon archetype; play on first enemy hit only (or every hit with cooldown 40ms) via rogue_audio_play_sfx().
4.2 Damage flash: set enemy->flash_timer = FLASH_MS (e.g., 120) & toggle tint flag; existing render path will blink once.
4.3 Particle emission: spawn N (8–14) particles at impact point; velocity base = normal * base_speed plus random lateral spread (rotate ±35°). Color from enemy palette or damage type.
4.4 Knockback magnitude: base = clamp( (player_level - enemy_level)*level_scalar + (player_str - enemy_str)*stat_scalar , min_knockback, max_knockback ). Negative or small => minimal push.
PHASE 4. Feedback: SFX, Flash, Particles, Knockback (Partial)
Implemented subset: flash duration tweak, basic knockback magnitude (strength-based) using sweep normals.
Remaining: impact SFX table, particle emission (standard & overkill), overkill explosion path & screen shake, refined knockback scaling (level diff), tests for particle counts & explosion flag.

4.5 Apply knockback impulse: enemy->base.pos += normal * magnitude (deferred: integrate physics smoothing).
4.6 Overkill explosion: if damage >= enemy->health_max OR execution flag and previous health==full -> spawn explosion particles (radial burst, larger count, optional screen shake), bypass standard death animation.
4.7 Tests: flash triggers once, particle count in range, knockback increases with differential, overkill path sets explosion flag. (X)

PHASE 5. Slash Animation & Weapon Overlay
5.1 Load slash VFX spritesheet (8 frames) into texture; store frame rects.
5.2 At strike start: start VFX playback timer; per frame compute elapsed -> frame index.
5.3 Overlay weapon sprite: for current frame apply transform {dx,dy,angle,scale} relative to player pivot (supports rotation about weapon pivot).
5.4 Blend order: slash VFX drawn first (additive or alpha) then weapon sprite to preserve crisp silhouette.
5.5 Optional motion trail: faint previous 1–2 frames with reduced alpha (defer if scope risk).
5.6 Tests: frame advancement deterministic at 60fps; overlay transforms applied (sample frame 0 & 4 offset vs expected). (X)

PHASE 6. Debug & Developer Tooling
6.1 Toggle key (F8 or via cfg) sets g_app.show_hit_debug.
6.2 Draw enemy hurt AABBs (red), weapon capsule (cyan), impact points (yellow dots) for last frame.
6.3 Display textual overlay: last_hit_count, last_knockback_mag, explosion_triggered flag.
6.4 Optional: record last 32 hits ring buffer for playback.
6.5 Tests: toggling debug does not alter hit outcomes; overlay suppressed when off. (X)

PHASE 7. Integration & Refactor of Legacy Logic
7.1 Remove old reach/arc calculation; replace strike damage trigger with weapon_sweep pipeline call.
7.2 Ensure combo / timing state machine unchanged (only hit detection swapped).
7.3 Update enemy death handling to branch explosion vs normal path.
7.4 Migrate existing knockback code to new magnitude function; deduplicate.
7.5 Adjust hitstop injection: apply only on first enemy hit each strike (cap multi-target slowdown).
7.6 Regression Tests: existing combat unit tests still pass (timings, crits, mitigation) + new sweep tests.
7.7 Performance check: profile per-frame sweep cost with 50 enemies; ensure <0.1ms average.

PHASE 8. Balancing & Tuning
8.1 Empirical tuning session: length vs width vs forgiveness; adjust width to avoid whiffs at point-blank.
8.2 Knockback scaling coefficients iteration (log differentials & resulting magnitudes).
8.3 Particle count & lifetime performance pass (avoid overdraw spikes).
8.4 Audio layering: add variation pool for impact (light/heavy/crit) if time permits.

PHASE 9. Documentation & Maintenance
9.1 Add docs/hit_system_overview.md (diagram of capsule vs enemy AABB intersection).
9.2 Add JSON schema comments for weapon geometry & overlay files.
9.3 Inline code comments for math helpers (closest point on segment, knockback scaling).
9.4 Add future hooks section (multi-hit weapons, charged sweep expansion, elemental impact FX).

RISK & MITIGATION
- Duplicate init paths (legacy app.c) could load outdated structs -> ensure single source integration.
- Performance regression with many enemies -> fallback to spatial grid if O(n) cost exceeds budget.
- Particle spam on multi-hit cleaves -> cap per strike global particle budget.
- Overlapping animation & geometry transforms -> validate pivot alignment early.

ESTIMATED ITERATION ORDER (SUGGESTED SLICES)
Slice 1: Phases 1–2 (geometry + capsule overlap core) + minimal debug.
Slice 2: Phase 3 + flash & knockback subset.
Slice 3: Particles + SFX + overkill explosion.
Slice 4: Slash VFX overlay & weapon transform table.
Slice 5: Full debug overlay & legacy removal.
Slice 6: Tests & tuning/balancing.

TEST MATRIX (Key Cases)
- Horizontal sweep hits single enemy at max reach.
- Diagonal sweep hits enemy off-axis within width tolerance.
- Multiple enemies clustered: all with centers intersecting capsule -> all register exactly once.
- Tiny enemy (small AABB) at edge still detected.
- High differential knockback vs equal-level minimal knockback.
- Overkill explosion vs normal kill (damage = max_health -1 then extra strike > threshold).
- Debug toggle on/off no behavior difference.
- Frame-rate variance (simulate dt jitter) still advances slash frames deterministically.

METRICS / LOGGING
- Log first N sweeps with: swing_id, enemies_hit, first_target_id, knockback_mag_avg.
- Counter of explosion deaths vs normal for balancing.
- Optional: histogram of miss distances (closest approach when no hit) for tuning width.

SUCCESS CRITERIA
- 100% existing combat tests pass + new hit system tests green.
- Visual: weapon contact matches perceived hits; minimal ghost whiffs.
- Performance: negligible frame time increase (<0.2ms @ 50 enemies).
- Feedback: distinct flash + particles + SFX on hit; explosion visually clear for one-shots.

STATUS SUMMARY
All phases: X (new system not started). This file is the authoritative roadmap for implementation.
