LOOT SYSTEM IMPLEMENTATION PLAN (Roadmap & Status)

Legend:
Done = Fully implemented & tests pass
In Implementation = Actively being developed / partial code may exist
X = Not started yet

1. Core Data Foundations (Done)
1.1 Item definition registry & parsing from CSV-like config (Done)
1.2 Loot table parsing with weighted entries (Done)
1.3 Deterministic loot roll function (seeded) (Done)
1.4 Inventory data structures (counts per item id) (Done)
1.5 Save/load persistence for inventory & item definitions (Done)
1.6 Extended loot table syntax with quantity ranges (Done)
1.7 Extended loot roll (multi-drop batching) (Done)
1.8 Rarity field in item defs (optional 15th column) (Done)
1.9 Loot table rarity min/max range overrides (Done)
1.10 Logging: parsing + loot_roll events (Done)
1.11 Multi-file item category config loading (Done)

2. Ground Item Runtime Lifecycle (Done)
2.1 Item instance pool data structure (Done)
2.2 Enemy death spawn hook integrating loot roll (Done)
2.3 Spawn jitter / positional scatter (Done)
2.4 Detailed coordinate comparison debug logs (Done)
2.5 Auto-pickup & inventory increment (Done)
2.6 Stack merge on spawn adjacency (Done)
2.7 Runtime update: despawn timers (Done)
2.8 Unit tests: spawn, pickup, persistence, merge+despawn (Done)

3. Visual Representation & Feedback (Done)
3.1 Colored rendering by rarity tiers (Done)
3.2 Distinct rarity enum definition & mapping (Done)
3.3 Basic logging for rarity selection in drops (Done)
3.4 Preliminary debug suppression for noisy spawns (Done)
3.5 Jitter randomness validation logs (Done)

4. Persistence & Serialization (Done)
4.1 Inventory persistence file format (Done)
4.2 Restore inventory on boot test (Done)
4.3 Item definition reload resilience (Done)
4.4 Backward-compatible rarity addition (Done)
4.5 Deterministic RNG reseeding across sessions (Done)

5. Rarity System Enhancements (Done)
5.1 Tier-to-color mapping abstraction header (Done)
5.2 Table-level rarity band selection (Done)
5.3 Validation tests for rarity distribution (Done)
5.4 Dynamic rarity weighting adjustments (Done)
5.5 Configurable per-rarity drop sound / VFX hooks (Done)
5.6 Per-rarity despawn modifiers (Done)
5.7 Minimum floor rarity after player progression thresholds (Done)
5.8 Weighted pity-counter for high rarity (Done)

6. Debugging & Instrumentation Controls (Done)
6.1 Granular logging categories (loot_roll, spawn, merge) (Done)
6.2 Runtime flag / env var to toggle loot verbosity (Done)
6.3 Rolling window statistics (drops per rarity) (Done)
6.4 On-demand console command: print loot histogram (Done)
6.5 Telemetry snapshot export (Done)

7. Affix & Modifier Framework (Done)
7.1 Data schema for prefix/suffix pools (Done)
7.2 Affix parsing from config files (Done)
7.3 Affix rarity weighting integration (Done)
7.4 Procedural stat roll (ranges per affix) (Done)
7.5 Item instantiation with affix attachment list (Done)
7.6 Derived stat aggregation (weapon DPS, armor rating) (Done)
7.7 Persistence format for rolled affixes (Done)
7.8 Unit tests: affix parsing, roll determinism, item attachment, persistence (Done)

8. Advanced Item Generation Pipeline (Done)
8.1 Generation request API (context: enemy level, biome) (Done)
8.2 Rule graph: gating affixes by item category (Done)
8.3 Multi-pass rarity -> base item -> affix selection order (Done)
8.4 Quality scalar affecting stat roll ceilings (Done)
8.5 Seed mixing: player luck + enemy archetype (Done)
8.6 Duplicate affix avoidance logic (Done)
8.7 Unit tests: reproducibility & boundary stats (Done)

9. Dynamic Drop Balancing (Pending)
9.1 Global drop rate config layer (Done)
9.2 Adaptive weighting (increase weight of under-dropped categories) (Done)
9.3 Player preference learning (optional heuristic) (Done)
9.4 Pity system for legendary/epic (ties to 5.8) (Done)
9.5 Session metrics: items/hour, rarity/hour (Done)
9.6 Tuning console commands (set weight, reset counters) (Done)

10. Economy & Vendors (Partial)
10.1 Shop inventory generation using loot pipeline (Done)
10.2 Buy/sell price formulas (rarity, affixes, demand) (Done) /* Current: rarity*base_value ladder; future: affix & demand scaling */
10.3 Vendor restock timer & rotation (Done)
10.4 Currency sinks (repair, reroll affix fees) (Partial: cost formulas + repair UI hotkey + repair API/tests; reroll UI pending)
10.5 Price scaling with player reputation (Done)
10.6 Unit tests: sell value bounds (Done)

11. Crafting & Materials (Pending)
11.1 Salvage system: break items -> materials (Done)
11.2 Material rarity tiers (Done)
11.3 Crafting recipes config parsing (Done)
11.4 Upgrade paths (evolve item rarity/stat) (Done: rarity delta clamp API, upgrade recipe support)
11.5 Reroll affix using currency + mats (Done: reroll API consumes materials + gold)
11.6 Unit tests: salvage yields & recipe validity (Done: existing salvage_basic + new crafting_basic + reroll_affix)

12. Loot Filtering & UI Overlay (Partial)
12.1 Filter rules config (rarity, category, name pattern) (Done)
12.2 Runtime toggle: hide filtered ground items (Done: hidden_filter flag + reapply API)
12.3 Color-coded outlines + glow (Done: basic SDL outline border per rarity; groundwork for glow)
12.4 Mini-map loot pings by rarity (Done)
12.5 On-hover tooltip (base stats + affixes) (Done)
12.6 Comparison tooltip vs equipped (Done)
12.7 Unit tests: filter predicate evaluation (Done)

13. Inventory UI & Management (Done)
13.1 Grid or list representation with stack counts (Done: inventory_ui_build produces slot arrays from core counts)
13.2 Sorting & filtering UI controls (Done: sort modes name/rarity/category/count + rarity/category mask filter struct)
13.3 Drag-and-drop equip / move / split stack (Done: existing grid + new equip helper hooking first instance spawn if needed)
13.4 Quick salvage / drop context actions (Done: helpers salvage_def and drop_one with inventory decrement + ground spawn)
13.5 Persistence of UI state (sort mode) (Done: field inventory_sort_mode serialized in player component v9 tail)

14. Equipment & Stat Integration (Partial)
14.1 Equip slots & constraints (Done: expanded slot model weapon + 5 armor slots with category enforcement)
14.2 Recalculation pipeline: base + affix + temporary buffs (Done: stat_cache now aggregates weapon affix flat dmg, armor base armor into EHP heuristic, and existing agility->dexterity bonuses)
14.3 Derived stat caching & invalidation (Done: stat_cache module + dirty marks on equip/unequip & bonus application)
14.4 DPS & EHP (effective HP) estimator (Done: heuristic in stat_cache.c displayed in equipment panel)
14.5 Unit tests: equip / unequip stat deltas (Done: equip bonus, unequip regression test)

15. Extended Persistence & Versioning (Done)
15.1 Save schema version tag (Done: existing descriptor.version leveraged; affix/enchant field extension uses size heuristic, no bump required)
15.2 Migration handlers for added affix fields (Done: forward-compatible reader adds enchant_level defaulting 0; write path always emits field)
15.3 CRC / hash for integrity check (Done: previously implemented per-section CRC + SHA256 footer reused)
15.4 Partial save (inventory only) API (Done: rogue_save_manager_save_slot_inventory_only isolates inventory component serialization)
15.5 Backup rotation (Done: rogue_save_manager_backup_rotate writes timestamped .bak copy; pruning placeholder pending cross-platform dir scan)

16. Multiplayer / Personal Loot (Done)
16.1 Player-specific instanced drops (Done: owner_player_id, assignment API, pickup gating)
16.2 Shared vs personal loot mode flag (Done: mode enum + setter/getter)
16.3 Need/greed roll system (Done: multi-participant session begin/choose/resolve, need priority, deterministic LCG rolls, ownership assignment + lock until resolve, tests)
16.4 Trade validation (Done: ownership check, lock rejection, self-trade rejection; placeholder distance/cooldown left for future UI integration)
16.5 Anti-duplication safeguards (Done: instance lock via active need/greed session prevents pickup/trade until resolution)

17. Performance & Memory Optimizations (In Implementation)
17.1 Object pooling for affix roll scratch buffers (Done: fixed-cap weight scratch pool with acquire/release metrics + max in-use tracking)
17.2 SIMD batch evaluation for weight normalization (Done: SSE2 sum path with scalar fallback, metrics counters)
17.3 Profiling harness (hot loops in roll) (Done: high-resolution timers around affix roll + weight summations; nanosecond aggregates exposed)
17.4 Cache-friendly item def indexing (Done: open-addressed FNV1a hash index + fast lookup API, unit test)
17.5 Incremental serialization (dirty set only) (Done: component-level cached section reuse + record-level inventory diff metrics (reused vs rewritten) implemented)

18. Analytics & Telemetry (Optional) (Pending)
18.1 Drop event ring buffer (Done: fixed-cap ring (512) of recent drops: def_index, rarity, time; APIs record + query)
18.2 Export JSON stats snapshot (Done: `rogue_loot_analytics_export_json` outputs counts + totals JSON)
18.3 Rarity distribution drift alerts (Done: baseline fractions + relative deviation threshold; API `rogue_loot_analytics_set_baseline_counts/fractions`, `rogue_loot_analytics_set_drift_threshold`, `rogue_loot_analytics_check_drift` returning per-rarity drift flags)
18.4 Session summary overlay (Done: aggregated `RogueLootSessionSummary` with drops, per-rarity counts, duration, drops/min, drift flags via `rogue_loot_analytics_session_summary`)
18.5 Heatmap of drop positions (Done: 32x32 grid, positional record API `rogue_loot_analytics_record_pos`, query `rogue_loot_analytics_heat_at`, CSV export `rogue_loot_analytics_export_heatmap_csv`)

19. Audio/Visual Polish (Pending)
19.1 Per-rarity pickup sounds (Done: rarity->pickup sound id mapping APIs rogue_rarity_set_pickup_sound / rogue_rarity_get_pickup_sound; pickup loop logs sound id placeholder)
19.2 Ground sparkle particle system (by rarity) (Done: timer-based sparkle cycle tracked per instance in loot_vfx.c, rarity influences beam flag only for now; future expansion can vary period)
19.3 Beam / pillar effect for high rarity (Done: beam_active=1 for rarity>=3 set on spawn)
19.4 Screen edge notifier icons (Done: edge notifier count query via rogue_loot_vfx_edge_notifiers using distance > view radius heuristic)
19.5 Subtle pulse animation near despawn time (Done: within final 5s before despawn sets pulse_active and increasing pulse_alpha 0..1)

20. Quality Assurance & Testing Expansion (Done)
20.1 Fuzz tests for loot table parsing (Done: randomized malformed line generator ensures no crash, respects caps, validates entry limits)
20.2 Statistical test harness (Done: high-iteration roll sampling computing empirical rarity frequencies)
20.3 Regression suite for rarity probability (Done: tolerance guard against skew >15% from uniform baseline for band 0-2 long_sword in ORC_BASE)
20.4 Save/load round-trip with affixes (Done: `test_loot_phase20_4_persistence_roundtrip` generates 90 affix-bearing items, saves, reloads, and asserts 100% record fidelity incl. enchant & durability fields)
20.5 Stress test: max ground items + merges (Done: `test_loot_phase20_5_merge_stress` spawns near-capacity clustered items, validates deterministic stack merge count reduction & no overflows)

21. Tooling & Content Pipeline (Pending)
21.1 Done External spreadsheet -> game CSV converter: added rogue_item_defs_convert_tsv_to_csv + unit test (TSV -> CSV lines, skip comments/blank)
21.2 Validation tool: highlight malformed lines (Done: `rogue_item_defs_validate_file` API + unit test `test_loot_tooling_phase21_2_validation` collecting malformed line numbers without mutating registries)
21.3 Done Editor preview of affix ranges: added rogue_affixes_export_json + unit test (JSON contains ids/min/max)
21.4 Done Batch rarity rebalance helper: rogue_rarity_rebalance_scales + JSON export + unit test (scale math & JSON contents)
21.5 Done Auto-sorting asset references: rogue_item_defs_sort_cfg + unit test (sorted order, header preserved)

22. Security / Cheat Resistance (Optional) (Done)
22.1 Hash-based verification of loot rolls (Done)
22.2 Obfuscate seed mixing to deter prediction (Done)
22.3 Anti-tamper detection of modified configs (Done)
22.4 Server authoritative mode (Done)
22.5 Log anomaly detector (weight spikes) (Done)

23. Documentation & Developer Experience (Pending)
23.1 Developer README: loot architecture (X)
23.2 Rarity & affix style guide (X)
23.3 Contribution checklist for new items (Done)
23.4 Example config pack (Done)
23.5 API doc generation for loot modules (Done)

24. Cleanup / Refactors (Rolling) (Pending)
24.1 Centralized path resolution helper (replaces ../ ../../) (Done)
24.2 Remove legacy debug code / flags (X)
24.3 Consolidate rarity color mapping into utility (Done)
24.4 Split oversized source modules (X)
24.5 Improve const-correctness & bounds asserts (X)

PRIORITY NEXT STEPS (Focused Subset)
/* 10.3 completed */
- 11.1 Salvage system core (materials extraction)
- 12.1 Loot filter rule config + predicate tests
- 14.1 Equipment slot data model & basic equip flow
- 20.1 Fuzz tests for loot table parsing (robustness)

NOTES
- Recent test path failures highlight need for path abstraction (24.1)
- Added doc path finder helper (rogue_find_doc_path) extending 24.1 abstraction for documentation assets.
- Rarity distribution tests (5.3) will protect against future balancing regressions.
- Affix framework (7.x) is largest structural extension; design carefully before coding.
- Logging volume must be tunable before large-scale statistical tests (6.2 precedes 5.3).

