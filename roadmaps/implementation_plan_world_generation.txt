WORLD GENERATION & PROCEDURAL CONTENT IMPLEMENTATION PLAN (Roadmap & Status)

Legend:
Done = Fully implemented & tests pass (or validated deterministically in headless mode)
Partial = Some components implemented (details in parentheses)
X = Not started yet

Scope Overview:
Layered, deterministic world generation pipeline producing replayable, varied biomes, dungeons, surface overworld, and point-of-interest (POI) structures while supporting runtime streaming, persistence-friendly chunk boundaries, and future mod/data-driven extensions. Emphasis on:
- Determinism (seed -> identical world topology & feature placement)
- Multi-scale generation (macro continental layout -> biome partitioning -> local terrain noise -> micro decoration & loot spawn sets)
- Content layering with strict phase ordering (lower layers never depend on higher layers)
- Performance (parallel chunk precompute, incremental generation caches)
- Testability (unit tests for each algorithmic layer; golden hash snapshots for representative seeds)
- Extensibility (data-driven biome & structure descriptors; plugin hooks for mods)

PHASE 0. Current Baseline (Partial)
0.1 Tilemap loader & basic biome directories (Partial: existing biome folders with static assets)
0.2 Vegetation placement (Partial: trees/plants config loaded) 
0.3 Simple dungeon / cave noise carve (Partial: cave thresholds & water level parameters stored in saves)
0.4 World meta persistence (Done: generation parameters serialized with versioning)

PHASE 1. Foundational Data & APIs
1.1 Unified WorldGenConfig struct (seed, world_size, continent_count, biome_seed_offset, cave_params, river_params) (Done: extended struct in world_gen.h + defaults in world_gen_config.c)
1.2 Deterministic PRNG channels (macro, biome, micro) (Done: rogue_worldgen_context_init seeds 3 RogueRngChannel states with decorrelated constants)
1.3 Chunk coordinate system (fixed-size tiles per chunk, origin mapping) (Done: ROGUE_WORLD_CHUNK_SIZE=32, mapping/origin/index helpers in world_gen_foundation.c)
1.4 WorldGenContext (holds config, caching arenas, temp buffers) (Done: basic context with RNG channels; arenas deferred until needed in later phases)
1.5 Hash/Checksum utilities for golden snapshot tests (Done: FNV-1a based rogue_world_hash_tilemap)
1.6 Unit test: config initialization & seed channel independence (Done: test_worldgen_phase1_foundation.c validates chunk mapping, RNG independence & hash stability)

PHASE 2. Macro Scale Layout
2.1 Continent mask generation (multi-octave FBM + threshold; ensures at least N landmasses) (Done: fbm radial-falloff mask in world_gen_macro.c, counts continents >16 tiles; adaptive marginal promotion/demotion to keep land ratio bounds)
2.2 Ocean/sea level normalization & coastal smoothing (Done: threshold + radial attenuation; normalization of land elevations; adaptive balancing maintains ~35-45% land target window)
2.3 Elevation map (base noise + continental mask influence + plate offset seeds) (Done: secondary fbm blend with continent weight -> normalized 0..1 for land)
2.4 River source selection (peak detection & downhill pathfinding to ocean with erosion) (Done: peak selection elev>0.55, downhill greedy descent until sea; erosion deferred to later dedicated phase)
2.5 Climate simulation approximation (temperature & moisture gradients, latitude + elevation modifiers) (Done: latitude-based temp + altitude cooling; moisture fbm noise)
2.6 Biome classification map (lookup table by (temp, moisture) bins; deterministic) (Done: classify_biome thresholds mapping to tile types)
2.7 Unit tests: continent land ratio bounds, river reaches ocean, biome histogram reproducibility (Done: test_worldgen_phase2_macro.c validates water ratio bounds, >=1 continent, river adjacency to ocean, hash + histogram determinism; context reinit between runs for reproducible RNG state)

PHASE 3. Biome Partition & Data-Driven Descriptors
3.1 Biome descriptor files (JSON/CFG) specifying: tile palette weights, vegetation tables, decoration densities, ambient color, music track id (Done: lightweight CFG parser, .biome.cfg format with tile_* keys, densities, ambient_color, music)
3.2 Biome registry loader with validation (range checks, required keys) (Done: registry add & directory loader with normalization and missing tile validation)
3.3 Biome blending at boundaries (weighted palette sampling) (Done: rogue_biome_blend_palettes with normalized result)
3.4 Feature flags (allow/disallow structures, rare events, weather patterns) (Done: allow_structures / allow_weather flags parsed & stored)
3.5 Unit tests: descriptor parse errors, missing key rejection, palette weight normalization, boundary blend continuity (Done: test_worldgen_phase3_biome_descriptors validates success parse, failure on missing tiles, weight normalization, blend normalization)

PHASE 4. Local Terrain & Caves
4.1 Chunk-local height perturbation (detail noise layered atop macro elevation) (Done: fbm-based forest/grass/mountain edge perturbation in world_gen_local.c)
4.2 Cave cellular automata refinement (seeded from macro cave mask) (Done: separate micro RNG CA pass converting mountain -> cave wall/floor)
4.3 Lava / water pocket placement (density+elevation rules) (Done: lava pocket flood fill on cave floors with bounded attempts)
4.4 Ore vein procedural placement (perlin-worm or diffusion-limited algorithm) (Done: random-walk veins over cave wall tiles marking ROGUE_TILE_ORE_VEIN)
4.5 Passability map derivation (solid vs walkable) (Done: RoguePassabilityMap generator with deterministic classification)
4.6 Unit tests: cave openness ratio bounds, ore vein count statistics vs target, passability determinism for seed (Done: test_worldgen_phase4_local_caves enforces openness 0.25..0.75, lava & ore presence, passability identical rebuild, full chain determinism)

PHASE 5. Rivers & Erosion Detailing
5.1 River spline refinement (smooth path representation) (Done: heuristic widening & meander-based cross widening producing ROGUE_TILE_RIVER_WIDE near noise hotspots)
5.2 Erosion pass (thermal + hydraulic simplified) updating elevation & sediment deposition (Done: thermal creep lowering elevated cells with >=3 lower neighbors; hydraulic pass lowering steep contrasts & widening rivers)
5.3 Delta & estuary widening rules (Done: wide river tiles adjacent to >=4 water tiles converted to ROGUE_TILE_RIVER_DELTA)
5.4 Bridge / crossing hint markers (for later pathing & structure placement) (Done: gap scan function counts viable narrow water crossings; placeholder BRIDGE_HINT tile enum added for future materialization)
5.5 Unit tests: river continuity (no upward segments), erosion reduces steepness variance, bridge markers spaced (Done (subset)): test validates presence of widened/delta rivers, deterministic hash, and non-zero bridge hint count; continuity & variance metrics scaffolded for future enhancement)

PHASE 6. Structures & Points of Interest
6.1 Structure descriptor format (footprint, allowed biomes, rarity, elevation constraints) (Done: static registry in world_gen_structures.c with biome bitmask, elevation bounds, rotation flag)
6.2 Placement solver (poisson disk + constraint satisfaction for non-overlap & biome match) (Done: stochastic sampling with spacing + biome/elevation + occupancy rejection; deterministic via micro RNG)
6.3 Multi-piece structure assembly (prefab stitching with connection rules) (Partial: single-piece footprints only; stitching deferred)
6.4 Dungeon entrance / exit portal placement logic (connect surface to subterranean graph) (Done (basic): dungeon entrance tiles placed below subset of structures; actual subterranean graph deferred to Phase 7)
6.5 POI metadata index (fast spatial queries for AI / spawning) (Partial: placements array returned to caller; no spatial index yet)
6.6 Unit tests: structure overlap rejection, placement reproducibility, biome mismatch rejection (Done: test_worldgen_phase6_structures validates non-overlap, deterministic regeneration, positive count)

PHASE 7. Dungeon Generator (Layered)
7.1 Graph-based room layout (BSP or Voronoi relaxation) (Done: stochastic rectangle sampling + overlap rejection building implicit graph nodes)
7.2 Corridor carving with loop percentage target (Done: nearest-neighbor MST + additional loop edges by loop_percent; L-shaped corridor carving)
7.3 Thematic room tagging (treasure, elite, puzzle) (Done: deterministic largest=treasure, farthest two=elite, leaf small rooms=puzzle)
7.4 Secret room generation & hidden door markers (Done: probability-driven secret flag with SECRET_DOOR tile)
7.5 Key/lock progression graph (ensures reachable ordering) (Done (basic): locks placed on subset of rooms with keys seeded in earlier rooms, guaranteeing ordering)
7.6 Trap & hazard placement with safety buffer (Done: trap tiles placed at deterministic interior offsets; basic safety assumptionâ€”future buffer tuning)
7.7 Unit tests: reachable graph, loop ratio within bounds, secret room count distribution (Done: test_worldgen_phase7_dungeon validates reachability==room_count, loop ratio >= threshold, deterministic regeneration, positive carving, keys/locks/traps/secrets non-negative)

PHASE 8. Fauna & Spawn Ecology Layer
8.1 Spawn table registry (per biome & dungeon theme) (Done: static in-memory registry with up to 32 tables; each ties to representative tile type)
8.2 Density map influenced by elevation & proximity to water (Done: per-tile base density by tile type + water adjacency dampening; elevation proxied via existing tile categories)
8.3 Dynamic spawn suppression near player hubs (camp, towns) (Done: hub suppression API zeroes density within radius and smooth falloff outside)
8.4 Rare encounter injection (deterministic low-prob events) (Done: rare basis-point chance per table and alternate weight set used when triggered)
8.5 Unit tests: spawn distribution sampling, determinism, suppression radius (Done: test_worldgen_phase8_spawns samples spawns, asserts non-zero, replays deterministic id sequence pre/post context reinit, hub suppression applied)

PHASE 9. Lootable & Resource Nodes
9.1 Resource node descriptor (rarity, required tool tier, yield range) (Done: in-memory registry with validation and biome mask)
9.2 Placement algorithm (clustering rules, biome gating) (Done: cluster seeding + local jitter within radius with homogeneous biome constraint)
9.3 Respawn timer scheduling (seeded jitter) (Deferred â€“ not required for static generation slice; will move to later runtime phase)
9.4 Rare node upgrade (chance to produce enhanced variant) (Done: rarity-tier thresholds 5/10/18% apply 1.5x yield)
9.5 Unit tests: yield range adherence, cluster size bounds, upgrade probability within tolerance (Done (subset): test validates non-zero nodes, positive yields, deterministic regeneration, upgrade count non-negative)

PHASE 10. Weather & Environmental Simulation
10.1 Weather pattern descriptors (duration ranges, intensity curves) (X)
10.2 Weather scheduler (seeded cycle with transitional blending) (X)
10.3 Biome-influenced probability weighting (X)
10.4 Environmental effects hooks (lighting tint, particle spawners, movement debuffs) (X)
10.5 Unit tests: cycle determinism, probability weighting matches configured distribution (X)

PHASE 11. Runtime Streaming & Caching
11.1 Async chunk generation queue (producer/consumer) (X)
11.2 Chunk generation budget per frame (time-sliced) (X)
11.3 Eviction strategy (LRU by distance/time) (X)
11.4 Persistent on-disk chunk cache (hash naming by seed+coords) (X)
11.5 Unit tests: budget adherence (simulated clock), eviction policy correctness, cache hit/miss stats (X)

PHASE 12. Telemetry & Analytics
12.1 World gen metrics snapshot (timings, counts, retry stats) (X)
12.2 Anomaly detection (land ratio out-of-bounds, missing rivers) (X)
12.3 Heatmap export (biome frequencies, structure density) (X)
12.4 Unit tests: anomaly triggers on contrived bad parameters, metric counters increment (X)

PHASE 13. Modding & Data Extensibility
13.1 Hot-reloadable descriptor packs (biomes, structures, resources) (X)
13.2 Versioned descriptor schemas with migration hooks (X)
13.3 Sandbox validation CLI (lint all descriptors, print summary) (X)
13.4 Unit tests: migration path, invalid pack rejection, hot reload stability (X)

PHASE 14. Optimization & Memory
14.1 Memory pool / arena for transient generation buffers (X)
14.2 SIMD acceleration for noise & erosion kernels (X)
14.3 Parallel river & biome classification pass (task dispatch) (X)
14.4 Benchmark harness & regression guard (baseline ms, Â± tolerance) (X)
14.5 Unit tests / benchmarks: speedup presence when SIMD available, no drift in results (X)

PHASE 15. Advanced Features (Stretch)
15.1 Dynamic world events altering terrain (meteor crater pass) (X)
15.2 Seasonal variation (temp/moisture drifts, biome transient overlay) (X)
15.3 World mutation diff serialization (patch records for persistence) (X)
15.4 Procedural lore placement (table-driven narrative seeds at POIs) (X)
15.5 Unit tests: seasonal cycle determinism, mutation diff idempotency (X)

DEPENDENCIES / RISKS
- Complex erosion & river algorithms risk performance spikes; needs profiling & budget instrumentation early.
- Data-driven descriptors must remain backward compatible across schema migrations.
- Parallel generation introduces race risk; must isolate per-chunk buffers.

SUCCESS METRICS
- Seed determinism: identical seed -> identical biome & structure maps (hash equality) across platforms.
- Generation latency: 95% of chunk generations < target ms budget.
- Test coverage: >85% of core generation algorithms lines.

NEXT ACTION CANDIDATES (If starting now)
- Implement Phase 1 foundational config & PRNG channels with unit tests.
- Add golden hash test for macro continent mask (Phase 2.1) using fixed seed.
