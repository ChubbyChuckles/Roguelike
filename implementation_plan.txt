LOOT SYSTEM IMPLEMENTATION PLAN (Roadmap & Status)

Legend:
Done = Fully implemented & tests pass
In Implementation = Actively being developed / partial code may exist
X = Not started yet

1. Core Data Foundations (Done)
1.1 Item definition registry & parsing from CSV-like config (Done)
1.2 Loot table parsing with weighted entries (Done)
1.3 Deterministic loot roll function (seeded) (Done)
1.4 Inventory data structures (counts per item id) (Done)
1.5 Save/load persistence for inventory & item definitions (Done)
1.6 Extended loot table syntax with quantity ranges (Done)
1.7 Extended loot roll (multi-drop batching) (Done)
1.8 Rarity field in item defs (optional 15th column) (Done)
1.9 Loot table rarity min/max range overrides (Done)
1.10 Logging: parsing + loot_roll events (Done)
1.11 Multi-file item category config loading (Done)

2. Ground Item Runtime Lifecycle (Done)
2.1 Item instance pool data structure (Done)
2.2 Enemy death spawn hook integrating loot roll (Done)
2.3 Spawn jitter / positional scatter (Done)
2.4 Detailed coordinate comparison debug logs (Done)
2.5 Auto-pickup & inventory increment (Done)
2.6 Stack merge on spawn adjacency (Done)
2.7 Runtime update: despawn timers (Done)
2.8 Unit tests: spawn, pickup, persistence, merge+despawn (Done)

3. Visual Representation & Feedback (Done)
3.1 Colored rendering by rarity tiers (Done)
3.2 Distinct rarity enum definition & mapping (Done)
3.3 Basic logging for rarity selection in drops (Done)
3.4 Preliminary debug suppression for noisy spawns (Done)
3.5 Jitter randomness validation logs (Done)

4. Persistence & Serialization (Done)
4.1 Inventory persistence file format (Done)
4.2 Restore inventory on boot test (Done)
4.3 Item definition reload resilience (Done)
4.4 Backward-compatible rarity addition (Done)
4.5 Deterministic RNG reseeding across sessions (Done)

5. Rarity System Enhancements (Done)
5.1 Tier-to-color mapping abstraction header (Done)
5.2 Table-level rarity band selection (Done)
5.3 Validation tests for rarity distribution (Done)
5.4 Dynamic rarity weighting adjustments (Done)
5.5 Configurable per-rarity drop sound / VFX hooks (Done)
5.6 Per-rarity despawn modifiers (Done)
5.7 Minimum floor rarity after player progression thresholds (Done)
5.8 Weighted pity-counter for high rarity (Done)

6. Debugging & Instrumentation Controls (Done)
6.1 Granular logging categories (loot_roll, spawn, merge) (Done)
6.2 Runtime flag / env var to toggle loot verbosity (Done)
6.3 Rolling window statistics (drops per rarity) (Done)
6.4 On-demand console command: print loot histogram (Done)
6.5 Telemetry snapshot export (Done)

7. Affix & Modifier Framework (Done)
7.1 Data schema for prefix/suffix pools (Done)
7.2 Affix parsing from config files (Done)
7.3 Affix rarity weighting integration (Done)
7.4 Procedural stat roll (ranges per affix) (Done)
7.5 Item instantiation with affix attachment list (Done)
7.6 Derived stat aggregation (weapon DPS, armor rating) (Done)
7.7 Persistence format for rolled affixes (Done)
7.8 Unit tests: affix parsing, roll determinism, item attachment, persistence (Done)

8. Advanced Item Generation Pipeline (Done)
8.1 Generation request API (context: enemy level, biome) (Done)
8.2 Rule graph: gating affixes by item category (Done)
8.3 Multi-pass rarity -> base item -> affix selection order (Done)
8.4 Quality scalar affecting stat roll ceilings (Done)
8.5 Seed mixing: player luck + enemy archetype (Done)
8.6 Duplicate affix avoidance logic (Done)
8.7 Unit tests: reproducibility & boundary stats (Done)

9. Dynamic Drop Balancing (Pending)
9.1 Global drop rate config layer (Done)
9.2 Adaptive weighting (increase weight of under-dropped categories) (Done)
9.3 Player preference learning (optional heuristic) (Done)
9.4 Pity system for legendary/epic (ties to 5.8) (Done)
9.5 Session metrics: items/hour, rarity/hour (Done)
9.6 Tuning console commands (set weight, reset counters) (Done)

10. Economy & Vendors (Partial)
10.1 Shop inventory generation using loot pipeline (Done)
10.2 Buy/sell price formulas (rarity, affixes, demand) (Done) /* Current: rarity*base_value ladder; future: affix & demand scaling */
10.3 Vendor restock timer & rotation (Done)
10.4 Currency sinks (repair, reroll affix fees) (Partial: cost formulas + repair UI hotkey + repair API/tests; reroll UI pending)
10.5 Price scaling with player reputation (Done)
10.6 Unit tests: sell value bounds (Done)

11. Crafting & Materials (Pending)
11.1 Salvage system: break items -> materials (Done)
11.2 Material rarity tiers (X)
11.3 Crafting recipes config parsing (X)
11.4 Upgrade paths (evolve item rarity/stat) (X)
11.5 Reroll affix using currency + mats (X)
11.6 Unit tests: salvage yields & recipe validity (Partial: basic salvage yield test)

12. Loot Filtering & UI Overlay (Pending)
12.1 Filter rules config (rarity, category, name pattern) (X)
12.2 Runtime toggle: hide filtered ground items (X)
12.3 Color-coded outlines + glow (X)
12.4 Mini-map loot pings by rarity (X)
12.5 On-hover tooltip (base stats + affixes) (X)
12.6 Comparison tooltip vs equipped (X)
12.7 Unit tests: filter predicate evaluation (X)

13. Inventory UI & Management (Pending)
13.1 Grid or list representation with stack counts (X)
13.2 Sorting & filtering UI controls (X)
13.3 Drag-and-drop equip / move / split stack (X)
13.4 Quick salvage / drop context actions (X)
13.5 Persistence of UI state (sort mode) (X)

14. Equipment & Stat Integration (Pending)
14.1 Equip slots & constraints (Partial: weapon/armor slots + basic API; initial UI panel and vendor integration added)
14.2 Recalculation pipeline: base + affix + temporary buffs (Partial: simple agility -> dexterity aggregation applied each frame)
14.3 Derived stat caching & invalidation (Done: stat_cache module + dirty marks on equip/unequip & bonus application)
14.4 DPS & EHP (effective HP) estimator (Done: heuristic in stat_cache.c displayed in equipment panel)
14.5 Unit tests: equip / unequip stat deltas (Done: equip bonus, unequip regression test)

15. Extended Persistence & Versioning (Pending)
15.1 Save schema version tag (X)
15.2 Migration handlers for added affix fields (X)
15.3 CRC / hash for integrity check (X)
15.4 Partial save (inventory only) API (X)
15.5 Backup rotation (X)

16. Multiplayer / Personal Loot (Future) (Pending)
16.1 Player-specific instanced drops (X)
16.2 Shared vs personal loot mode flag (X)
16.3 Need/greed roll prototype (X)
16.4 Trade window & validation (X)
16.5 Anti-duplication safeguards (X)

17. Performance & Memory Optimizations (Pending)
17.1 Object pooling for affix roll scratch buffers (X)
17.2 SIMD batch evaluation for weight normalization (X)
17.3 Profiling harness (hot loops in roll) (X)
17.4 Cache-friendly item def indexing (X)
17.5 Incremental serialization (dirty set only) (X)

18. Analytics & Telemetry (Optional) (Pending)
18.1 Drop event ring buffer (X)
18.2 Export JSON stats snapshot (X)
18.3 Rarity distribution drift alerts (X)
18.4 Session summary overlay (X)
18.5 Heatmap of drop positions (X)

19. Audio/Visual Polish (Pending)
19.1 Per-rarity pickup sounds (X)
19.2 Ground sparkle particle system (by rarity) (X)
19.3 Beam / pillar effect for high rarity (X)
19.4 Screen edge notifier icons (X)
19.5 Subtle pulse animation near despawn time (X)

20. Quality Assurance & Testing Expansion (Pending)
20.1 Fuzz tests for loot table parsing (X)
20.2 Statistical test harness (thousands of rolls) (X)
20.3 Regression suite for rarity probability (X)
20.4 Save/load round-trip with affixes (X)
20.5 Stress test: max ground items + merges (X)

21. Tooling & Content Pipeline (Pending)
21.1 External spreadsheet -> game CSV converter (X)
21.2 Validation tool: highlight malformed lines (X)
21.3 Editor preview of affix ranges (X)
21.4 Batch rarity rebalance script (X)
21.5 Auto-sorting asset references (X)

22. Security / Cheat Resistance (Optional) (Pending)
22.1 Hash-based verification of loot rolls (X)
22.2 Obfuscate seed mixing to deter prediction (X)
22.3 Anti-tamper detection of modified configs (X)
22.4 Server authoritative mode (future netcode) (X)
22.5 Log anomaly detector (weight spikes) (X)

23. Documentation & Developer Experience (Pending)
23.1 Developer README: loot architecture (X)
23.2 Rarity & affix style guide (X)
23.3 Contribution checklist for new items (X)
23.4 Example config pack (X)
23.5 API doc generation for loot modules (X)

24. Cleanup / Refactors (Rolling) (Pending)
24.1 Centralized path resolution helper (replaces ../ ../../) (Done)
24.2 Remove legacy debug code / flags (X)
24.3 Consolidate rarity color mapping into utility (Done)
24.4 Split oversized source modules (X)
24.5 Improve const-correctness & bounds asserts (X)

PRIORITY NEXT STEPS (Focused Subset)
/* 10.3 completed */
- 11.1 Salvage system core (materials extraction)
- 12.1 Loot filter rule config + predicate tests
- 14.1 Equipment slot data model & basic equip flow
- 20.1 Fuzz tests for loot table parsing (robustness)

NOTES
- Recent test path failures highlight need for path abstraction (24.1)
- Rarity distribution tests (5.3) will protect against future balancing regressions.
- Affix framework (7.x) is largest structural extension; design carefully before coding.
- Logging volume must be tunable before large-scale statistical tests (6.2 precedes 5.3).

