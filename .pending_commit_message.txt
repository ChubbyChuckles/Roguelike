feat(integration Phase 3.9): implement UI ↔ systems bridge with real-time HUD bindings, inventory/combat/skill/vendor/crafting/world map event capture

Details:
 - Added ui_integration_bridge (header+impl) with ring buffers (combat, inventory, skills, vendor, crafting, world map) and binding array (health, mana, xp, level, stats, inventory count, gold, materials, skill points, discovered areas, quests)
 - Subscribed to core event categories: movement, item pickup, damage, level up, xp gained, skill unlocked, currency changed, trade completed, area entered, resource spawned, config reload
 - Added new test test_phase3_9_ui_integration_bridge (14 assertions) covering initialization, event flow (damage/xp/currency/area/resource), binding dirtiness, ring buffer capture, forced binding updates
 - Updated roadmap Phase 3.9 entries to (Done)
 - Extended CMake to compile bridge and register test
 - Enhanced bridge metrics tracking additional events and binding updates

Next: begin Phase 3.10 persistence integration after validating broader integration tests.

feat(integration Phase 3.10): add persistence integration bridge (event-driven dirty tracking + incremental save metrics)

Details:
 - Added persistence_integration_bridge (header+impl) subscribing to item pickup, xp gained, level up, skill unlock, trade completed, currency changed, area entered, config reloaded
 - Event handlers map to save components (player/world/meta/inventory/entries/skills) and mark them dirty via save manager API
 - Added save wrappers (slot, autosave, quicksave) harvesting incremental reuse/write metrics and publishing SAVE_COMPLETED event
 - Added save manager APIs: rogue_save_component_is_dirty & rogue_save_last_section_reuse (tracks sections reused/written)
 - New test test_phase3_10_persistence_integration_bridge validates reuse vs write after events and section enumeration
 - Roadmap Phase 3.10 entries marked Done; README changelog updated


feat(integration): Complete Phase 0+1+2.1 Integration Architecture & Configuration

Phase 0: Integration Architecture Foundation - Complete ✅
Phase 1: Event Bus & Message Passing System - Complete ✅  
Phase 2.1: JSON Schema Validation System - Complete ✅

## Phase 2.1: JSON Schema Validation System

**Core Implementation:**
- Comprehensive RogueJsonSchema validation framework with registry management
- RogueSchemaField validation with type checking, constraints, and error reporting  
- Support for string length, integer range, enum, array constraints
- Schema inheritance, composition, and versioning infrastructure (stubs)
- Strict mode validation for unknown field detection
- Builder helper functions for schema construction
- Thread-safe schema registry with registration, lookup, and lifecycle management

**JSON Parser Integration:**
- Lightweight JSON parser with RogueJsonValue structures
- Support for all JSON types: null, boolean, integer, number, string, array, object
- Memory management with proper cleanup and Windows compatibility
- Type-safe JSON manipulation API

**Testing & Quality:**
- Comprehensive unit test suite with 10 test cases covering:
  - Registry initialization and schema registration
  - Field validation: required fields, type checking, string/integer constraints  
  - Strict mode validation and error reporting
  - Schema builder functions and helper utilities
  - Multi-error comprehensive validation scenarios
- All tests pass with proper logging and error reporting
- Windows MSVC compatibility with proper warning suppressions

**Files Added:**
- `src/core/json_schema.h` - Complete JSON schema validation API (380+ lines)
- `src/core/json_schema.c` - Core implementation with registry & validation (680+ lines)
- `src/core/json_parser.h/c` - Lightweight JSON parsing support (220+ lines)
- `tests/unit/test_json_schema.c` - Comprehensive test suite (450+ lines)

### Phase 0: System Taxonomy & Integration Manager
- Complete enumeration and classification of 15 known game systems
- Type-based classification: Core (3), Content (8), UI (1), Infrastructure (3)  
- Priority-based organization: Critical (6), Important (6), Optional (3)
- RogueIntegrationManager supporting up to 32 systems with lifecycle management
- Dependency graph construction with DAG validation & topological ordering
- Health monitoring with exponential backoff restart mechanisms
- Performance tracking and capability-based system management

### Phase 1: Event Bus & Message Passing System (NEW)
- RogueEventBus with thread-safe operations & Windows/Linux compatibility
- Event type registry with 27 predefined types covering:
  * Entity events: CREATED, DESTROYED, MODIFIED, SPAWNED
  * Player events: MOVED, ATTACKED, EQUIPPED, SKILLED, DIED, RESPAWNED, LEVELED_UP  
  * Combat events: DAMAGE_DEALT, DAMAGE_TAKEN, CRITICAL_HIT, STATUS_APPLIED
  * Progression events: XP_GAINED, SKILL_UNLOCKED, MASTERY_INCREASED
  * Economy events: ITEM_DROPPED, PICKED_UP, TRADE_COMPLETED, CURRENCY_CHANGED
  * World events: AREA_ENTERED, EXITED, RESOURCE_SPAWNED, STRUCTURE_GENERATED
  * System events: CONFIG_RELOADED, SAVE_COMPLETED, ERROR_OCCURRED, PERFORMANCE_ALERT
- Multi-level priority queue (Critical, High, Normal, Low, Background)
- Deterministic ordering with timestamp + sequence number for replay consistency
- Flexible subscription API with conditional predicates & rate limiting
- Synchronous & asynchronous processing with time budget management
- Event replay system with configurable history depth & debugging tools
- Comprehensive performance monitoring & optimization

## Test Coverage - 45/45 Tests Pass ✅
- Phase 0: 19 tests (9 Integration Manager + 10 System Taxonomy)
- Phase 1: 16 comprehensive event bus tests covering:
  * Event bus initialization, configuration, type registry
  * Event publishing (single/batch), subscription management
  * Priority processing, filtering, statistics, overload detection
  * Event replay recording & utility functions
- Phase 2.1: 10 JSON schema validation tests covering:
  * Registry management and schema registration
  * Field validation: required fields, type checking, constraints
  * Strict mode validation and comprehensive error reporting

## Files Added/Modified
**Phase 0+1:**
- src/core/integration_manager.h/.c - Integration manager (211+638 lines)
- src/core/system_taxonomy.h/.c - System taxonomy (95+623 lines)  
- src/core/event_bus.h/.c - Complete event bus (380+1060 lines) 
- tests/unit/test_integration_manager.c - 9 integration tests
- tests/unit/test_system_taxonomy.c - 10 taxonomy tests
- tests/unit/test_event_bus.c - 16 event bus tests

**Phase 2.1:**  
- src/core/json_schema.h/.c - JSON schema system (380+680 lines)
- src/core/json_parser.h/.c - Lightweight JSON parser (100+120 lines)
- tests/unit/test_json_schema.c - 10 comprehensive validation tests
- CMakeLists.txt & tests/CMakeLists.txt - Build integration
- Updated CMakeLists.txt with all integration plumbing components
- Updated roadmap: Phase 0.1-0.7 & Phase 1.1-1.7 marked Done

## Architecture Benefits
- Establishes foundational event-driven communication layer
- Enables seamless cross-system integration & loose coupling
- Provides comprehensive debugging & monitoring capabilities  
- Thread-safe operations with performance optimization
- Deterministic replay for testing & debugging
- Extensible design for future system additions

Integration Status:
- Phase 0 (Integration Architecture Foundation): Complete ✅
- Phase 1 (Event Bus & Message Passing): Complete ✅  
- Phase 2 (JSON Configuration): Ready for implementation

This completes the core integration plumbing infrastructure, enabling robust
cross-system communication throughout the roguelike engine.
