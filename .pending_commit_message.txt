Progression Phase 7 (Scaffold) – Added ring expansion milestones & keystone heuristic
Progression Phase 7 (Dynamic Expansion Completion)

Enhancements:
- Implemented full dynamic maze ring expansion API `rogue_progression_maze_expand` (procedural outer ring generation, node placement on radial bands, linkage to prior outer ring, full adjacency rebuild & meta refresh). Added helper `rogue_progression_maze_total_rings`.
- Integrated milestone logic + expansion in new unit test `test_progression_phase7_rings` (synthetic minimal maze -> validates milestone ring unlocks, keystone flag invariants, expansion adds >0 rings, ring count increases correctly, no optional/keystone overlap, keystone helper queries correct).
- Upgraded roadmap Phase 7: 7.1 & 7.2 marked Done (scaffold for keystone effects), 7.3 Partial (structural anti-stack guard), 7.5 Done initial; 7.4 pending (visualization layer).
- Cleaned test debug instrumentation; final test emits single success line.

Rationale:
- Provides concrete data structure growth path ahead of visualization & persistence integration.
- Establishes deterministic seed input for future replay & telemetry (seed parameter retained in API).

Follow-ups:
- Persist expanded rings & keystone selection in save snapshot.
- Data-driven keystone definitions + cost/prereq balancing coefficients.
- Integrate anti-stack synergy coefficients in stat aggregation (Phase 9/11) + UI ring layering (7.4).

Summary:
- Implemented Phase 7 groundwork: added ring expansion milestone function `rogue_progression_ring_expansions_unlocked` (+1 ring at level 50 then every 25 levels, capped at +4) to prepare for dynamic outer layer unlocks.
- Extended `progression_maze` meta flags (added bit2 keystone) and introduced constants (`ROGUE_MAZE_FLAG_*`).
- Keystone heuristic: high-degree (>=5) nodes in outer 30% of rings auto-flagged as provisional keystones; optional leaf nodes explicitly excluded.
- Added query helpers: `rogue_progression_maze_is_keystone`, `rogue_progression_maze_keystone_total`.
- Added scaffold test `test_progression_phase7_rings` verifying milestone ring unlock logic, keystone count non-negativity, and optional-keystone mutual exclusion.
- Updated roadmap Phase 7 items 7.1–7.3 & 7.5 to Partial with notes; visualization (7.4) remains unstarted.

Next Steps (future phases):
- Data-driven keystone definition & cost/prerequisite validation.
- Dynamic maze expansion structure allocation & persistence serialization.
- Anti-stack synergy coefficient integration into stat aggregation & passive application layers.
- UI layering & zoom integration (Phase 7.4) once dynamic expansion implemented.

Progression Phase 7 (Anti-Stack & Visualization Completion)

Enhancements:
- Implemented Phase 7.3 anti-stack diminishing returns: keystone unlock now applies per-category coefficient 1/(1+0.15*(k-1)) with heuristic classification (STR/DEX/CRIT -> offense, RES/ARMOR -> defense, else utility). Added category count accessors and widened passive stat accumulator to double to preserve fractional contributions pre-rounding.
- Added unit test `test_progression_phase7_antistack` validating diminished second offense STR increment, defense independence, and keystone count APIs.
- Implemented Phase 7.4 visualization APIs: `rogue_progression_maze_layers` (ring radii), `rogue_progression_maze_project` (polar coords), and `rogue_progression_maze_ascii_overview` (lightweight concentric textual map) supporting dynamic expansions.
- Added unit test `test_progression_phase7_visualization` ensuring layer count matches total rings, radii monotonicity, successful projection, and non-empty ASCII plot.
- Updated roadmap: 7.3 & 7.4 marked Done; documentation (README) reflects anti-stack safeguards & visualization layer support.

Rationale:
- Diminishing returns mitigate runaway stacking of high-impact keystones while preserving first-pick value and categorical diversity.
- Visualization primitives unblock UI/UX Phase 16 integration without binding core logic to rendering libraries.

Follow-ups:
- Persist keystone category counts & expanded ring layout in snapshot serialization (Phase 12 alignment).
- Replace heuristic keystone classification with data-driven tags; expose JSON-driven overrides.
- Integrate coefficient application into future composite stat cache (Phases 9 & 11) for multiplicative vs additive ordering validation.

Summary:
- Phase 7 core now feature-complete (7.1–7.5 implemented/tested) pending future data-driven refinement & UI polish.
Progression Phase 8 (Perpetual Scaling Layer)

Implemented continuous micro-node progression system with sublinear aggregate scaling.

Details:
- Added module `progression_perpetual.[ch]` providing APIs: allowance (`rogue_perpetual_micro_nodes_allowed`), spend guard (`rogue_perpetual_spend_node`), raw power (diminishing per-node), level scalar (smooth asymptote), global coefficient tuning, inflation guard adjust, and effective power aggregation.
- Diminishing formula: per-node contribution BASE/(1+CURV*i) (BASE=0.015, CURV=0.07) ensuring decreasing marginal returns.
- Level scalar: (1-exp(-L/140))^0.80 producing soft early acceleration, tapering mid-late; combined with node diminishing keeps effective exponent <0.65 beyond level 200 (roadmap metric).
- Inflation guard: `rogue_perpetual_inflation_adjust(delta)` clamps resulting coefficient inside [0.85,1.15] for stable balance tuning loops.
- Unit test `test_progression_phase8_perpetual` validates: allowance pacing, spend cap enforcement, diminishing increments (first vs last), sublinear growth (power ratio level200/level100 < 2x).
- Roadmap Phase 8 items 8.1–8.5 marked Done; README updated with changelog entry.

Rationale:
- Provides endless but controlled progression track post primary maze & mastery layers, avoiding hard caps while guarding against runaway inflation.

Follow-ups:
- Integrate effective power into analytics power index (Phase 13) & difficulty scaler (Phase 14) inputs.
- Persist micro-node spend count (Phase 12) with versioned header.
- Telemetry feedback loop hooking TTK distributions to inflation adjust API.

Progression Phase 9 (Synergy & Caps)

Enhancements:
- Added `progression_synergy.[ch]` implementing unified layered damage aggregation helper (`rogue_progression_layered_damage`) applying canonical order Equipment -> Passives -> Mastery -> Micro (perpetual) over a base flat value.
- Implemented crit chance soft cap (60%) with diminishing smoothing (softness=0.55) and hard cap (95%) via `rogue_progression_final_crit_chance`.
- Implemented cooldown reduction soft cap (50%) with diminishing curve (softness=0.60) and hard cap (70%) via `rogue_progression_final_cdr`.
- Introduced tag mask derivation bridging weapon infusion (fire/frost/arcane) to skill tag bits (`rogue_progression_synergy_tag_mask`).
- Added conditional fire synergy helper (`rogue_progression_synergy_fire_bonus`) returning passive bonus only when FIRE tag present (scaffold for future multi-tag conditionals).
- New unit test `test_progression_phase9_synergy` validates: layered damage multiplicative math (~1.4786x expected), attribute aggregation sum, crit & CDR cap clamps (pre & post soft cap), tag mask mapping, and conditional fire bonus gating.
- Roadmap Phase 9 items 9.1–9.5 updated to Done with implementation notes. README changelog updated accordingly.

Rationale:
- Establishes explicit, audited ordering preventing ambiguous stacking exploits and provides early enforcement of key stat ceilings prior to buff/debuff layer integration (Phase 10).
- Tag bridge lays groundwork for data-driven synergy expansions (equipment affix & passive conditional interplay) without entangling core effect DSL yet.

Follow-ups:
- Extend tag mask to include future affix-origin tags & skill-learned tags beyond weapon infusion (data registry). 
- Integrate crit/CDr clamps into final combat stat snapshot hashing for anti-tamper verification (Phase 15).
- Expand synergy helpers for multi-element composites and additive vs multiplicative classification audit.

Progression Phase 10 (Buff/Debuff Integration)

Enhancements:
- Extended stat cache to incorporate buff layer (currently strength exemplar) after passives for proper ordering.
- Added stacking rule enum (unique, refresh, extend, add) with logic in `rogue_buffs_apply` including magnitude & duration semantics.
- Introduced per-buff snapshot flag (retains applied magnitude independent of subsequent base stat changes; groundwork for future dynamic vs snapshot distinction on other stats).
- Implemented anti-oscillation dampening via configurable minimum reapply interval (`rogue_buffs_set_dampening`). Early reapplications inside window rejected.
- Added helpers: `rogue_buffs_strength_bonus` and updated `stat_cache` to fetch buff layer; global interval default 50ms.
- New unit test `test_progression_phase10_buffs` validates stacking behaviors, additive strength aggregation into cache, and dampening gating.
- Roadmap Phase 10 entries 10.1–10.5 marked Done; README updated with changelog entry.

Rationale:
- Establishes systematic timed effect layer ahead of broader buff/debuff catalog; prevents visual/stat flicker and clarifies deterministic aggregation sequence.

Follow-ups:
- Extend buff system to support additional attribute/stat types and negative debuffs with separate accessor categories.
- Implement snapshot vs dynamic application in combat formulas (e.g., snapshotting at cast start vs real-time tick updates) once skill effect layer (Phase 10.2 extended) requires.
- Persistence & hashing of active buffs (Phase 12/15) for anti-tamper verification.
