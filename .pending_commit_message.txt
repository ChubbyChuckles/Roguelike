debug overlay: auto-wrap row height, click-to-focus for all widgets, Tab capture; add System panel

- Layout: track tallest widget per row (row_max_h) so columns auto-wrap advances by actual row height; apply in overlay_next_column/columns_end and single-column ui_next_line.
- Widgets: add click-to-focus for Button/Checkbox/SliderInt/SliderFloat; InputText keeps caret navigation. Tab/Shift+Tab now requests input capture to gate gameplay.
- Panels: implement and register baseline System panel (FPS, frame ms, draw calls, tile quads, overlay toggle). Registration invoked during app_init when overlay enabled.
- Tests: overlay unit tests (core/widgets/layout_focus) pass headlessly. Full build succeeded (Debug, SDL2).

Docs:
- Roadmap updated: 5.3 and 5.4 marked Done with details; 6.1 notes expanded; 5.5 left Partial pending caret edge tests.Debug Overlay: test run summary (Debug, SDL2, -j12)
- Ran: ctest -C Debug -j12 --output-on-failure
- Overlay-focused tests passed: test_overlay_core, test_overlay_widgets, test_overlay_flag
- Overall: 557 tests, 552 passed, 5 failed (AI/equipment subsystems: test_ai_phase4_nodes, test_ai_phase4_tactical, test_ai_phase11_blackboard_fuzz, test_equipment_phase15_replay_auditor, test_phase3_1_enemy_ai_bridge). These appear unrelated to overlay changes; no overlay code referenced in failures.
- Kept overlay stubs/headless guards ensuring no gameplay/input regressions; SDL2 rendering bypassed in headless tests.

feat(debug-overlay): add compile-time feature flag + core wiring and tests

- Introduce ROGUE_ENABLE_DEBUG_OVERLAY (ON by default); propagate via CMake
- Wrap overlay_core.c build and provide header no-op stubs when disabled
- Wire F1 toggle (input) and overlay frame/render after HUD
- Add unit tests: test_overlay_core, test_overlay_flag (flag behavior)
- Update roadmap (implementation_plan_debugging_overlay.txt): mark 1.1 Done, 1.2/1.5 Partial, 5.1 Done, 6.4 Partial
- README: add short Debug Overlay section with flag usage and current status

Build: Debug SDL2, -j12; Tests: 550/556 pass, 6 known unrelated failures (AI/equipment/start screen); overlay tests green
Phase 10.1: Externalized Skill Coefficients Loader + Test

- Implement skills_coeffs_load.{h,c}: parse JSON/CSV into RogueSkillCoeffParams and register via rogue_skill_coeff_register.
- Add query API rogue_skill_coeff_exists(int) and ensure skill_get_effective_coefficient multiplies mastery, specialization, and central coeff scalar.
- New unit test tests/unit/test_skills_phase10_coeffs_loader.c: initializes event bus and stat cache; registers sample skills; parses JSON; asserts coefficient ranges.
- CMake wired; README documents Data-Driven Skill Coefficients.

Skills Phase 7.6 + Phase 8.1–8.4: central coefficients module, soft-cap clamp, and full proc tests

- Centralized skill coefficients registry (skills_coeffs.{h,c}) with base + per-rank scalar and STR/DEX/INT contributions (percent per 10).
- Soft-cap via rogue_soft_cap_apply + final clamp; consumed by skill_get_effective_coefficient.
- Unit tests: test_skills_phase8_coeffs; Phase 7 proc suite (ICD, probability smoothing, loop guard, dynamic scaling) green.

Skills Phase 9.1–9.4: Persistence for extended skill state and active buffs; versioning, varints, replay hash, and signature tests

- Save manager persists extended skill state and active buffs with versioned TLV; varint counts from v4+; replay hash + signature stub.
- Tests green in Debug SDL2.

Phase 10.2: Externalized EffectSpec Config (JSON) + Loader, Tests, Docs

- Add effect_spec_load.{h,c}: JSON array parser mirroring legacy key=value parser semantics and defaults.
- Unit test test_effectspec_json_loader.c verifies additive and multiplicative behavior; README updated.

Skills Phase 10.3: Validator module, proc introspection, and tests

- skills_validate.{h,c} with rogue_skills_validate_all; checks skill/proc refs and missing coefficients; flags duplicate proc pairs.
- Proc introspection helpers (rogue_skills_proc_count, rogue_skills_proc_get_def) added.
- Unit test test_skills_phase10_3_validator.c.

Skills Phase 10.4: Auto‑doc generator for skill sheets + unit test

- skills_api_doc.{h,c} with rogue_skills_generate_api_doc; stable, curated sections.
- Unit test test_skills_phase10_4_api_doc.c validates content and small-buffer path.

Skills Phase 10.5: Parser edge cases & invalid reference rejection + test

- EffectSpec JSON loader now rejects invalid present-but-unknown enums and requires buff_type for STAT_BUFF; coeffs loader fails on missing skill_id (<0).
- New test test_skills_phase10_5_parser_edges.c covers rejection paths and valid pass-through.

UI Phase 11.1: Dual cooldown + cast/channel progress bar in skill bar

- Added a thin progress bar at the bottom of each skill slot indicating cast/channel progress while the skill is active. Cooldown remains a vertical overlay showing remaining time.
- Visual-only change in src/core/skills/skill_bar.c; no gameplay logic altered.
- Roadmap updated (11.1 → Done). README adds a brief UI note under Skills.
- Tests: Focused skills/effects suite remains green in Debug with SDL2 (-j12): test_skills_phase10_5_parser_edges, test_skills_phase10_4_api_doc, test_skills_phase10_3_validator, test_effectspec_json_loader.

UI Phase 11.2: Buff/Debuff belt — stacks, mini-bars, source coloring

- Group buffs by type in HUD belt; accumulate stack counts, prefer longest remaining and higher magnitude.
- Add duration mini-bar and category-colored borders (CC red, offensive amber, defensive green, movement blue, utility violet).
- Changes in core/hud/hud_buff_belt.{h,c} only; data model untouched. Roadmap and README updated.

UI Phase 11.3: Aura & Channel Area Debug Overlay

- Implemented world-space debug overlay for active AURAs and channel areas with a radial falloff gradient.
- New module: src/game/skill_area_debug_overlay.{h,c}; integrated into main render loop behind app toggle.
- Toggle key: F11 → toggles g_app.show_skill_area_overlay; input bound in src/input/input_events.c.
- EffectSpec: added active AURA introspection getters to drive the overlay without gameplay side effects.
- Minor fixes: SDL color casts in hud_buff_belt.c; local var shadowing fix in skill_bar.c to satisfy warnings-as-errors.
- Build: Debug (SDL2) with parallelism (-j12) succeeds; CMake includes the new module.
- Tests: Full suite executed in Debug with -j12; skills/effectspec/renderer/UI subsets green. Some AI/start-screen/equipment tests are currently red under headless assets; unrelated to this change.

feat(debug-overlay): add input capture + basic widgets (Label/Button/Checkbox/Sliders/InputText); register unit test

- New modules: src/debug_overlay/overlay_input.{h,c} (per-frame input, SDL event feed, capture flags) and src/debug_overlay/overlay_widgets.{h,c} (immediate-mode widgets)
- Integrate overlay input into event loop (begin frame, handle events); gate gameplay input when overlay wants capture; F1 still toggles overlay
- CMake: include overlay_input.c and overlay_widgets.c when ROGUE_ENABLE_DEBUG_OVERLAY is ON; add test target test_overlay_widgets
- Headless-safe guards: avoid SDL renderer calls when g_app.renderer is null; keeps unit tests from requiring a window
- Roadmap update: Phase 5.2 → Done; 5.3/5.4/5.5 → Partial; Phase 6.4 → Done
- README: expand Debug Overlay section with widgets and input capture; note headless safety and tests

Build/Test: Debug (SDL2) with parallelism (-j12). Overlay core + widgets tests green locally; rest of suite unchanged.

feat(debug-overlay): basic columns layout + tab focus for InputText; no-op stubs preserved

- overlay_widgets.c: implement overlay_columns_begin/next/end with equal or custom widths, gutter spacing, and row advance; widgets now honor column width.
- Add lightweight focus indexing and Tab traversal; InputText edits only when focused; clicking field captures and sets focus. Initialize focus_index each panel.
- Keep headless guards and zero-cost OFF stubs. No public API break; header already declared columns API.
- Tests: overlay tests (core/widgets/flag) pass in Debug (SDL2) with -j12. Full run shows 7 unrelated failures (AI/equipment), overlay unaffected.

feat(debug-overlay): auto-wrap across columns, generalized focus, caret nav; add System panel

- Widgets now auto-advance within columns and wrap rows; Label/Button/Checkbox/Sliders/InputText updated
- Focus: Tab/Shift+Tab traversal across all interactive widgets; Enter/Space activate Button/Checkbox; sliders support Left/Right
- InputText: caret navigation (Home/End/Left/Right), backspace/insertion at caret; Escape clears focus
- Input layer: richer key state and headless simulate helpers
- New default panel: System (FPS, frame ms, draw calls, tile quads, toggle metrics/overlay)
- Tests: new test_overlay_layout_focus covers 2-col wrap and focus traversal
- Build: add overlay_panels.c; init/register default panels in app init
- Roadmap: 5.3 → Done; 5.4 expanded; 6.1 → Done

ci: enforce SDL2 + parallelism; all‑green run and docs/roadmap updates

- Build/Test: Debug (SDL2) with -j12; full suite passed 100% (558/558).
- Start Screen: corrupt‑header gating reconfirmed in full run; Continue/Load re‑validate descriptors just before activation.
- Logging: default WARN keeps CI quiet; noisy subsystems remain behind DEBUG level.
- Docs: README Testing & Quality Gates updated to require SDL2 and -j12; Debug Overlay section notes headless safety and all‑green status.
- Roadmap: Added CI validation status to implementation_plan_debugging_overlay.txt.

feat(debug-overlay): add Player Debug Panel + player_debug APIs; honor god mode in melee; all‑green tests

- New APIs: src/core/player/player_debug.{h,c} provide get/set for HP/MP/AP and core stats, god_mode/noclip toggles, and teleport helpers; clamped setters and derived recompute.
- Overlay: Player panel with sliders for HP/MP/AP and STR/DEX/VIT/INT; checkboxes for God Mode/No‑clip; spawn/center teleport actions. Registered alongside System panel.
- App state: add g_app.god_mode_enabled and g_app.noclip_enabled; initialize in app_init; melee damage path short‑circuits when god mode is enabled.
- Build: CMake wires player_debug.c into rogue_core; headless guards preserved.
- Tests: Full Debug run (SDL2, -j12) passed 100% (558/558). Overlay tests remain green.
- Docs: Roadmap marks 6.2/6.3 Done and 6.5 Partial; README notes the Player panel and APIs.
