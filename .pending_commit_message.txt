Combat System Phase 1 Progress: Attack Registry, Branching, Attribute Scaling, Whiff Cancel (Partial)

Summary:
Implemented data-driven attack registry (static tables) with archetype chains (light/heavy/thrust/ranged/spell). Added RogueAttackDef with startup/active/recovery, stamina_cost, base_damage, STR/DEX/INT scaling coefficients, damage_type placeholder, active windows, and per-archetype chain indexing. Extended struct with poise_cost (placeholder), cancel_flags (bit1=whiff), whiff_cancel_pct, and status buildup scaffolding (bleed/frost). Integrated chain traversal & branch queue into combat FSM (archetype switch consumed on next attack start). Added whiff cancel early transition logic (on flagged attacks after whiff_cancel_pct of active window). Added unit tests: registry integrity, chain branching determinism, scaling emphasis differences across archetypes, whiff cancel early recovery.

Plan / Next Steps:
- Implement remaining cancel modalities (on_block) & differentiate hit vs whiff timing thresholds more granularly.
- Apply status buildup on hit (bleed/frost) with accumulation & eventual effect trigger scaffolding.
- Support multi-hit active windows (1A.2) and per-window cancel tagging.
- Introduce drift-resistant timing accumulator (1A.6) and frame-data to frame-event hooks.
- Externalize attack data (hot reload) and begin Phase 2 mitigation pipeline (armor/resist/penetration ordering).
- README combat section: document new fields and whiff cancel behavior.

Files Touched:
- src/game/combat_attacks.h/.c (struct extension + flags + whiff cancel data)
- src/game/combat.c (whiff cancel logic integration)
- tests/unit/test_combat_whiff_cancel.c (new)
- implementation_plan_combatsystem.txt (status updates: 1.2,1.5,1A.3,1A.4 partial progress)

Testing:
- Existing tests: registry, chain branching, scaling all still expected to pass.
- New test ensures early recovery on whiff for flagged attack.

Notes:
- cancel_flags currently only bit1 (whiff) used; on_hit assumed always allowed after threshold.
- Status buildup fields dormant until Phase 2/8 integration.
