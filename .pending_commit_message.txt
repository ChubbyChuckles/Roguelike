feat(skills): input buffering (1A.1 partial) + channel tick scheduler (1A.5 partial) + prior casting foundation

Adds per-skill input buffering window: cast skills can queue during another cast within `input_buffer_ms`; queued skill stores `queued_trigger_ms` and auto-activates immediately when the current cast finishes. Implements new `queued_trigger_ms` state field and queue processing loop on cast completion. Unit test `test_input_buffer_cast` verifies buffered instant skill fires right after long cast ends.

Extends channel system with periodic tick scheduler (Phase 1A.5 partial): fixed 250ms quantum ticks via `channel_next_tick_ms`, applying both skill callback and EffectSpec each tick. Unit test `test_channel_ticks_and_buffer` validates expected tick count over channel duration.

Updates roadmap: 1A.1 -> Partial, 1A.5 -> Partial (already), 1A.6 -> Partial (buffered ordering test added). README gains bullet for channel tick scheduler; commit consolidates previous casting/channel groundwork.

Implementation details:
- New fields: `channel_next_tick_ms`, `queued_trigger_ms` in `RogueSkillState`.
- Activation logic: if attempting to start a cast skill while another cast is active, buffer instead of rejecting (no resource spend yet) when within buffer window.
- On cast completion, buffered skills are scanned and activated deterministically (O(n) scan acceptable at small counts; future optimization could maintain a small queue).
- Channel ticks loop uses while to catch up on missed ticks if frame delta bigger than quantum; drift correction not yet implemented.

Next steps:
- Drift-corrected channel scheduler (accumulate remainder), early cancel scaling (1A.4), haste adjustments (1A.3), channel interruption test, DOT/HOT EffectSpec kinds, and combo builder/spender logic.
