vendor: Phase 2.3–2.5 Constrained Inventory Generation

- Added `rogue_vendor_generate_constrained` implementing template‑driven inventory with uniqueness, rarity caps (legendary<=1, epic<=2, rare<=4) and guaranteed consumable & material presence, optional recipe injection, deterministic sort ordering.
- Introduced rarity downgrade when cap exhausted (rather than rejecting item) ensuring slot fill while honoring caps.
- Added test `test_vendor_phase2_constrained` (determinism, caps, uniqueness, guarantees) and robust asset path resolution for item defs load.

vendor: Phase 3.1–3.5 Pricing Engine Complete

- Added `vendor_pricing.[ch]` implementing ordered pricing pipeline (econ base -> condition scalar -> policy margins + rarity/category modifiers -> reputation discount / sell bonus -> negotiation discount -> dynamic demand scalar -> scarcity multiplier -> clamp & rounding).
- EWMA demand tracking per category (`rogue_vendor_pricing_record_sale` / `record_buyback`) mapped to scalar ~[0.85,1.15].
- Integrated pricing into existing vendor price formula (delegation in `vendor.c`).
- Test `test_vendor_phase3_pricing` validates demand monotonicity, condition scaling, negotiation & reputation effects, margins differential, and price floors.
- Implemented scarcity multiplier (Phase 3.4) via long‑term EWMA (slow decay) mapped to ~[0.9,1.2] scalar; sustained sales raise, net buybacks lower.
- Roadmap updated: 3.1–3.5 all marked Done.
- README updated to reflect full Phase 3 completion and scarcity behavior.

Verification: SDL2 Debug build; vendor tests Phase 0–3 pass locally (manual invocation of pricing test binary due to current CTest registration quirk pending investigation). Scarcity increase path validated in extended pricing test.

crafting: Phase 0–1 Material Registry Implemented

- Added `material_registry.[ch]` implementing unified material taxonomy (cfg: id,item_def_id,tier,category,base_value) with duplicate rejection, tier bounds clamp, category enum (ore|plant|essence|component|currency), and FNV-1a seed mixing helper.
- Integrated into build (`material_registry.c` added to core target).
- Provided lookup APIs: by id, by item def, prefix search, count/get, deterministic file-order retention.
- Test `test_crafting_phase0_1_material_registry` validates parsing, duplicate skip, ordering, prefix search, seed mix diversity, and tier retention using temporary cfg referencing existing material item defs (iron_ore, arcane_dust, primal_shard).
- Roadmap updated: Crafting & Gathering Phases 0 and 1 marked Done with implementation notes; salvage mapping now via item_def linkage.
- README to be updated with concise Material Registry section (foundation for gathering nodes & scarcity feedback).

Verification: SDL2 Debug compile succeeded (pending overall ctest invocation). New test target builds; manual run expected to output CRAFT_P0_1_OK.

crafting: Phase 2 Gathering Nodes Implemented

- Added `gathering.h` & `gathering.c` implementing node definitions parsing (id, material weighted table, min/max roll, respawn, tool tier requirement, biome tags, spawn chance %, rare proc % & multiplier).
- Deterministic per-chunk spawn via mixed hash of world seed, chunk id, def index, honoring spawn chance.
- Harvest API with tool gating (-3 code), depletion state, respawn timer progression (`rogue_gather_update`), weighted material selection, rare proc applying quantity multiplier and tracking counters.
- Analytics: total harvests & rare proc counts accessible.
- Unit test `test_crafting_phase2_gathering` creates synthetic node defs cfg, loads item defs & material registry, validates tool gating, deterministic spawn presence, depletion/respawn cycle, rare proc path (50% chance config) and quantity bounds, emitting CRAFT_P2_OK token.
- Added dedicated material registry asset `assets/materials/materials.cfg` aligned with Phase 0–1 format (duplicate entry to exercise skip path).
- Integrated `gathering.c` into core target & registered new test in tests CMake.
- Roadmap pending update to mark Phase 2 subtasks (2.1–2.6) Done; README addition pending summarizing gathering system.

Verification: SDL2 Debug build; Phase 2 test outputs CRAFT_P2_OK with expected counters; material registry duplicate skip observed.

crafting: Phase 3 Material Quality & Refinement Implemented

- Added `material_refine.[ch]` implementing per-material quality ledger (0..100 buckets) with APIs: reset, add, consume, total, count, average, bias, and refinement operation.
- Refinement algorithm: consumes source quantity, base 70% efficiency -> produced units; failure branch (10%) reduces to 25% of base output; critical branch (5%) adds +50% output and promotes 20% of produced units by +1 quality bucket (capped 100).
- Quality bias function returns normalized average/100 for future affix roll influence (Phase 6+ crafting enhancement integration).
- Deterministic lightweight LCG local RNG (placeholder until Phase 7 RNG stream segregation) used; hooks ready for stream injection.
- Unit test `test_crafting_phase3_refinement` seeds mixed quality distribution, performs multiple refinements validating: source consumption, produced quantity within expected bounds per outcome class, average quality monotonic shift when promoting, bias within [0,1], and distinct execution of failure/critical paths across iterations (prints CRAFT_P3_OK).
- Roadmap updated marking Phase 3 (3.1–3.5) Done with implementation notes; README changelog pending update next.
- Future follow-up: statistical distribution test (binomial tolerance on failure/critical), delta save encoding (Phase 12.3), RNG stream separation (Phase 7.1), and integration into crafted item quality roll bias.

Verification: SDL2 Debug build; Phase 3 test binary executes successfully outputting CRAFT_P3_OK; no warnings introduced.

crafting: Phase 4.1–4.2 Recipe Definition & Parsing

- Extended `RogueCraftRecipe` with fields: time_ms, station tag, skill_req, exp_reward (future integration with queue & progression XP awards).
- Updated `rogue_craft_load_file` parser to support optional upgrade token and new ordered tokens plus forward-compatible trailing tokens (ignored) ensuring schema evolution safety.
- Added unit test `test_crafting_phase4_recipes` generating synthetic recipe file lines (dust_to_shard, ore_to_dust) verifying: extended field parsing, ingredient counts, execution success using minimal in-memory inventory callbacks, forward-compatible token ignore, and emits CRAFT_P4_OK.
- Roadmap updated marking 4.1 & 4.2 Done (Phase 4 now Partial); README changelog to include concise Phase 4 entry.
- Parser resilient to absent upgrade spec (empty field) and differentiates upgrade vs time token; defaults safe (0 time, empty station, 0 skill/exp) when omitted.

Verification: SDL2 Debug build; new test binary passes (CRAFT_P4_OK). Existing crafting & refinement tests remain green.
