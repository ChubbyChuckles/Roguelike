Integration Plumbing: Wire auto rollback into transaction abort; add unit test; update roadmap/README

- Phase 5.4: Implemented automatic rollback invocation from transaction abort path.
  - transaction_manager.c now includes rollback_manager.h and calls
    rogue_rollback_auto_for_participant(...) for each marked participant during abort.
  - Counts rollback invocation in stats; participant on_abort still notified.
- Added unit test test_sync_phase5_8_auto_rollback exercising prepare-failure path and
  validating RogueRollbackStats.auto_rollbacks/restores_performed and auto-triggered event.
- Registered the test in tests/CMakeLists.txt (SDL2 linked when available).
- Updated roadmap Phase 5.4 summary to reflect completion of auto-rollback wiring and added test reference.

Build: Debug, SDL2, -j8; Phase 5.8 sync tests (including new auto_rollback) pass.Integration Phase 3.6.6–3.6.7: Add specialization subsystem and integrate into damage/cooldown

- Implemented progression_specialization module (C, no C++) with per-skill path selection: POWER (+10% damage) and CONTROL (−10% cooldown)
- Public APIs: init/shutdown, choose/get/respec, damage_scalar(), cooldown_scalar(); respec consumes attribute respec tokens
- Integrated specialization scalars in damage_calc for Fireball damage and cooldown paths alongside synergy, INT scaling, and mastery
- Added unit test test_progression_phase3_6_specialization validating baseline → POWER damage increase, respec token consumption, CONTROL cooldown reduction; success token PH3_6_SPECIALIZATION_OK
- Wired new module and test into CMake; built with SDL2 and parallelism (-j8)
- Updated roadmap (3.6.6–3.6.7) and README changelog

feat(integration-plumbing): JSON migration for Materials & Crafting with validations and tests

- Phase 2.3.3 complete (Materials & Crafting JSON):
	- Materials: `rogue_material_registry_load_path` now supports JSON; added tier helpers
		`rogue_material_find_by_category_and_tier` and `rogue_material_next_tier_index`.
	- Gathering: `rogue_gather_defs_load_path` JSON branch supports node defs with weighted materials,
		deterministic spawn/harvest, tool tier gating, and rare proc fields.
	- Crafting: `rogue_craft_load_json` parses recipes (inputs/outputs, time_ms, station, skill_req, exp_reward).
		Added validations: `rogue_craft_validate_dependencies`, `rogue_craft_validate_balance(min,max)`,
		`rogue_craft_validate_skill_requirements`.
- Tests: Added `test_materials_and_gathering_json` and `test_crafting_json_and_validations`; registered in CTest.
	Both pass in Debug with SDL2 and -j8.
- Build: Kept SDL2 enabled; MSBuild parallel builds via CMake `--parallel 8`.
- Docs: Roadmap updated (2.3.3 marked Done with summary). README changelog notes new JSON loaders and validations.

Refs: roadmaps/implementation_plan_integration_plumbing.txt 2.3.3

feat(worldgen-json): Phase 2.3.4 biomes & vegetation JSON loaders, validations, and tests

- Biomes: Added `world_gen_biome_json.c/.h` with C-only parsers to load biome defs, normalize tile weights,
	build transition/compatibility matrix, and validate encounter tables and balance ranges.
- Vegetation: Added `vegetation_json.c/.h` to ingest plants and trees from JSON; introduced internal
	registration helper `rogue__vegetation_register_def` in `vegetation_defs.c` and declared in
	`vegetation_internal.h` for safe registry appends.
- Build: Wired new modules into `CMakeLists.txt`; SDL2 remains required; built with `--parallel 8`.
- Tests: Added `test_worldgen_phase3_4_biome_json` and `test_vegetation_json`; both pass in Debug under SDL2 with -j8.
- Roadmap: Updated 2.3.4 items to Done for biomes/vegetation migration, transitions, balance, and encounters;
	left resource nodes and asset dependency validation for a follow-up.

Refs: roadmaps/implementation_plan_integration_plumbing.txt 2.3.4

feat(ai-phase5): Path smoothing API + Stuck detection decorator with tests

- Navigation: Added `rogue_nav_path_simplify` to collapse collinear cardinal segments while preserving endpoints; supports in-place aliasing. Verified by unit test `test_ai_phase5_path_smoothing_and_stuck` (endpoints preserved, length monotonic, cardinal steps maintained).
- AI Nodes: Added decorator `rogue_bt_decorator_stuck_detect` that monitors agent movement using blackboard vec2 position key and timer window; returns FAILURE when displacement below threshold over window and resets window. Comprehensive Doxygen added in advanced_nodes.c previously.
- Tests: New focused test `test_ai_phase5_stuck_detect` validates stationary→failure windowing, movement reset, and child suppression on failure. Both AI Phase 5 tests pass in Debug with SDL2 and parallel build (-j8).
- Roadmap: Marked AI Phase 5.4 (Path smoothing) and 5.5 (Stuck detection) as Done with brief notes.
- README: Changelog updated to highlight new API/decorator and passing tests.

Build: cmake --build build --config Debug --parallel 8; ctest -C Debug -R test_ai_phase5_stuck_detect --output-on-failure (100% passed).

feat(worldgen-json): Complete Phase 2.3.4 with resource nodes + asset dependency validation

- Implemented resource node JSON loader (`world_gen_resource_json.c/.h`): parses id, rarity,
	tool_tier, yield_min/max, biome_mask or biomes[]; validates ranges; defaults to non-ocean biomes;
	registers via `rogue_resource_register` and integrates with generation.
- Implemented biome asset dependency validator (`world_gen_biome_assets_validate.c/.h`): scans
	biome tile/sprite references and verifies texture file existence with robust relative fallbacks
	(as-is, ../, ../../) for ctest working directories.
- Tests: Added `test_resource_json` and `test_biome_assets_validate`; fixed initialization & path
	handling; both pass in Debug under SDL2 with parallel build (-j8).
- Docs: Roadmap 2.3.4.3 and 2.3.4.7 marked Done with updated SUMMARY; README changelog updated.

Refs: roadmaps/implementation_plan_integration_plumbing.txt 2.3.4.3, 2.3.4.7

feat(ai-phase5): Flow field precompute (5.2) and local avoidance (5.3) with unit tests

- Flow Field: Added `ai/pathing/flow_field.{c,h}` building a reverse Dijkstra flow field over the grid
	honoring `rogue_nav_is_blocked` and `rogue_nav_tile_cost`. Stores per-cell distance and a recommended
	cardinal step toward the target. Public APIs: build(tx,ty,&field), step(x,y,&dx,&dy), free(&field).
- Local Avoidance: Added `ai/pathing/local_avoidance.{c,h}` providing `rogue_local_avoid_adjust(x,y, &dx,&dy)`
	that probes perpendicular detours when an intended forward step is blocked, preferring left/right
	options deterministically with safe no-move fallback.
- Tests: New unit tests `test_ai_phase5_2_flow_field` (target dist=0, reachable finiteness, monotonic descent
	along recommended steps) and `test_ai_phase5_3_local_avoid` (blocked forward detours to side) registered in CTest.
- Build: Debug with SDL2 and `--parallel 8` succeeded; focused CTest run for both tests passed (0 failures).
- Docs: Updated `roadmaps/implementation_plan_aisystem.txt` marking 5.2 & 5.3 Done with notes; README changelog
	now highlights the new modules and tests.

feat(ai-phase6): Ranged projectile firing action node + unit test (Phase 6.1)

 - Added BT action `rogue_bt_action_ranged_fire_projectile` integrating AI with projectile subsystem.
	 - Reads agent/target positions from blackboard, computes normalized direction with slight forward offset, and spawns via `rogue_projectiles_spawn`.
	 - Optional blackboard bool gate for line-of-fire clear; optional cooldown timer reset to 0 on successful fire.
 - Tests: New `test_ai_phase6_1_ranged_projectile` validates gating (no fire when blocked), projectile spawn count increment, and cooldown reset. Registered in CTest.
 - Build: Debug with SDL2 enabled and `--parallel 8`; targeted CTest run passed: 100% (1/1) for this feature.
 - Docs: Updated `roadmaps/implementation_plan_aisystem.txt` (Phase 6.1 marked Done with notes) and README changelog entry under Section 11.

feat(ai-phase6): Reaction windows (Parry/Dodge) nodes + unit test (Phase 6.2)

- Added `rogue_bt_action_react_parry` (activates parry within window when incoming_threat flag set; resets timer/flag otherwise) and `rogue_bt_action_react_dodge` (computes normalized vector away from threat and remains active for duration_seconds).
- Tests: New `test_ai_phase6_2_reactions` validates parry window open/close and dodge vector/duration behavior. Wired into CTest with SDL compile defs.
- Build: Debug with SDL2, `cmake --build build --config Debug --parallel 8`; targeted `ctest -C Debug -j8 -R test_ai_phase6_2_reactions` passed (100%).
- Docs: Roadmap Phase 6.2 marked Done with implementation notes; README changelog updated.

feat(ai-phase6): Opportunistic attack and kiting logic (Phases 6.3–6.4) with unit tests

- Added `rogue_bt_action_opportunistic_attack` returning SUCCESS when target is in recovery and
	within optional max distance; optionally resets cooldown timer on success. Unit test
	`test_ai_phase6_3_opportunistic` validates gating (no recovery / out-of-range) and cooldown reset.
- Added `rogue_bt_action_kite_band` enforcing a preferred distance band [min,max] by moving away when
	too close and toward when too far; SUCCESS when inside band. Unit test `test_ai_phase6_4_kiting`
	validates approach/retreat behavior and idle-in-band.
- Build: Debug with SDL2, parallel (`--parallel 8`); targeted CTest runs for both tests pass.
- Docs: Updated `roadmaps/implementation_plan_aisystem.txt` marking 6.3 & 6.4 Done; README changelog now
	includes entries for 6.3 and 6.4.
