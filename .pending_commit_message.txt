integration: Phase 4.7 Shared Resource Access Control complete

- Added cross-platform resource_lock module (mutex + rwlock abstractions)
- Implemented lock ordering based deadlock prevention (per-thread order stack)
- Added priority-aware acquire API (Background/Normal/Critical) with per-priority stats
- Implemented non-blocking try (timeout=0) and bounded timed waits
- Added contention detection, wait time accumulation, global aggregation
- Added auditing APIs: global stats snapshot, dump, per-lock stats & reset
- Added performance profiling hooks (wait time nanoseconds, contention counts)
- Created deterministic unit tests: basic mutex, cross-thread contention, ordering prevention, rwlock multi-reader/writer
- Updated roadmap (Phase 4.7 tasks marked Done) and README (Phase 4.7 summary)

Follow-up ideas:
* Consider finer-grained timed waits using condition variables on POSIX / Slim SRW lock timeouts
* Potential future priority inversion handling with boost/escalation
