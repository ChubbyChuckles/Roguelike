Equipment System Phase 2 – Layered Stat Cache, Derived Metrics, and Resist Breakdown

Completed Features:
* 2.1 Layered stat cache (base/implicit/affix/buff) with affix layer population via equipment aggregation.
* 2.2 Derived metrics (DPS, EHP, toughness, mobility, sustain placeholder) fully computed each update.
* 2.4 Soft cap helper (rogue_soft_cap_apply) + monotonic diminishing returns tests.
* 2.5 Deterministic fingerprint hashing across layered + derived numeric fields.
* 2.6 Tests for layer integrity, ordering invariance, fingerprint mutation, soft cap curve & slope.
* 2.3 Resist breakdown: new resistance affix stats (physical, fire, cold, lightning, poison, status), aggregation into stat cache, soft + hard caps, and validation test.

Implementation Details:
* Added new affix stat enums: strength_flat, dexterity_flat, vitality_flat, intelligence_flat, armor_flat, and resist_* variants; parser updated accordingly.
* Refactored equipment aggregation to populate g_player_stat_cache.affix_* and resistance fields (no direct player stat mutation).
* Extended stat_cache: affix_armor_flat + per-resistance fields; compute_derived applies soft cap (75%) with diminishing (softness=0.65) and hard cap (90%).
* Fingerprint logic unchanged but automatically captures new fields (positioned before fingerprint member) ensuring determinism auditing includes resistance changes.
* New unit tests:
	- test_equipment_phase2_affix_layers: affix primary stats, armor, fingerprint mutation on affix change, equip ordering invariance.
	- test_equipment_phase2_stat_cache: base layer integrity, fingerprint change on base stat mutation, soft cap curve + monotonic slope.
	- test_equipment_phase2_resists: resistance aggregation, diminishing above soft cap, hard cap enforcement (e.g., 120% -> 90%).

Roadmap Updates:
* Phase 2 items 2.1, 2.2, 2.3, 2.4, 2.5, 2.6 all marked Done.

Next Steps:
1) Start Phase 3 (item_level + budget governance scaffolding).
2) Add stress determinism test over many random equip permutations (hash collision guard).
3) Introduce implicit layer sources (base item implicit stats) feeding into cache.

---

Equipment System Phase 3 – Item Level & Power Budget Governance

Implemented Features:
* 3.1 Item level field added to `RogueItemInstance` (initialized to 1 on spawn).
* 3.2 Power budget formula: `budget = 20 + item_level*5 + rarity^2*10` (capped rarity range) via `rogue_budget_max`.
* 3.3 Budget enforcement during affix generation: post-roll clamp reduces larger affix first until within cap.
* 3.4 Validation API: `rogue_item_instance_validate_budget` returns 0 (ok) or negative on invalid / over-budget.
* 3.5 Upgrade API: `rogue_item_instance_upgrade_level` increases item_level and incrementally elevates affix values toward new cap deterministically.
* 3.6 Unit test `test_equipment_phase3_budget` covers under-cap validity, forced over-cap detection, and multi‑level upgrade progression staying within budget.

Technical Notes:
* Generation clamp chooses decrement target by comparing prefix vs suffix value (ties favor prefix) for deterministic convergence.
* Upgrade loop uses lightweight LCG step to choose which affix to increment when both present, maintaining reproducibility across builds.
* Validation integrates with prospective persistence/tooling to flag legacy over-budget artifacts.

Documentation & Roadmap:
* Roadmap file updated with new Phase 15 (renumbered equipment subsection for item system) entries marked Done for 15.1–15.6.
* README gains Phase 3 section summarizing budget formula, enforcement, and APIs.

Follow-Up Candidates:
* Add statistical distribution test ensuring average affix utilization fraction stays within target band after many upgrades.
* Extend budget to multi-affix (future multi-prefix/suffix) by proportional scaling rather than decrement loop.
* UI exposure of item level + budget utilization (progress bar) in equipment panel.

