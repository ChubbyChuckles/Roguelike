Equipment System Phase 5.1 â€“ Socket Count Infrastructure

Implemented Features:
* Added optional `socket_min` / `socket_max` columns to `RogueItemDef` CSV schema (indices 28/29 after `set_id`), parsed with validation (clamp <0 to 0, enforce max>=min, cap max at 6).
* Extended `RogueItemDef` & `RogueItemInstance` structs with socket range and per-instance `socket_count` plus `sockets[6]` (-1 empty) fields.
* Deterministic socket count roll on spawn using local LCG seeded by instance index, definition index, and integer position; supports fixed and ranged counts.
* Socket Runtime API: count/query/insert/remove functions with robust error codes for OOB, occupied, and invalid gem indices.
* New asset fixture `assets/equipment_test_sockets.cfg` for parser testing (range + fixed examples).
* Unit test `test_equipment_phase5_sockets` validates parser ingestion, deterministic fixed-count, bounded range distribution across multiple spawns, and insert/remove semantics.
* Roadmap updated marking Phase 5.1 Done; README section added describing design & upcoming Phase 5.2+ work.

Notes / Next Steps:
* Phase 5.2: Introduce gem definition registry & stat layering contribution (primary/resist/proc placeholders) feeding aggregation before affixes.
* Phase 5.3: Add economic + safety model (currency cost, guaranteed item retention) and potential failure modifiers.
* Transition runeword matching (Phase 4.5 placeholder) to use ordered rune/gem sequence once gem typing established.

