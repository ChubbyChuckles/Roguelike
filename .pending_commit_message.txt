Equipment Phase 16.4: Runeword Recipe Validator

Summary:
- Implemented runeword pattern validation API `rogue_runeword_validate_pattern` (lowercase alphanumeric + single underscores, max 5 segments, length <=11, rejects empty / double underscore / invalid chars).
- Integrated validator into `rogue_runeword_register` (returns -3 when invalid) to prevent impossible or malformed patterns entering registry.
- Added comprehensive unit test `test_equipment_phase16_runeword_validator` covering failure cases (null, empty, uppercase, invalid symbol, segment overflow, double underscore) and success cases including max segment pattern; verifies registration rejection on invalid pattern.
- Updated roadmap marking Phase 16.4 Done with description.
- Minor: Added public prototype to `equipment_content.h`.

Rationale:
Prevents silent acceptance of malformed runeword recipes which would undermine deterministic matching & future crafting UI. Guarding early simplifies content tooling and future hotâ€‘reload diffing.

Testing:
New test passes (Release build) alongside existing Phase 16.x tests. No warnings introduced.

Equipment Phase 16.5: Budget Analyzer Report Generator

Summary:
- Added `equipment_budget_analyzer.{h,c}` implementing aggregate affix budget utilization scan across active item instances.
- Report fields: item_count, over_budget_count, avg_utilization, max_utilization + index, histogram buckets (<25,<50,<75,<90,<=100,>100).
- Deterministic JSON export API `rogue_budget_analyzer_export_json` for CI / telemetry ingestion.
- Unit test `test_equipment_phase16_budget_analyzer` spawns synthetic items to exercise each utilization bucket plus an intentional over-budget case; asserts bucket population, over_budget_count >=1, and JSON field presence.

Rationale:
Provides immediate visibility into affix budget distribution enabling early detection of systemic power creep or overly generous roll patterns before broader content expansion. Histogram design matches existing analytics style (Phase 11) for consistency.

Testing:
New test passes locally with existing Phase 16 suite. JSON output manually inspected for deterministic key ordering.

Equipment Phase 16.6: Analyzer Boundary & Validator Edge Tests

Summary:
- Added `test_equipment_phase16_analyzer_boundaries` covering empty inventory analyzer run, extreme high item_level utilization scan, and runeword validator boundary cases (max length accepted, over-length rejected, max segments accepted, overflow segments rejected).
- Marks Phase 16.6 Done; roadmap & README updated.

Rationale:
Strengthens robustness of newly introduced tooling modules by asserting graceful behavior on edge inputs, reducing regression surface prior to future Phase 17 modding exposure.

Testing:
All Phase 16 tests pass in Release (including new boundary test). Analyzer JSON export verified under zero and non-zero item population.

Equipment Phase 17.1: Public Schema Docs

Summary:
- Added `equipment_schema_docs.{h,c}` providing `rogue_equipment_schema_docs_export` which emits canonical JSON documentation for item_def, set_def, proc_def and runeword pattern rules (versioned root object).
- Unit test `test_equipment_phase17_schema_docs` validates presence of all sections, version field, and size bounds.

Rationale:
Establishes a machine-readable + human-friendly reference for external tooling / modders before enabling hot reload & sandbox scripting (upcoming Phase 17 items), reducing ambiguity and aiding validation gates.

Testing:
New test passes in Release; output manually inspected for structural correctness and deterministic ordering of top-level sections.

Equipment Phase 17.2: Hot Reload of Equipment Set Definitions

Summary:
- Added hot reload integration to equipment content: public API `rogue_equipment_sets_register_hot_reload(id,path)` wrapping existing hot reload registry.
- Callback (`on_sets_hot_reload`) clears current set registry then reloads JSON file, providing safe swap semantics.
- Header `equipment_content.h` updated with API declaration; implementation in `equipment_content.c` includes util/hot_reload.
- Unit test `test_equipment_phase17_hot_reload` writes initial JSON with one set, registers watcher, forces initial load, modifies file adding second set, invokes tick (detects hash change) and asserts set count increments & new set id present; verifies subsequent force leaves count stable.
- Roadmap updated marking Phase 17.2 Done; README new section documents API, strategy and future extension notes.

Rationale:
Enables rapid iteration on set tuning / bonus threshold balancing for external tooling & future mod ecosystem prior to introducing sandbox scripting. Establishes deterministic foundation (force reload) for forthcoming diff & validation tooling (Phase 17.4).

Testing:
New test passes locally (Release) alongside Phase 17.1 schema docs and prior Phase 16 suite. Manual inspection confirms no duplicate registrations & stable behavior on redundant force.

Equipment Phase 17.5 (Early Part): Hot Reload Determinism Hash

Summary:
- Introduced registry hash API `rogue_sets_state_hash` (FNV-1a 64 -> 32-bit fold) to fingerprint current set definitions enabling detection of unintended mutations between reloads.
- Added unit test `test_equipment_phase17_hot_reload_hash` covering: empty vs post-load hash change, stable hash on identical force reload, hash change after modifying JSON (bonus stat tweak), integration with existing hot reload path.
- Updated roadmap marking Phase 17.5 partial (hash determinism complete; sandbox scripting enforcement pending).
- README Phase 17.2 section extended with determinism guard note.

Rationale:
Provides early safety net for future sandbox scripting & diff tooling by locking in deterministic state hashing now while surface area is small.

Testing:
All three Phase 17 tests pass (schema docs, hot reload, hash). No impact on previous phases; spot check runeword validator still green.

Equipment Phase 17.3: Sandboxed Scripting Hooks

Summary:
- Added minimal deterministic sandbox scripting system (file-based) for future unique item / mod stat adjustments.
- Instruction set: `add <stat> <val>` (additive), `mul <stat> <percent>` (post-add multiplicative). Supported 11 stats.
- Loader (`rogue_script_load`) parses up to 16 instructions; invalid tokens abort load (no partial state). Hash (`rogue_script_hash`) provides deterministic fingerprint (FNV-1a fold). Applier (`rogue_script_apply`) executes two-pass (adds then muls) ensuring order invariance among same-op groups.
- Unit test `test_equipment_phase17_sandbox_script` covers parsing, arithmetic result (10 add +20% => 12), hash non-zero, and invalid opcode rejection.

Rationale:
Provides controlled, auditable extension point without introducing dynamic language complexity. Facilitates future unique behavior tuning & safe mod contributions.

Equipment Phase 17.4: Set Definition Diff Tool

Summary:
- Implemented `rogue_sets_diff` generating JSON diff of set definitions between base and mod files: `added`, `removed`, `changed` (hash-based bonus comparison).
- Internally loads both files (temporary registry usage) hashing bonuses per set id (FNV-1a of bonuses struct bytes) to detect content changes.
- Unit test `test_equipment_phase17_sets_diff` validates detection of added (30), removed (20), and changed (10) ids.

Rationale:
Equips CI / review pipeline with quick visibility into tuning vs content additions/removals, supporting governance before broad mod distribution.

Testing:
Expanded Phase 17 test suite now includes sandbox script & diff tool; all five Phase 17 tests pass (schema docs, hot reload, hash, sandbox script, sets diff) under Release config.

