Phase 10.1: Externalized Skill Coefficients Loader + Test

- Implement skills_coeffs_load.{h,c}: parse JSON/CSV into RogueSkillCoeffParams and register via rogue_skill_coeff_register.
- Add query API rogue_skill_coeff_exists(int) and ensure skill_get_effective_coefficient multiplies mastery, specialization, and central coeff scalar.
- New unit test tests/unit/test_skills_phase10_coeffs_loader.c: initializes event bus and stat cache; registers sample skills; parses JSON; asserts coefficient ranges; prints sentinel message; runs via CTest.
- CMake: wire loader into rogue_core; add add_test(NAME test_skills_phase10_coeffs_loader ...).
- Docs: mark Phase 10.1 Done in roadmap; README: add Data-Driven Skill Coefficients section with APIs and test hint.

Build/Test: Debug + SDL2, parallel (-j12); CTest target test_skills_phase10_coeffs_loader passing.
Skills Phase 7.6 + Phase 8.1–8.4: central coefficients module, soft-cap clamp, and full proc tests

- Add centralized skill coefficients registry (src/core/skills/skills_coeffs.{h,c}) with base + per-rank scalar and STR/DEX/INT contributions (percent per 10).
- Integrate into runtime via skill_get_effective_coefficient; include in build.
- Enforce soft-cap using rogue_soft_cap_apply plus hard clamp to cap per stat to satisfy expected bounds under extreme stats.
- Unit tests: add/green test_skills_phase8_coeffs; ensure Phase 7 proc suite fully green (ICD, probability smoothing, loop guard, dynamic scaling, regression).
- Roadmap: mark Phase 7.6 and Phase 8.1–8.4 as Done.

Skillsystem Phase 7.4–7.5: Anti-proc loop guard + dynamic scaling; tests and docs

- Implement loop guard in skills procs: depth cap (8) and cycle signature hash to prevent cyclic proc storms; deterministic suppression with single warn-once overflow.
- Add dynamic proc scaling: per-proc recent-window chance reduction (~12% per extra recent trigger, capped at ~60%), integrated with existing deterministic RNG + optional smoothing.
- Unit test `tests/unit/test_skills_phase7_4_5_loop_and_scaling.c`: validates loop protection and scaling under bursty triggers; disables buff dampening for rapid stacking; assertions use `rogue_buffs_get_total`.
- Roadmap updated: mark 7.4/7.5 Done with details; README gains a subsection documenting safety and scaling behavior.
- All Phase 7 tests (7.1–7.5) pass locally in Debug with SDL2 and parallel runs (-j16).

Skills Phase 9.1–9.4: Persistence for extended skill state and active buffs; versioning, varints, replay hash, and signature tests

- Save manager writes/reads extended skills (rank, cooldown_end_ms, cast_progress_ms, channel_end_ms, next_charge_ready_ms, charges_cur, casting_active, channel_active) with legacy detection by payload size.
- Buffs persist as (type, magnitude, remaining_ms relative to now); legacy absolute end-time layout auto-detected and converted.
- Versioned TLV sections with varint counts (v4+); includes replay hash and a signature stub for tamper detection.
- Tests green in Debug SDL2: `test_save_phase7_skill_buff_roundtrip`, `test_save_phase7_skill_buff_extensions`, `test_persistence_versions`, `test_save_v4_varint_counts`, `test_save_v8_replay_hash`, `test_save_v9_signature`.
- Roadmap updated: mark Phase 9.1–9.4 Done; README gains “Skills Persistence (Phase 9)”.

Phase 10.2: Externalized EffectSpec Config (JSON) + Loader, Tests, Docs

- Add `src/graphics/effect_spec_load.{h,c}`: JSON array parser mapping text enums to internal types; mirrors legacy key=value parser semantics and defaults.
- Register effects via `rogue_effect_register`; support fields: kind/debuff/buff_type/magnitude/duration_ms/stack_rule/snapshot, scaling and preconditions, DOT/AURA specifics.
- New unit `tests/unit/test_effectspec_json_loader.c`: disables buff dampening for determinism; verifies additive STR stacking and multiplicative POWER_STRIKE semantics (200% of baseline 10 → 20); prints sentinel OK.
- Wire target and add CTest entry; ensure SDL2 linked for Debug like other tests.
- README: add “External EffectSpec Config (Phase 10.2)” section with API and field list; Roadmap: mark 10.2 Done with implementation notes.
- Smoke: parser/stack variants/snapshot scale/DOT/AURA tests remain green in Debug (SDL2) with parallel builds.

Skills Phase 10.3: Validator module, proc introspection, and tests; EffectSpec JSON loader test green

- Implemented skills validator (skills_validate.{h,c}) with API:
	- int rogue_skills_validate_all(char* err, int err_cap)
	- Validates: skill.effect_spec_id existence, proc.effect_spec_id existence, duplicate (event_type,effect_spec_id) pairs, and missing coefficients for offensive skills.
- Added proc introspection helpers to skills_procs.{h,c}:
	- int rogue_skills_proc_count(void)
	- int rogue_skills_proc_get_def(int index, RogueProcDef* out)
- New unit test tests/unit/test_skills_phase10_3_validator.c:
	- Initializes event bus + procs, asserts failure cases (invalid skill effect id, missing coefficients, duplicate proc pairs), and final pass after reset; prints "PH10.3 validator OK".
- Fixed test runtime by initializing the event bus and procs subsystem before proc registration.
- Verified alongside EffectSpec JSON loader:
	- ctest -C Debug -j12 -R "test_skills_phase10_3_validator|test_effectspec_json_loader" → both pass.
- Roadmap: mark Phase 10.3 Done; README: add Skills Validator section with API and usage.

Skills Phase 10.4: Auto‑doc generator for skill sheets + unit test

- Add `src/core/skills/skills_api_doc.{h,c}` with API `int rogue_skills_generate_api_doc(char* buf, int cap)`.
- Generator emits curated sections in a stable order:
	SKILL_SHEET_COLUMNS, SKILL_FLAGS_AND_TAGS, COST_MAPPING_EXTENSIONS, COEFFS_JSON_FIELDS,
	EFFECTSPEC_JSON_REFERENCE, VALIDATION_TOOLING. Returns -1 on insufficient buffer.
- Unit `tests/unit/test_skills_phase10_4_api_doc.c` asserts section presence, order, and small‑buffer error path.
- CMake: wire source into core build and test target into Skills.cmake. Debug SDL2 build with parallel tests (-j12) passes the new test alongside validator and EffectSpec loader.
- Roadmap: mark Phase 10.4 Done; README: add “Skills Auto‑doc (Phase 10.4)” section with API and test hint.
