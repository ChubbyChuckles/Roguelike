integration: Phase 4.7 Shared Resource Access Control complete

- Added cross-platform resource_lock module (mutex + rwlock abstractions)
- Implemented lock ordering based deadlock prevention (per-thread order stack)
- Added priority-aware acquire API (Background/Normal/Critical) with per-priority stats
- Implemented non-blocking try (timeout=0) and bounded timed waits
- Added contention detection, wait time accumulation, global aggregation
- Added auditing APIs: global stats snapshot, dump, per-lock stats & reset
- Added performance profiling hooks (wait time nanoseconds, contention counts)
- Created deterministic unit tests: basic mutex, cross-thread contention, ordering prevention, rwlock multi-reader/writer
- Updated roadmap (Phase 4.7 tasks marked Done) and README (Phase 4.7 summary)

Follow-up ideas:
* Consider finer-grained timed waits using condition variables on POSIX / Slim SRW lock timeouts
* Potential future priority inversion handling with boost/escalation

integration: Phase 4.8 Shared Data Structure Validation Suite

- Added aggregate test `test_integration_phase4_8_shared_validation` covering:
	* 4.8.1 Entity ID bulk uniqueness & validation (2K IDs)
	* 4.8.5 Copy-on-write interleaved modification isolation
	* 4.8.7 Multi-thread mutex contention stress (profiling acquisitions)
- Roadmap 4.8 items marked Done referencing existing dedicated tests (memory pool, cache system, ref counting, performance) to avoid duplication
- README updated with Phase 4.8 summary

integration(phase5): extend snapshot manager (5.2.4-5.2.7) dependency ordering, validation, replay log, stats
