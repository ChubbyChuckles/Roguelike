UI Phase 9 (Performance & Virtualization) – extended implementation

- 9.1 CPU budget instrumentation per phase: Added per-phase timing APIs (begin/end/query), accumulated render phase timing, stored frame/update/render breakdown fields.
- 9.2 Dirty rectangle: Added dirty kind classification (structural vs content) to RogueUIDirtyInfo; union logic sets kind based on node count delta.
- 9.3 Text shaping cache & glyph atlas compaction: Implemented lightweight glyph cache (advance synthesis, LRU tick updates, compaction trimming oldest half, hit/miss counters, reset API, measurement function). Added associated public APIs.
- 9.4 Large list virtualization: (previous partial) – groundwork retained; inventory virtual range integration still pending (will finalize in follow-up to avoid partial refactor mid-cycle).
- 9.5 Frame time regression guardrails: Added baseline + percentage threshold APIs, auto-baseline accumulation, regression latch flag.

New tests:
- test_ui_phase9_extended.c covering glyph cache growth/compaction, per-phase timing API smoke, dirty kind, regression guard, auto-baseline (relaxed assertions for platform timer granularity).

Other changes:
- Extended RogueUIContext with perf_phase arrays, regression guard fields, glyph cache storage.
- Added performance & glyph cache API declarations to ui_context.h.
- Updated dirty info accessor to include kind classification.

Follow-ups planned:
- Integrate virtualization directly into inventory grid & combat log (phase 9.4 completion) and add targeted node count stability test.
- Strengthen per-phase timing test once deterministic high-resolution timer stub is integrated.
