Equipment Phase 5.4–5.5: Implement enchant & reforge systems
- Equipment Phase 5.6 (Optional): Implement protective seal locking mechanic
	- Added lock flags to RogueItemInstance (prefix_locked / suffix_locked)
	- New APIs: rogue_item_instance_apply_protective_seal, rogue_item_instance_is_prefix_locked, _is_suffix_locked
	- Enchant path respects locks (ignores reroll request for locked affixes, returns -2 if nothing to reroll)
	- Added protective_seal material to test items + unit test test_equipment_phase5_protective_seal
	- Roadmap & README updated to mark 5.6 Done
- Added equipment_enchant.[ch] with APIs: rogue_item_instance_enchant (selective prefix/suffix reroll) and rogue_item_instance_reforge (full reroll preserving item_level, sockets, rarity)
- Cost formulas (enchant: 50 + 5*level + rarity^2*25 + 10*sockets; reforge: 2x enchant cost) with gold + material consumption (enchant_orb for dual reroll, reforge_hammer for reforge)
- Deterministic RNG seeding and budget validation guard (-5 on validation failure)
- Added material item defs (enchant_orb, reforge_hammer) to test_items.cfg
- Unit test test_equipment_phase5_enchant_reforge exercising selective reroll, full reforge, and failure paths (insufficient gold, missing material)
- Roadmap equipment phases 5.4, 5.5, 5.7 marked Done (5.6 optional still open)
- README section documenting operations, costs, return codes
Equipment System Phase 5.1 – Socket Count Infrastructure

Implemented Features:
* Added optional `socket_min` / `socket_max` columns to `RogueItemDef` CSV schema (indices 28/29 after `set_id`), parsed with validation (clamp <0 to 0, enforce max>=min, cap max at 6).
* Extended `RogueItemDef` & `RogueItemInstance` structs with socket range and per-instance `socket_count` plus `sockets[6]` (-1 empty) fields.
* Deterministic socket count roll on spawn using local LCG seeded by instance index, definition index, and integer position; supports fixed and ranged counts.
* Socket Runtime API: count/query/insert/remove functions with robust error codes for OOB, occupied, and invalid gem indices.
* New asset fixture `assets/equipment_test_sockets.cfg` for parser testing (range + fixed examples).
* Unit test `test_equipment_phase5_sockets` validates parser ingestion, deterministic fixed-count, bounded range distribution across multiple spawns, and insert/remove semantics.
* Roadmap updated marking Phase 5.1 Done; README section added describing design & upcoming Phase 5.2+ work.

Notes / Next Steps:
* Phase 5.2: Introduce gem definition registry & stat layering contribution (primary/resist/proc placeholders) feeding aggregation before affixes.
* Phase 5.3: Add economic + safety model (currency cost, guaranteed item retention) and potential failure modifiers.
* Transition runeword matching (Phase 4.5 placeholder) to use ordered rune/gem sequence once gem typing established.

Equipment System Phases 5.2–5.3 – Gem Definitions & Socket Economy

Implemented Features:
* Gem Registry: Added `equipment_gems.c/h` implementing `RogueGemDef` (flat + percent primary stats, armor, resistances, proc placeholders) with static array registry + bounds checks, capacity 128.
* CSV Loader: Reused config parsing path to load `assets/gems_test.cfg` test fixture; validates numeric fields and maps `item_def_index` for gem->item linkage.
* Aggregation Layer: Inserted `rogue_gems_aggregate_equipped` into equipment stat pipeline prior to set/runeword layering; percent bonuses presently approximated by converting to flat using base primary totals for deterministic minimal-scope integration (future: distinct percent layer).
* Economic Socket Operations: Added paid insertion `rogue_item_instance_socket_insert_pay` (charges gold via heuristic `10 + 2*(sum flats + sum pct)`) and refund removal `rogue_item_instance_socket_remove_refund` (refunds 50% cost, optional inventory return of gem item). Safety: early validation prevents partial state mutation on failure.
* Unit Test: `test_equipment_phase5_gems` covers gem load, insertion cost gating, stat aggregation (flat + percent), removal refund logic, and socket state integrity. Forces socket count for deterministic coverage.
* README: Added Phase 5.2–5.3 section detailing design decisions and future refinements.
* Roadmap: Marked 5.2 & 5.3 Done post-implementation (awaiting build/test validation in this commit step).

Notes / Future Work:
* Introduce true percent stat layering affecting post-affix totals (requires ordering review with unique/set/runeword multipliers).
* Extend gem definitions with proc chance/effect execution hooks and rarity-based cost scaling.
* Implement Phases 5.4 (Enchant selective reroll) & 5.5 (Reforge preserving item level & sockets), optionally 5.6 protective seal, then robustness/determinism tests (5.7).

