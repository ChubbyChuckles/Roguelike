Character Progression Phase 12 Completion: Added V3 progression persistence (progression_persist.c/h)
- Version bump to 3 with new ProgHeaderV3 including attr_op_count and passive unlock list
- Passive unlock sparse list serialization (node_id,timestamp placeholder) with deterministic ordering
- Attribute operation journal (code,kind) persisted & replayed; migration flag ATTR_REPLAY
- Migration flags extended (TALENT_SCHEMA, ATTR_REPLAY); existing STAT_REG fingerprint check retained
- Backwards compatibility loader now supports V1, V2, V3 with replay and chain hash parity
- Added attribute journal infrastructure (ops array) & public accessors for persistence tests
- Extended tests: new test_progression_phase12_v3 validates roundtrip, replay counts (3 ops), chain hash stability
- Roadmap Phase 12.2–12.5 marked Done; README changelog updated

feat(enemy-integration): Implement Phases 2-3 enemy integration pipeline

- Added Phase 2: Encounter Template → Room Placement
  * Implemented room-based encounter template selection with depth-based logic
  * Added difficulty rating computation based on room properties (depth, area, tags) 
  * Implemented template placement validation with space requirements
  * Added graceful fallback to basic templates if primary selection fails
  * Comprehensive test coverage for deterministic template selection

- Added Phase 3: Stat & Modifier Application at Spawn  
  * Implemented stat application with elite scaling bonuses (1.5x HP, 1.2x damage, 1.1x defense)
  * Added probabilistic modifier system with type-based chances (boss: always, elite: 75%, normal: 20%)
  * Implemented budget cap system (boss: 1.0, elite: 0.8, normal: 0.6) for modifier selection
  * Added comprehensive spawn finalization pipeline combining stats, modifiers, and encounter metadata
  * Extensive validation tests for stat consistency and modifier determinism

- Enhanced enemy integration API with new functions:
  * rogue_enemy_integration_choose_template() - depth-based template selection
  * rogue_enemy_integration_compute_room_difficulty() - room difficulty calculation  
  * rogue_enemy_integration_prepare_room_encounter() - complete encounter preparation
  * rogue_enemy_integration_finalize_spawn() - full spawn pipeline
  * rogue_enemy_integration_validate_final_stats() - stat validation

- All tests pass with deterministic behavior preserved
- Maintains backward compatibility with existing Phase 0-1 implementations

Phase 2-3 now complete: enemy integration pipeline can generate room encounters with proper stat scaling and modifier application.

Vendor System Phase 4 Completion: Reputation & Negotiation Implementation
- Added vendor_reputation.c/h module providing per-vendor reputation tracking with diminishing returns (logistic scaling)
- Reputation gain API (rogue_vendor_rep_gain) and raw adjust for penalties; progress & tier query helpers
- Deterministic negotiation attempt (rogue_vendor_attempt_negotiation) using attribute-derived skill tag scores (insight->intelligence, finesse->dexterity) + d20 style roll
- Success yields uniform discount within rule range, small rep gain, short lockout (5s); failure applies rep penalty (-1), longer lockout (10s)
- Added Phase 4 unit test (test_vendor_phase4_reputation_negotiation) verifying diminishing rep deltas and increased negotiation success with higher attributes
- Updated CMake to compile vendor_reputation module & register new test; roadmap Phase 4 entries marked Done

Vendor System Phase 5 Completion: Buyback & Transaction Journaling
- Added vendor_buyback.c/h implementing per-vendor circular buyback buffer (cap 32) storing item guid, def index, rarity, category, condition pct, original price, sell & assimilation timestamps.
- Depreciation model: 10% price decay per minute (discrete intervals) to 50% floor of original vendor payout; query API returns current depreciated resale price.
- Assimilation: entries auto-expire after 5 minutes (currently marked inactive placeholder for future stock merge in Phase 6+).
- Transaction journal vendor_tx_journal.c/h: FNV1a hash-chained append-only log (sale=1, buyback=2, future assimilate=3) capturing sequence id, synthetic timestamp, vendor id, action, guid low32, price, rep delta, discount pct; accum hash accessor for integrity.
- Anti-duplicate GUID lineage: recent GUID ring buffer (128) with lookup to detect repeat resale exploit attempts; exposed rogue_vendor_buyback_guid_recent.
- Unit test test_vendor_phase5_buyback_journal validates: ring buffer wrap (no crash, bounded count), monotonic depreciation (p0>=p1>=p2 & floor respected), journal hash determinism (two identical sequences -> same accum hash), duplicate guid detection returns flagged state on repeat.
- Integrated new sources into core CMake target & added test target (SDL2 linked if available). Roadmap Phase 5.1–5.5 marked Done; README changelog updated.

Vendor System Phase 6 Completion: Special Offers & Rotations
- Added vendor_special_offers.c/h providing up to 4 concurrent time-limited special offers (10 min duration) with compaction & expiry handling.
- Scarcity weighting: heuristic selects lowest base_value material (proxy deficit) for elevated inclusion probability; flag stored on offer.
- Nemesis performance tie-in: nemesis_defeated flag biases roll (25% branch) toward high-rarity blueprint injection (rarity forced 4) with origin flag.
- Pity timer: tracks consecutive roll cycles producing zero new offers; after threshold (3) guarantees a scarcity offer if available.
- Deterministic seed mixing uses world seed, nemesis flag salt, and prior roll seed for reproducibility.
- Unit test test_vendor_phase6_special_offers validates: offer accumulation, expiry compaction, nemesis rare occurrence, slot bounds, and prints VENDOR_PHASE6_SPECIAL_OFFERS_OK.
- Roadmap Phase 6.1–6.5 marked Done; README updated; CMake includes new module & test target.

Vendor System Phase 7 Completion: Currency & Sink Mechanics
- Added vendor_sinks.c/h module introducing sink category tracking (repair, upgrade, trade-in, fees) with cumulative counters and grand total API.
- Implemented upgrade service API rogue_vendor_upgrade_reroll_affix supporting single or dual affix reroll (dual consumes catalyst) with gold fee scaling by player level (base 40+rarity*60 scaled by 1+0.015*level; dual cost *1.75).
- Implemented material trade-in API rogue_vendor_material_trade_in converting surplus low-tier materials to higher-tier at unfavorable 6:1 ratio plus gold fee proportional to source material base value and level scaling.
- Fee scaling helper scale_fee(base,level) (linear factor) provides early inflation counter hook tied to progression.
- Added unit test test_vendor_phase7_sinks exercising upgrade reroll (fee + sink accumulation) and trade-in path (conversion, fee) producing VENDOR_PHASE7_SINKS_OK.
- Updated core & tests CMake (added vendor_sinks.c and test target), roadmap Phase 7.1–7.5 entries marked Done with notes, README changelog appended.

Vendor System Phase 8 Partial Completion: Crafting & Gathering Integration (Implemented 8.1, 8.3–8.5)
- Added vendor_crafting_integration.c/h providing:
	* Recipe unlock purchase (rogue_vendor_purchase_recipe_unlock) with idempotent gold fee and optional callback.
	* Batch material refinement service (rogue_vendor_batch_refine) applying percentage gold service fee then invoking underlying refine op repeatedly (promoted unit aggregation).
	* Scarcity feedback loop APIs (rogue_vendor_scarcity_record / _score) accumulating material deficit scores for gathering spawn weighting.
- Implemented Phase 8 unit test (test_vendor_phase8_crafting_integration) verifying recipe unlock (single charge), scarcity accumulation (+5 then -2 -> 3), batch refine invocation path, and success token VENDOR_PHASE8_CRAFTING_INTEGRATION_OK.
- Roadmap updated: 8.1, 8.3, 8.4, 8.5 marked Done; 8.2 (gathering node boosters – optional) left X.
- README changelog appended with Phase 8 summary; CMake updated to compile new module & test target.

Vendor System Phase 9 Completion: Adaptive Behavior, Preference Boosts & Exploit Mitigation
- Added vendor_adaptive.c/h module tracking per-category purchase & sale counts and recent purchase timestamps.
- Preference adaptation: computes under-purchase score (1 - p/max_p) with smoothstep mapping to +15% max weight boost (bounded final scalar [0.85,1.15]); applied during constrained inventory generation via adaptive weight array.
- Rapid flip detection: identifies sale occurring within 15s of a purchase (single pair increments) with exponential decay (5s half-life); exploit scalar +1% per active pair capped at +10% applied to vendor sell prices inside pricing engine.
- Batch purchase gating: >8 purchases in a 10s sliding window triggers 5s cooldown (API rogue_vendor_adaptive_can_purchase / _purchase_cooldown_remaining).
- Integrated exploit scalar into vendor_pricing.c and adaptive weights into vendor.c generation path.
- Added unit test test_vendor_phase9_adaptive validating: baseline scalar ~1, boost activation for under-purchased category (>1.0 and <=1.15), exploit scalar >1 after induced flip, cooldown remaining bound, and success token VENDOR_PHASE9_ADAPTIVE_OK.
- Roadmap Phase 9.1–9.5 marked Done with parameter notes; README changelog updated; core & tests CMake updated.

Vendor System Phase 10 Partial Completion: Multi-Vendor Economy Balancing (10.1–10.3,10.5)
- Implemented vendor_econ_balance.c/h providing:
	* Global inflation index via EWMA (alpha 0.05) of observed vendor prices (tracked opportunistically in pricing engine post-scalar application pre-round).
	* Automated margin rebalance: global dynamic margin scalar adjusts linearly (-0.1*deviation) with clamp producing scalar in [0.90,1.10] to nudge prices counter to inflation drift.
	* Regional price variance: deterministic FNV1a hash of vendor biome tags produces per-biome scalar in [0.97,1.03] for subtle regional flavor without destabilizing economy.
- Integrated global + biome scalars into vendor_pricing.c after demand/scarcity/exploit factors; fed realized price into inflation tracker each computation.
- Added unit test test_vendor_phase10_balancing exercising inflation index evolution (bounded), global scalar clamp, biome scalar envelope, and prints VENDOR_PHASE10_BALANCING_OK.
- Roadmap updated (10.1–10.3,10.5 Done; 10.4 competition events left optional X); README changelog appended Phase 10 summary.

Vendor System Phase 11 Partial Completion: Performance & Memory (11.1,11.2,11.4,11.5)
Vendor System Phase 12: Determinism & RNG Governance – Added vendor_rng (seed composition streams INVENTORY/OFFERS/NEGOTIATION), integrated governed seeds into constrained inventory & offers, snapshot hash (inventory+price_modifiers+epoch) via rogue_vendor_snapshot_hash, pricing modifier hash (demand/scarcity EWMA), test_vendor_phase12_determinism ensuring replay-identical hashes and epoch divergence. Roadmap 12.1–12.5 marked Done; README updated with Phase 12 entry.
