# AI-related unit tests

# AI Phase 5.2 Flow Field test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase5_2_flow_field.c AND NOT TARGET test_ai_phase5_2_flow_field)
    add_executable(test_ai_phase5_2_flow_field unit/test_ai_phase5_2_flow_field.c)
    target_link_libraries(test_ai_phase5_2_flow_field PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase5_2_flow_field PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase5_2_flow_field PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase5_2_flow_field COMMAND test_ai_phase5_2_flow_field)
endif()

# AI Phase 5.3 Local Avoidance test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase5_3_local_avoid.c AND NOT TARGET test_ai_phase5_3_local_avoid)
    add_executable(test_ai_phase5_3_local_avoid unit/test_ai_phase5_3_local_avoid.c)
    target_link_libraries(test_ai_phase5_3_local_avoid PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase5_3_local_avoid PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase5_3_local_avoid PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase5_3_local_avoid COMMAND test_ai_phase5_3_local_avoid)
endif()

# Phase 6.1 ranged projectile firing
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase6_1_ranged_projectile.c AND NOT TARGET test_ai_phase6_1_ranged_projectile)
    add_executable(test_ai_phase6_1_ranged_projectile unit/test_ai_phase6_1_ranged_projectile.c)
    target_link_libraries(test_ai_phase6_1_ranged_projectile PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase6_1_ranged_projectile PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_ai_phase6_1_ranged_projectile PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase6_1_ranged_projectile COMMAND test_ai_phase6_1_ranged_projectile)
endif()

# AI Phase 6.2 Reactions
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase6_2_reactions.c AND NOT TARGET test_ai_phase6_2_reactions)
    add_executable(test_ai_phase6_2_reactions unit/test_ai_phase6_2_reactions.c)
    target_link_libraries(test_ai_phase6_2_reactions PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase6_2_reactions PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_ai_phase6_2_reactions PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase6_2_reactions COMMAND test_ai_phase6_2_reactions)
endif()

# Phase 6.3 Opportunistic attack
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase6_3_opportunistic.c AND NOT TARGET test_ai_phase6_3_opportunistic)
    add_executable(test_ai_phase6_3_opportunistic unit/test_ai_phase6_3_opportunistic.c)
    target_link_libraries(test_ai_phase6_3_opportunistic PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase6_3_opportunistic PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_ai_phase6_3_opportunistic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase6_3_opportunistic COMMAND test_ai_phase6_3_opportunistic)
endif()

# Phase 6.4 Kiting logic
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase6_4_kiting.c AND NOT TARGET test_ai_phase6_4_kiting)
    add_executable(test_ai_phase6_4_kiting unit/test_ai_phase6_4_kiting.c)
    target_link_libraries(test_ai_phase6_4_kiting PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase6_4_kiting PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_ai_phase6_4_kiting PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase6_4_kiting COMMAND test_ai_phase6_4_kiting)
endif()

# Phase 6.5 Focus fire
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase6_5_focus.c AND NOT TARGET test_ai_phase6_5_focus)
    add_executable(test_ai_phase6_5_focus unit/test_ai_phase6_5_focus.c)
    target_link_libraries(test_ai_phase6_5_focus PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase6_5_focus PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_ai_phase6_5_focus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase6_5_focus COMMAND test_ai_phase6_5_focus)
endif()

# Phase 6.6 Finisher execute
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase6_6_finisher.c AND NOT TARGET test_ai_phase6_6_finisher)
    add_executable(test_ai_phase6_6_finisher unit/test_ai_phase6_6_finisher.c)
    target_link_libraries(test_ai_phase6_6_finisher PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase6_6_finisher PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_ai_phase6_6_finisher PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase6_6_finisher COMMAND test_ai_phase6_6_finisher)
endif()

# Phase 6.7 decorators
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase6_7_decorators.c AND NOT TARGET test_ai_phase6_7_decorators)
    add_executable(test_ai_phase6_7_decorators unit/test_ai_phase6_7_decorators.c)
    target_link_libraries(test_ai_phase6_7_decorators PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase6_7_decorators PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_ai_phase6_7_decorators PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase6_7_decorators COMMAND test_ai_phase6_7_decorators)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_behavior_tree.c AND NOT TARGET test_ai_behavior_tree)
    add_executable(test_ai_behavior_tree unit/test_ai_behavior_tree.c)
    target_link_libraries(test_ai_behavior_tree PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_behavior_tree PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_behavior_tree COMMAND test_ai_behavior_tree)
endif()

# AI Phase 1.4-1.7 scheduler/trace + RNG test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase1_scheduler_trace.c AND NOT TARGET test_ai_phase1_scheduler_trace)
    add_executable(test_ai_phase1_scheduler_trace unit/test_ai_phase1_scheduler_trace.c)
    target_link_libraries(test_ai_phase1_scheduler_trace PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase1_scheduler_trace PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase1_scheduler_trace COMMAND test_ai_phase1_scheduler_trace)
endif()

# AI Phase 2 blackboard extensions test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase2_blackboard.c AND NOT TARGET test_ai_phase2_blackboard)
    add_executable(test_ai_phase2_blackboard unit/test_ai_phase2_blackboard.c)
    target_link_libraries(test_ai_phase2_blackboard PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase2_blackboard PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase2_blackboard COMMAND test_ai_phase2_blackboard)
endif()

# AI Phase 3 perception system test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase3_perception.c AND NOT TARGET test_ai_phase3_perception)
    add_executable(test_ai_phase3_perception unit/test_ai_phase3_perception.c)
    target_link_libraries(test_ai_phase3_perception PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase3_perception PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase3_perception COMMAND test_ai_phase3_perception)
endif()

# AI Phase 4 node library test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_nodes.c AND NOT TARGET test_ai_phase4_nodes)
    add_executable(test_ai_phase4_nodes unit/test_ai_phase4_nodes.c)
    target_link_libraries(test_ai_phase4_nodes PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_nodes PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_nodes COMMAND test_ai_phase4_nodes)
endif()

# AI Phase 4 tactical/strafe test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_tactical.c AND NOT TARGET test_ai_phase4_tactical)
    add_executable(test_ai_phase4_tactical unit/test_ai_phase4_tactical.c)
    target_link_libraries(test_ai_phase4_tactical PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_tactical PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_tactical COMMAND test_ai_phase4_tactical)
endif()

# AI Phase 4 cover seek test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_cover.c AND NOT TARGET test_ai_phase4_cover)
    add_executable(test_ai_phase4_cover unit/test_ai_phase4_cover.c)
    target_link_libraries(test_ai_phase4_cover PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_cover PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_cover COMMAND test_ai_phase4_cover)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_retry.c AND NOT TARGET test_ai_phase4_retry)
    add_executable(test_ai_phase4_retry unit/test_ai_phase4_retry.c)
    target_link_libraries(test_ai_phase4_retry PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_retry PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_retry COMMAND test_ai_phase4_retry)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase5_enemy_integration.c AND NOT TARGET test_ai_phase5_enemy_integration)
    add_executable(test_ai_phase5_enemy_integration unit/test_ai_phase5_enemy_integration.c)
    target_link_libraries(test_ai_phase5_enemy_integration PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase5_enemy_integration PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase5_enemy_integration COMMAND test_ai_phase5_enemy_integration)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase9_budget.c AND NOT TARGET test_ai_phase9_budget)
    add_executable(test_ai_phase9_budget unit/test_ai_phase9_budget.c)
    target_link_libraries(test_ai_phase9_budget PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase9_budget PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase9_budget COMMAND test_ai_phase9_budget)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase9_incremental_lod.c AND NOT TARGET test_ai_phase9_incremental_lod)
    add_executable(test_ai_phase9_incremental_lod unit/test_ai_phase9_incremental_lod.c)
    target_link_libraries(test_ai_phase9_incremental_lod PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase9_incremental_lod PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase9_incremental_lod COMMAND test_ai_phase9_incremental_lod)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase9_agent_pool.c AND NOT TARGET test_ai_phase9_agent_pool)
    add_executable(test_ai_phase9_agent_pool unit/test_ai_phase9_agent_pool.c)
    target_link_libraries(test_ai_phase9_agent_pool PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase9_agent_pool PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase9_agent_pool COMMAND test_ai_phase9_agent_pool)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase10_debug.c AND NOT TARGET test_ai_phase10_debug)
    add_executable(test_ai_phase10_debug unit/test_ai_phase10_debug.c)
    target_link_libraries(test_ai_phase10_debug PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase10_debug PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase10_debug COMMAND test_ai_phase10_debug)
endif()

# AI Phase 11 tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_core_nodes.c AND NOT TARGET test_ai_phase11_core_nodes)
    add_executable(test_ai_phase11_core_nodes unit/test_ai_phase11_core_nodes.c)
    target_link_libraries(test_ai_phase11_core_nodes PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_core_nodes PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_core_nodes COMMAND test_ai_phase11_core_nodes)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_blackboard_fuzz.c AND NOT TARGET test_ai_phase11_blackboard_fuzz)
    add_executable(test_ai_phase11_blackboard_fuzz unit/test_ai_phase11_blackboard_fuzz.c)
    target_link_libraries(test_ai_phase11_blackboard_fuzz PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_blackboard_fuzz PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_blackboard_fuzz COMMAND test_ai_phase11_blackboard_fuzz)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_scenario.c AND NOT TARGET test_ai_phase11_scenario)
    add_executable(test_ai_phase11_scenario unit/test_ai_phase11_scenario.c)
    target_link_libraries(test_ai_phase11_scenario PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_scenario PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_scenario COMMAND test_ai_phase11_scenario)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_repro_trace.c AND NOT TARGET test_ai_phase11_repro_trace)
    add_executable(test_ai_phase11_repro_trace unit/test_ai_phase11_repro_trace.c)
    target_link_libraries(test_ai_phase11_repro_trace PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_repro_trace PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_repro_trace COMMAND test_ai_phase11_repro_trace)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_perf_guard.c AND NOT TARGET test_ai_phase11_perf_guard)
    add_executable(test_ai_phase11_perf_guard unit/test_ai_phase11_perf_guard.c)
    target_link_libraries(test_ai_phase11_perf_guard PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_perf_guard PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_perf_guard COMMAND test_ai_phase11_perf_guard)
endif()

# AI Phase 1.8+ tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase1_8_plus.c AND NOT TARGET test_ai_phase1_8_plus)
    add_executable(test_ai_phase1_8_plus unit/test_ai_phase1_8_plus.c)
    target_link_libraries(test_ai_phase1_8_plus PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase1_8_plus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase1_8_plus COMMAND test_ai_phase1_8_plus)
endif()

# AI Phase 5 path smoothing and stuck detection scaffold test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase5_path_smoothing_and_stuck.c AND NOT TARGET test_ai_phase5_path_smoothing_and_stuck)
    add_executable(test_ai_phase5_path_smoothing_and_stuck unit/test_ai_phase5_path_smoothing_and_stuck.c)
    target_link_libraries(test_ai_phase5_path_smoothing_and_stuck PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase5_path_smoothing_and_stuck PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase5_path_smoothing_and_stuck PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase5_path_smoothing_and_stuck COMMAND test_ai_phase5_path_smoothing_and_stuck)
endif()

# AI Phase 5 stuck detection decorator focused test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase5_stuck_detect.c AND NOT TARGET test_ai_phase5_stuck_detect)
    add_executable(test_ai_phase5_stuck_detect unit/test_ai_phase5_stuck_detect.c)
    target_link_libraries(test_ai_phase5_stuck_detect PRIVATE rogue_core)
    target_compile_definitions(test_ai_phase5_stuck_detect PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase5_stuck_detect PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase5_stuck_detect COMMAND test_ai_phase5_stuck_detect)
endif()
