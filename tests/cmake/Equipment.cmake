# Equipment Test Suite

# Equipment Phase 5 sockets test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase5_sockets.c AND NOT TARGET test_equipment_phase5_sockets)
    add_executable(test_equipment_phase5_sockets unit/test_equipment_phase5_sockets.c)
    target_link_libraries(test_equipment_phase5_sockets PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_sockets PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_sockets COMMAND test_equipment_phase5_sockets)
endif()

# Equipment Phase 5 gems test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase5_gems.c AND NOT TARGET test_equipment_phase5_gems)
    add_executable(test_equipment_phase5_gems unit/test_equipment_phase5_gems.c)
    target_link_libraries(test_equipment_phase5_gems PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_gems PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_gems COMMAND test_equipment_phase5_gems)
    set_tests_properties(test_equipment_phase5_gems PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
endif()

    add_executable(test_equipment_phase5_enchant_reforge unit/test_equipment_phase5_enchant_reforge.c)
    target_link_libraries(test_equipment_phase5_enchant_reforge PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_enchant_reforge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_enchant_reforge COMMAND test_equipment_phase5_enchant_reforge)
    set_tests_properties(test_equipment_phase5_enchant_reforge PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    add_executable(test_equipment_phase5_protective_seal unit/test_equipment_phase5_protective_seal.c)
    target_link_libraries(test_equipment_phase5_protective_seal PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_protective_seal PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_protective_seal COMMAND test_equipment_phase5_protective_seal)
    set_tests_properties(test_equipment_phase5_protective_seal PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    add_executable(test_equipment_phase6_proc_engine unit/test_equipment_phase6_proc_engine.c)
    target_link_libraries(test_equipment_phase6_proc_engine PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase6_proc_engine PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase6_proc_engine COMMAND test_equipment_phase6_proc_engine)
    set_tests_properties(test_equipment_phase6_proc_engine PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    # Extended proc engine stacking/order/telemetry test (Phase 6.4-6.7)
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase6_proc_engine_extended.c AND NOT TARGET test_equipment_phase6_proc_engine_extended)
        add_executable(test_equipment_phase6_proc_engine_extended unit/test_equipment_phase6_proc_engine_extended.c)
        target_link_libraries(test_equipment_phase6_proc_engine_extended PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase6_proc_engine_extended PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase6_proc_engine_extended COMMAND test_equipment_phase6_proc_engine_extended)
        set_tests_properties(test_equipment_phase6_proc_engine_extended PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    endif()
        add_executable(test_equipment_phase7_defensive unit/test_equipment_phase7_defensive.c)
        target_link_libraries(test_equipment_phase7_defensive PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_defensive PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_defensive COMMAND test_equipment_phase7_defensive)
        set_tests_properties(test_equipment_phase7_defensive PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_block_affixes unit/test_equipment_phase7_block_affixes.c)
        target_link_libraries(test_equipment_phase7_block_affixes PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_block_affixes PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_block_affixes COMMAND test_equipment_phase7_block_affixes)
        set_tests_properties(test_equipment_phase7_block_affixes PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_conversion_reflect unit/test_equipment_phase7_conversion_reflect.c)
        target_link_libraries(test_equipment_phase7_conversion_reflect PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_conversion_reflect PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_conversion_reflect COMMAND test_equipment_phase7_conversion_reflect)
        set_tests_properties(test_equipment_phase7_conversion_reflect PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_affix_parsing_newstats unit/test_equipment_phase7_affix_parsing_newstats.c)
        target_link_libraries(test_equipment_phase7_affix_parsing_newstats PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_affix_parsing_newstats PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_affix_parsing_newstats COMMAND test_equipment_phase7_affix_parsing_newstats)
        set_tests_properties(test_equipment_phase7_affix_parsing_newstats PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_reactive_shield unit/test_equipment_phase7_reactive_shield.c)
        target_link_libraries(test_equipment_phase7_reactive_shield PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_reactive_shield PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_reactive_shield COMMAND test_equipment_phase7_reactive_shield)
        set_tests_properties(test_equipment_phase7_reactive_shield PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase8_durability_model unit/test_equipment_phase8_durability_model.c)
        target_link_libraries(test_equipment_phase8_durability_model PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase8_durability_model PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase8_durability_model COMMAND test_equipment_phase8_durability_model)
        set_tests_properties(test_equipment_phase8_durability_model PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase8_repair_cost unit/test_equipment_phase8_repair_cost.c)
        target_link_libraries(test_equipment_phase8_repair_cost PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase8_repair_cost PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase8_repair_cost COMMAND test_equipment_phase8_repair_cost)
        set_tests_properties(test_equipment_phase8_repair_cost PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase8_salvage_fracture unit/test_equipment_phase8_salvage_fracture.c)
        target_link_libraries(test_equipment_phase8_salvage_fracture PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase8_salvage_fracture PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase8_salvage_fracture COMMAND test_equipment_phase8_salvage_fracture)
        set_tests_properties(test_equipment_phase8_salvage_fracture PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 9 Loadout Optimization tests
        add_executable(test_equipment_phase9_loadout_opt unit/test_equipment_phase9_loadout_opt.c)
        target_link_libraries(test_equipment_phase9_loadout_opt PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase9_loadout_opt PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase9_loadout_opt COMMAND test_equipment_phase9_loadout_opt)
        set_tests_properties(test_equipment_phase9_loadout_opt PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 10.4 Quality metric test
        add_executable(test_equipment_phase10_quality unit/test_equipment_phase10_quality.c)
        target_link_libraries(test_equipment_phase10_quality PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase10_quality PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase10_quality COMMAND test_equipment_phase10_quality)
        set_tests_properties(test_equipment_phase10_quality PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 10.1-10.3 crafting pipeline test (upgrade stones, affix transfer, fusion)
        add_executable(test_equipment_phase10_crafting unit/test_equipment_phase10_crafting.c)
        target_link_libraries(test_equipment_phase10_crafting PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase10_crafting PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase10_crafting COMMAND test_equipment_phase10_crafting)
        set_tests_properties(test_equipment_phase10_crafting PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 10.5 crafting success chance scaling test (optional)
        add_executable(test_equipment_phase10_crafting_success unit/test_equipment_phase10_crafting_success.c)
        target_link_libraries(test_equipment_phase10_crafting_success PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase10_crafting_success PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase10_crafting_success COMMAND test_equipment_phase10_crafting_success)
        set_tests_properties(test_equipment_phase10_crafting_success PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 11 analytics snapshot & histogram test
        add_executable(test_equipment_phase11_analytics unit/test_equipment_phase11_analytics.c)
        target_link_libraries(test_equipment_phase11_analytics PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase11_analytics PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase11_analytics COMMAND test_equipment_phase11_analytics)
        set_tests_properties(test_equipment_phase11_analytics PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 11.5-11.6 balance analytics & A/B harness tests
        add_executable(test_equipment_phase11_balance unit/test_equipment_phase11_balance.c)
        target_link_libraries(test_equipment_phase11_balance PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase11_balance PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase11_balance COMMAND test_equipment_phase11_balance)
        set_tests_properties(test_equipment_phase11_balance PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 12 initial UI helpers (panel, layered tooltip, proc preview)
        add_executable(test_equipment_phase12_ui unit/test_equipment_phase12_ui.c)
        target_link_libraries(test_equipment_phase12_ui PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase12_ui PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase12_ui COMMAND test_equipment_phase12_ui)
        set_tests_properties(test_equipment_phase12_ui PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 13 equipment persistence & hash
        add_executable(test_equipment_phase13_persistence unit/test_equipment_phase13_persistence.c)
        target_link_libraries(test_equipment_phase13_persistence PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase13_persistence PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase13_persistence COMMAND test_equipment_phase13_persistence)
        set_tests_properties(test_equipment_phase13_persistence PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 18.4 stress combo test (max sockets + gems + set + runeword)
        if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase18_stress_combo.c AND NOT TARGET test_equipment_phase18_stress_combo)
            add_executable(test_equipment_phase18_stress_combo unit/test_equipment_phase18_stress_combo.c)
            target_link_libraries(test_equipment_phase18_stress_combo PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase18_stress_combo PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase18_stress_combo COMMAND test_equipment_phase18_stress_combo)
            set_tests_properties(test_equipment_phase18_stress_combo PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            set_tests_properties(test_equipment_phase18_stress_combo PROPERTIES LABELS "EQUIP_GATES;EQUIP_PHASE18")
        endif()

        # Phase 18.5 mutation / corruption robustness test
        if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase18_mutation.c AND NOT TARGET test_equipment_phase18_mutation)
            add_executable(test_equipment_phase18_mutation unit/test_equipment_phase18_mutation.c)
            target_link_libraries(test_equipment_phase18_mutation PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase18_mutation PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase18_mutation COMMAND test_equipment_phase18_mutation)
            set_tests_properties(test_equipment_phase18_mutation PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            set_tests_properties(test_equipment_phase18_mutation PROPERTIES LABELS "EQUIP_GATES;EQUIP_PHASE18")
        endif()

        # Phase 16.1 equipment item definition JSON tooling test
        add_executable(test_equipment_phase16_itemdefs_json unit/test_equipment_phase16_itemdefs_json.c)
        target_link_libraries(test_equipment_phase16_itemdefs_json PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase16_itemdefs_json PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase16_itemdefs_json COMMAND test_equipment_phase16_itemdefs_json)
        set_tests_properties(test_equipment_phase16_itemdefs_json PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 16.2 set builder + preview test
        add_executable(test_equipment_phase16_set_builder unit/test_equipment_phase16_set_builder.c)
        target_link_libraries(test_equipment_phase16_set_builder PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase16_set_builder PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase16_set_builder COMMAND test_equipment_phase16_set_builder)
        set_tests_properties(test_equipment_phase16_set_builder PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 16.3 proc designer JSON tooling test
        add_executable(test_equipment_phase16_proc_designer unit/test_equipment_phase16_proc_designer.c)
        target_link_libraries(test_equipment_phase16_proc_designer PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase16_proc_designer PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase16_proc_designer COMMAND test_equipment_phase16_proc_designer)
        set_tests_properties(test_equipment_phase16_proc_designer PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 16.4 runeword validator
        add_executable(test_equipment_phase16_runeword_validator unit/test_equipment_phase16_runeword_validator.c)
        target_link_libraries(test_equipment_phase16_runeword_validator PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase16_runeword_validator PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase16_runeword_validator COMMAND test_equipment_phase16_runeword_validator)
        set_tests_properties(test_equipment_phase16_runeword_validator PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 16.5 budget analyzer report generator
        add_executable(test_equipment_phase16_budget_analyzer unit/test_equipment_phase16_budget_analyzer.c)
        target_link_libraries(test_equipment_phase16_budget_analyzer PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase16_budget_analyzer PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase16_budget_analyzer COMMAND test_equipment_phase16_budget_analyzer)
        set_tests_properties(test_equipment_phase16_budget_analyzer PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 16.6 analyzer boundary + validator edge tests
        add_executable(test_equipment_phase16_analyzer_boundaries unit/test_equipment_phase16_analyzer_boundaries.c)
        target_link_libraries(test_equipment_phase16_analyzer_boundaries PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase16_analyzer_boundaries PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase16_analyzer_boundaries COMMAND test_equipment_phase16_analyzer_boundaries)
        set_tests_properties(test_equipment_phase16_analyzer_boundaries PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 17.1 schema docs exporter
        add_executable(test_equipment_phase17_schema_docs unit/test_equipment_phase17_schema_docs.c)
        target_link_libraries(test_equipment_phase17_schema_docs PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase17_schema_docs PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase17_schema_docs COMMAND test_equipment_phase17_schema_docs)
        set_tests_properties(test_equipment_phase17_schema_docs PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            # Phase 17.2 equipment hot reload test
            add_executable(test_equipment_phase17_hot_reload unit/test_equipment_phase17_hot_reload.c)
            target_link_libraries(test_equipment_phase17_hot_reload PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase17_hot_reload PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase17_hot_reload COMMAND test_equipment_phase17_hot_reload)
            set_tests_properties(test_equipment_phase17_hot_reload PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            # Phase 17.5 early: hot reload determinism hash test
            add_executable(test_equipment_phase17_hot_reload_hash unit/test_equipment_phase17_hot_reload_hash.c)
            target_link_libraries(test_equipment_phase17_hot_reload_hash PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase17_hot_reload_hash PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase17_hot_reload_hash COMMAND test_equipment_phase17_hot_reload_hash)
            set_tests_properties(test_equipment_phase17_hot_reload_hash PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            # Phase 17.3 sandbox scripting test
            add_executable(test_equipment_phase17_sandbox_script unit/test_equipment_phase17_sandbox_script.c)
            target_link_libraries(test_equipment_phase17_sandbox_script PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase17_sandbox_script PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase17_sandbox_script COMMAND test_equipment_phase17_sandbox_script)
            set_tests_properties(test_equipment_phase17_sandbox_script PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            # Phase 17.4 sets diff tool test
            add_executable(test_equipment_phase17_sets_diff unit/test_equipment_phase17_sets_diff.c)
            target_link_libraries(test_equipment_phase17_sets_diff PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase17_sets_diff PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase17_sets_diff COMMAND test_equipment_phase17_sets_diff)
            set_tests_properties(test_equipment_phase17_sets_diff PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

            # Phase 18.1 snapshot golden master test
            add_executable(test_equipment_phase18_snapshot unit/test_equipment_phase18_snapshot.c)
            target_link_libraries(test_equipment_phase18_snapshot PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase18_snapshot PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase18_snapshot COMMAND test_equipment_phase18_snapshot)
            set_tests_properties(test_equipment_phase18_snapshot PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            set_tests_properties(test_equipment_phase18_snapshot PROPERTIES LABELS "EQUIP_GATES;EQUIP_PHASE18")

            # Phase 18.2 fuzz equip/un-equip sequences test
            add_executable(test_equipment_phase18_fuzz unit/test_equipment_phase18_fuzz.c)
            target_link_libraries(test_equipment_phase18_fuzz PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase18_fuzz PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase18_fuzz COMMAND test_equipment_phase18_fuzz)
            set_tests_properties(test_equipment_phase18_fuzz PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            set_tests_properties(test_equipment_phase18_fuzz PROPERTIES LABELS "EQUIP_GATES;EQUIP_PHASE18")

            # Phase 18.3 statistical proc rate test
            add_executable(test_equipment_phase18_proc_stats unit/test_equipment_phase18_proc_stats.c)
            target_link_libraries(test_equipment_phase18_proc_stats PRIVATE rogue_core)
            if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
                target_compile_definitions(test_equipment_phase18_proc_stats PRIVATE ROGUE_HAVE_SDL=1)
            endif()
            add_test(NAME test_equipment_phase18_proc_stats COMMAND test_equipment_phase18_proc_stats)
            set_tests_properties(test_equipment_phase18_proc_stats PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
            set_tests_properties(test_equipment_phase18_proc_stats PROPERTIES LABELS "EQUIP_GATES;EQUIP_PHASE18")



if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase13_slot_migration.c AND NOT TARGET test_equipment_phase13_slot_migration)
    add_executable(test_equipment_phase13_slot_migration unit/test_equipment_phase13_slot_migration.c)
    target_link_libraries(test_equipment_phase13_slot_migration PRIVATE rogue_core)
    if(ROGUE_BUILD_WITH_SDL2)
        target_compile_definitions(test_equipment_phase13_slot_migration PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase13_slot_migration COMMAND test_equipment_phase13_slot_migration)
endif()




# Phase 14.4 parallel optimization test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase14_parallel.c AND NOT TARGET test_equipment_phase14_parallel)
    add_executable(test_equipment_phase14_parallel unit/test_equipment_phase14_parallel.c)
    target_link_libraries(test_equipment_phase14_parallel PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase14_parallel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase14_parallel COMMAND test_equipment_phase14_parallel)
endif()

# Phase 15 integrity & anti-duplication test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase15_integrity.c AND NOT TARGET test_equipment_phase15_integrity)
    add_executable(test_equipment_phase15_integrity unit/test_equipment_phase15_integrity.c)
    target_link_libraries(test_equipment_phase15_integrity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase15_integrity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase15_integrity COMMAND test_equipment_phase15_integrity)
endif()

# Phase 15.4–15.6 replay auditor & blacklist tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase15_replay_auditor.c AND NOT TARGET test_equipment_phase15_replay_auditor)
    add_executable(test_equipment_phase15_replay_auditor unit/test_equipment_phase15_replay_auditor.c)
    target_link_libraries(test_equipment_phase15_replay_auditor PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase15_replay_auditor PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase15_replay_auditor COMMAND test_equipment_phase15_replay_auditor)
endif()

# Phase 14 equipment expanded stat pipeline test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase14_extended.c AND NOT TARGET test_equipment_phase14_extended)
    add_executable(test_equipment_phase14_extended unit/test_equipment_phase14_extended.c)
    target_link_libraries(test_equipment_phase14_extended PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase14_extended PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase14_extended COMMAND test_equipment_phase14_extended)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase14_perf.c AND NOT TARGET test_equipment_phase14_perf)
    add_executable(test_equipment_phase14_perf unit/test_equipment_phase14_perf.c)
    target_link_libraries(test_equipment_phase14_perf PRIVATE rogue_core)
    if(ROGUE_BUILD_WITH_SDL2)
        target_compile_definitions(test_equipment_phase14_perf PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase14_perf COMMAND test_equipment_phase14_perf)
endif()

# Equipment System Phase 1 slot expansion test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase1_slots.c AND NOT TARGET test_equipment_phase1_slots)
    add_executable(test_equipment_phase1_slots unit/test_equipment_phase1_slots.c)
    target_link_libraries(test_equipment_phase1_slots PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase1_slots PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase1_slots COMMAND test_equipment_phase1_slots)
endif()

# Equipment System Phase 1 cosmetic transmog test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase1_transmog.c AND NOT TARGET test_equipment_phase1_transmog)
    add_executable(test_equipment_phase1_transmog unit/test_equipment_phase1_transmog.c)
    target_link_libraries(test_equipment_phase1_transmog PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase1_transmog PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase1_transmog COMMAND test_equipment_phase1_transmog)
endif()

# Equipment System Phase 1.7 persistence & atomicity test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase1_persistence.c AND NOT TARGET test_equipment_phase1_persistence)
    add_executable(test_equipment_phase1_persistence unit/test_equipment_phase1_persistence.c)
    target_link_libraries(test_equipment_phase1_persistence PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase1_persistence PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase1_persistence COMMAND test_equipment_phase1_persistence)
endif()

# Equipment System Phase 2 stat cache layering & fingerprint test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase2_stat_cache.c AND NOT TARGET test_equipment_phase2_stat_cache)
    add_executable(test_equipment_phase2_stat_cache unit/test_equipment_phase2_stat_cache.c)
    target_link_libraries(test_equipment_phase2_stat_cache PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase2_stat_cache PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase2_stat_cache COMMAND test_equipment_phase2_stat_cache)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase2_affix_layers.c AND NOT TARGET test_equipment_phase2_affix_layers)
    add_executable(test_equipment_phase2_affix_layers unit/test_equipment_phase2_affix_layers.c)
    target_link_libraries(test_equipment_phase2_affix_layers PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase2_affix_layers PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase2_affix_layers COMMAND test_equipment_phase2_affix_layers)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase2_resists.c AND NOT TARGET test_equipment_phase2_resists)
    add_executable(test_equipment_phase2_resists unit/test_equipment_phase2_resists.c)
    target_link_libraries(test_equipment_phase2_resists PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase2_resists PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase2_resists COMMAND test_equipment_phase2_resists)
endif()

# Equipment System Phase 3 item level & budget governance test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase3_budget.c AND NOT TARGET test_equipment_phase3_budget)
    add_executable(test_equipment_phase3_budget unit/test_equipment_phase3_budget.c)
    target_link_libraries(test_equipment_phase3_budget PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase3_budget PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase3_budget COMMAND test_equipment_phase3_budget)
endif()

# Equipment System Phase 4.1 implicit layer test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase4_1_implicits.c AND NOT TARGET test_equipment_phase4_1_implicits)
    add_executable(test_equipment_phase4_1_implicits unit/test_equipment_phase4_1_implicits.c)
    target_link_libraries(test_equipment_phase4_1_implicits PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase4_1_implicits PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase4_1_implicits COMMAND test_equipment_phase4_1_implicits)
endif()

# Equipment System Phase 4.2 unique layer test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase4_2_uniques.c AND NOT TARGET test_equipment_phase4_2_uniques)
    add_executable(test_equipment_phase4_2_uniques unit/test_equipment_phase4_2_uniques.c)
    target_link_libraries(test_equipment_phase4_2_uniques PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase4_2_uniques PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase4_2_uniques COMMAND test_equipment_phase4_2_uniques)
endif()

# Equipment System Phase 4.3-4.6 sets & runewords precedence test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase4_3_5_sets_runewords.c AND NOT TARGET test_equipment_phase4_3_5_sets_runewords)
    add_executable(test_equipment_phase4_3_5_sets_runewords unit/test_equipment_phase4_3_5_sets_runewords.c)
    target_link_libraries(test_equipment_phase4_3_5_sets_runewords PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase4_3_5_sets_runewords PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase4_3_5_sets_runewords COMMAND test_equipment_phase4_3_5_sets_runewords)
endif()

# Explicitly add equipment stat bonus test (14.2 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_stat_bonus.c AND NOT TARGET test_equipment_stat_bonus)
    add_executable(test_equipment_stat_bonus unit/test_equipment_stat_bonus.c)
    target_link_libraries(test_equipment_stat_bonus PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_stat_bonus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_stat_bonus COMMAND test_equipment_stat_bonus)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_unequip_delta.c AND NOT TARGET test_equipment_unequip_delta)
    add_executable(test_equipment_unequip_delta unit/test_equipment_unequip_delta.c)
    target_link_libraries(test_equipment_unequip_delta PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_unequip_delta PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_unequip_delta COMMAND test_equipment_unequip_delta)
endif()
