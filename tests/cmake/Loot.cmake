# Loot system tests
# All tests related to loot generation, filtering, tooltips, and management

# Basic loot functionality tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_filter_predicates.c AND NOT TARGET test_loot_filter_predicates)
    add_executable(test_loot_filter_predicates unit/test_loot_filter_predicates.c)
    target_link_libraries(test_loot_filter_predicates PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_filter_predicates PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_filter_predicates COMMAND test_loot_filter_predicates)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_filter_basic.c AND NOT TARGET test_loot_filter_basic)
    add_executable(test_loot_filter_basic unit/test_loot_filter_basic.c)
    target_link_libraries(test_loot_filter_basic PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_filter_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_filter_basic COMMAND test_loot_filter_basic)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_logging_toggle.c AND NOT TARGET test_loot_logging_toggle)
    add_executable(test_loot_logging_toggle unit/test_loot_logging_toggle.c)
    target_link_libraries(test_loot_logging_toggle PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_logging_toggle PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_logging_toggle COMMAND test_loot_logging_toggle)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_rarity_parse.c AND NOT TARGET test_loot_rarity_parse)
    add_executable(test_loot_rarity_parse unit/test_loot_rarity_parse.c)
    target_link_libraries(test_loot_rarity_parse PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_rarity_parse PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_rarity_parse COMMAND test_loot_rarity_parse)
endif()

# Loot tooltip tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooltip_compare.c AND NOT TARGET test_loot_tooltip_compare)
    add_executable(test_loot_tooltip_compare unit/test_loot_tooltip_compare.c)
    target_link_libraries(test_loot_tooltip_compare PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_tooltip_compare PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooltip_compare COMMAND test_loot_tooltip_compare)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooltip_basic.c AND NOT TARGET test_loot_tooltip_basic)
    add_executable(test_loot_tooltip_basic unit/test_loot_tooltip_basic.c)
    target_link_libraries(test_loot_tooltip_basic PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_tooltip_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooltip_basic COMMAND test_loot_tooltip_basic)
endif()

# Loot phase tests - Core progression
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase1_item_defs.c AND NOT TARGET test_loot_phase1_item_defs)
    add_executable(test_loot_phase1_item_defs unit/test_loot_phase1_item_defs.c)
    target_link_libraries(test_loot_phase1_item_defs PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase1_item_defs PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase1_item_defs COMMAND test_loot_phase1_item_defs)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase1_tables.c AND NOT TARGET test_loot_phase1_tables)
    add_executable(test_loot_phase1_tables unit/test_loot_phase1_tables.c)
    target_link_libraries(test_loot_phase1_tables PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase1_tables PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase1_tables COMMAND test_loot_phase1_tables)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase2_spawn.c AND NOT TARGET test_loot_phase2_spawn)
    add_executable(test_loot_phase2_spawn unit/test_loot_phase2_spawn.c)
    target_link_libraries(test_loot_phase2_spawn PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase2_spawn PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase2_spawn COMMAND test_loot_phase2_spawn)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase3_pickup.c AND NOT TARGET test_loot_phase3_pickup)
    add_executable(test_loot_phase3_pickup unit/test_loot_phase3_pickup.c)
    target_link_libraries(test_loot_phase3_pickup PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase3_pickup PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase3_pickup COMMAND test_loot_phase3_pickup)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase4_inventory_persistence.c AND NOT TARGET test_loot_phase4_inventory_persistence)
    add_executable(test_loot_phase4_inventory_persistence unit/test_loot_phase4_inventory_persistence.c)
    target_link_libraries(test_loot_phase4_inventory_persistence PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase4_inventory_persistence PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase4_inventory_persistence COMMAND test_loot_phase4_inventory_persistence)
endif()

# Loot phase 5 - Rarity system
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_dynamic_rarity_weights.c AND NOT TARGET test_loot_phase5_dynamic_rarity_weights)
    add_executable(test_loot_phase5_dynamic_rarity_weights unit/test_loot_phase5_dynamic_rarity_weights.c)
    target_link_libraries(test_loot_phase5_dynamic_rarity_weights PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase5_dynamic_rarity_weights PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_dynamic_rarity_weights COMMAND test_loot_phase5_dynamic_rarity_weights)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_adv.c AND NOT TARGET test_loot_phase5_rarity_adv)
    add_executable(test_loot_phase5_rarity_adv unit/test_loot_phase5_rarity_adv.c)
    target_link_libraries(test_loot_phase5_rarity_adv PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase5_rarity_adv PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_adv COMMAND test_loot_phase5_rarity_adv)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_distribution.c AND NOT TARGET test_loot_phase5_rarity_distribution)
    add_executable(test_loot_phase5_rarity_distribution unit/test_loot_phase5_rarity_distribution.c)
    target_link_libraries(test_loot_phase5_rarity_distribution PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase5_rarity_distribution PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_distribution COMMAND test_loot_phase5_rarity_distribution)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_parse.c AND NOT TARGET test_loot_phase5_rarity_parse)
    add_executable(test_loot_phase5_rarity_parse unit/test_loot_phase5_rarity_parse.c)
    target_link_libraries(test_loot_phase5_rarity_parse PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase5_rarity_parse PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_parse COMMAND test_loot_phase5_rarity_parse)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_roll.c AND NOT TARGET test_loot_phase5_rarity_roll)
    add_executable(test_loot_phase5_rarity_roll unit/test_loot_phase5_rarity_roll.c)
    target_link_libraries(test_loot_phase5_rarity_roll PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase5_rarity_roll PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_roll COMMAND test_loot_phase5_rarity_roll)
endif()

# Loot phase 6 - Analytics and telemetry
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase6_histogram.c AND NOT TARGET test_loot_phase6_histogram)
    add_executable(test_loot_phase6_histogram unit/test_loot_phase6_histogram.c)
    target_link_libraries(test_loot_phase6_histogram PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase6_histogram PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase6_histogram COMMAND test_loot_phase6_histogram)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase6_merge_despawn.c AND NOT TARGET test_loot_phase6_merge_despawn)
    add_executable(test_loot_phase6_merge_despawn unit/test_loot_phase6_merge_despawn.c)
    target_link_libraries(test_loot_phase6_merge_despawn PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase6_merge_despawn PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase6_merge_despawn COMMAND test_loot_phase6_merge_despawn)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase6_stats_window.c AND NOT TARGET test_loot_phase6_stats_window)
    add_executable(test_loot_phase6_stats_window unit/test_loot_phase6_stats_window.c)
    target_link_libraries(test_loot_phase6_stats_window PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase6_stats_window PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase6_stats_window COMMAND test_loot_phase6_stats_window)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase6_telemetry.c AND NOT TARGET test_loot_phase6_telemetry)
    add_executable(test_loot_phase6_telemetry unit/test_loot_phase6_telemetry.c)
    target_link_libraries(test_loot_phase6_telemetry PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase6_telemetry PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase6_telemetry COMMAND test_loot_phase6_telemetry)
endif()

# Loot phase 8 - Generation system
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase8_generation_basic.c AND NOT TARGET test_loot_phase8_generation_basic)
    add_executable(test_loot_phase8_generation_basic unit/test_loot_phase8_generation_basic.c)
    target_link_libraries(test_loot_phase8_generation_basic PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase8_generation_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase8_generation_basic COMMAND test_loot_phase8_generation_basic)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase8_generation_quality.c AND NOT TARGET test_loot_phase8_generation_quality)
    add_executable(test_loot_phase8_generation_quality unit/test_loot_phase8_generation_quality.c)
    target_link_libraries(test_loot_phase8_generation_quality PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase8_generation_quality PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase8_generation_quality COMMAND test_loot_phase8_generation_quality)
endif()

# Loot phase 9 - Adaptive and tuning systems
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_drop_rates.c AND NOT TARGET test_loot_phase9_drop_rates)
    add_executable(test_loot_phase9_drop_rates unit/test_loot_phase9_drop_rates.c)
    target_link_libraries(test_loot_phase9_drop_rates PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase9_drop_rates PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_drop_rates COMMAND test_loot_phase9_drop_rates)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_adaptive.c AND NOT TARGET test_loot_phase9_adaptive)
    add_executable(test_loot_phase9_adaptive unit/test_loot_phase9_adaptive.c)
    target_link_libraries(test_loot_phase9_adaptive PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase9_adaptive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_adaptive COMMAND test_loot_phase9_adaptive)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_preference.c AND NOT TARGET test_loot_phase9_preference)
    add_executable(test_loot_phase9_preference unit/test_loot_phase9_preference.c)
    target_link_libraries(test_loot_phase9_preference PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase9_preference PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_preference COMMAND test_loot_phase9_preference)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_pity.c AND NOT TARGET test_loot_phase9_pity)
    add_executable(test_loot_phase9_pity unit/test_loot_phase9_pity.c)
    target_link_libraries(test_loot_phase9_pity PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase9_pity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_pity COMMAND test_loot_phase9_pity)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_tuning_console.c AND NOT TARGET test_loot_phase9_tuning_console)
    add_executable(test_loot_phase9_tuning_console unit/test_loot_phase9_tuning_console.c)
    target_link_libraries(test_loot_phase9_tuning_console PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase9_tuning_console PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_tuning_console COMMAND test_loot_phase9_tuning_console)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_session_metrics.c AND NOT TARGET test_loot_phase9_session_metrics)
    add_executable(test_loot_phase9_session_metrics unit/test_loot_phase9_session_metrics.c)
    target_link_libraries(test_loot_phase9_session_metrics PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase9_session_metrics PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_session_metrics COMMAND test_loot_phase9_session_metrics)
endif()

# Loot phase 16 - Advanced modes
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase16_personal_mode.c AND NOT TARGET test_loot_phase16_personal_mode)
    add_executable(test_loot_phase16_personal_mode unit/test_loot_phase16_personal_mode.c)
    target_link_libraries(test_loot_phase16_personal_mode PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase16_personal_mode PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase16_personal_mode COMMAND test_loot_phase16_personal_mode)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase16_need_greed_trade.c AND NOT TARGET test_loot_phase16_need_greed_trade)
    add_executable(test_loot_phase16_need_greed_trade unit/test_loot_phase16_need_greed_trade.c)
    target_link_libraries(test_loot_phase16_need_greed_trade PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase16_need_greed_trade PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase16_need_greed_trade COMMAND test_loot_phase16_need_greed_trade)
endif()

# Loot phase 17 - Performance and indexing
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase17_perf.c AND NOT TARGET test_loot_phase17_perf)
    add_executable(test_loot_phase17_perf unit/test_loot_phase17_perf.c)
    target_link_libraries(test_loot_phase17_perf PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase17_perf PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase17_perf COMMAND test_loot_phase17_perf)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase17_index.c AND NOT TARGET test_loot_phase17_index)
    add_executable(test_loot_phase17_index unit/test_loot_phase17_index.c)
    target_link_libraries(test_loot_phase17_index PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase17_index PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase17_index COMMAND test_loot_phase17_index)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase17_5_diff.c AND NOT TARGET test_loot_phase17_5_diff)
    add_executable(test_loot_phase17_5_diff unit/test_loot_phase17_5_diff.c)
    target_link_libraries(test_loot_phase17_5_diff PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase17_5_diff PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase17_5_diff COMMAND test_loot_phase17_5_diff)
endif()

# Loot phase 18 - Analytics and advanced features
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase18_analytics.c AND NOT TARGET test_loot_phase18_analytics)
    add_executable(test_loot_phase18_analytics unit/test_loot_phase18_analytics.c)
    target_link_libraries(test_loot_phase18_analytics PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase18_analytics PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase18_analytics COMMAND test_loot_phase18_analytics)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase18_3_4_5_advanced.c AND NOT TARGET test_loot_phase18_3_4_5_advanced)
    add_executable(test_loot_phase18_3_4_5_advanced unit/test_loot_phase18_3_4_5_advanced.c)
    target_link_libraries(test_loot_phase18_3_4_5_advanced PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase18_3_4_5_advanced PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase18_3_4_5_advanced COMMAND test_loot_phase18_3_4_5_advanced)
endif()

# Loot phase 19 - Audio and VFX integration
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase19_1_pickup_sounds.c AND NOT TARGET test_loot_phase19_1_pickup_sounds)
    add_executable(test_loot_phase19_1_pickup_sounds unit/test_loot_phase19_1_pickup_sounds.c)
    target_link_libraries(test_loot_phase19_1_pickup_sounds PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase19_1_pickup_sounds PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase19_1_pickup_sounds COMMAND test_loot_phase19_1_pickup_sounds)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase19_2_5_vfx.c AND NOT TARGET test_loot_phase19_2_5_vfx)
    add_executable(test_loot_phase19_2_5_vfx unit/test_loot_phase19_2_5_vfx.c)
    target_link_libraries(test_loot_phase19_2_5_vfx PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase19_2_5_vfx PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase19_2_5_vfx COMMAND test_loot_phase19_2_5_vfx)
endif()

# Loot phase 20 - Stress testing and validation
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_1_fuzz_tables.c AND NOT TARGET test_loot_phase20_1_fuzz_tables)
    add_executable(test_loot_phase20_1_fuzz_tables unit/test_loot_phase20_1_fuzz_tables.c)
    target_link_libraries(test_loot_phase20_1_fuzz_tables PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase20_1_fuzz_tables PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_1_fuzz_tables COMMAND test_loot_phase20_1_fuzz_tables)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_2_3_stats_regression.c AND NOT TARGET test_loot_phase20_2_3_stats_regression)
    add_executable(test_loot_phase20_2_3_stats_regression unit/test_loot_phase20_2_3_stats_regression.c)
    target_link_libraries(test_loot_phase20_2_3_stats_regression PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase20_2_3_stats_regression PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_2_3_stats_regression COMMAND test_loot_phase20_2_3_stats_regression)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_4_persistence_roundtrip.c AND NOT TARGET test_loot_phase20_4_persistence_roundtrip)
    add_executable(test_loot_phase20_4_persistence_roundtrip unit/test_loot_phase20_4_persistence_roundtrip.c)
    target_link_libraries(test_loot_phase20_4_persistence_roundtrip PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase20_4_persistence_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_4_persistence_roundtrip COMMAND test_loot_phase20_4_persistence_roundtrip)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_5_merge_stress.c AND NOT TARGET test_loot_phase20_5_merge_stress)
    add_executable(test_loot_phase20_5_merge_stress unit/test_loot_phase20_5_merge_stress.c)
    target_link_libraries(test_loot_phase20_5_merge_stress PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase20_5_merge_stress PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_5_merge_stress COMMAND test_loot_phase20_5_merge_stress)
endif()

# Loot tooling tests - Phase 21
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_2_validation.c AND NOT TARGET test_loot_tooling_phase21_2_validation)
    add_executable(test_loot_tooling_phase21_2_validation unit/test_loot_tooling_phase21_2_validation.c)
    target_link_libraries(test_loot_tooling_phase21_2_validation PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_tooling_phase21_2_validation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_2_validation COMMAND test_loot_tooling_phase21_2_validation)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_1_convert.c AND NOT TARGET test_loot_tooling_phase21_1_convert)
    add_executable(test_loot_tooling_phase21_1_convert unit/test_loot_tooling_phase21_1_convert.c)
    target_link_libraries(test_loot_tooling_phase21_1_convert PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_tooling_phase21_1_convert PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_1_convert COMMAND test_loot_tooling_phase21_1_convert)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_3_affix_json.c AND NOT TARGET test_loot_tooling_phase21_3_affix_json)
    add_executable(test_loot_tooling_phase21_3_affix_json unit/test_loot_tooling_phase21_3_affix_json.c)
    target_link_libraries(test_loot_tooling_phase21_3_affix_json PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_tooling_phase21_3_affix_json PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_3_affix_json COMMAND test_loot_tooling_phase21_3_affix_json)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_4_rebalance.c AND NOT TARGET test_loot_tooling_phase21_4_rebalance)
    add_executable(test_loot_tooling_phase21_4_rebalance unit/test_loot_tooling_phase21_4_rebalance.c)
    target_link_libraries(test_loot_tooling_phase21_4_rebalance PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_tooling_phase21_4_rebalance PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_4_rebalance COMMAND test_loot_tooling_phase21_4_rebalance)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_5_sort.c AND NOT TARGET test_loot_tooling_phase21_5_sort)
    add_executable(test_loot_tooling_phase21_5_sort unit/test_loot_tooling_phase21_5_sort.c)
    target_link_libraries(test_loot_tooling_phase21_5_sort PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_tooling_phase21_5_sort PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_5_sort COMMAND test_loot_tooling_phase21_5_sort)
endif()

# Loot phase 22 - Security
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase22_security.c AND NOT TARGET test_loot_phase22_security)
    add_executable(test_loot_phase22_security unit/test_loot_phase22_security.c)
    target_link_libraries(test_loot_phase22_security PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase22_security PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase22_security COMMAND test_loot_phase22_security)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase22_server_anomaly.c AND NOT TARGET test_loot_phase22_server_anomaly)
    add_executable(test_loot_phase22_server_anomaly unit/test_loot_phase22_server_anomaly.c)
    target_link_libraries(test_loot_phase22_server_anomaly PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase22_server_anomaly PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase22_server_anomaly COMMAND test_loot_phase22_server_anomaly)
endif()

# Loot phase 23 - Documentation and examples
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_api_doc.c AND NOT TARGET test_loot_phase23_api_doc)
    add_executable(test_loot_phase23_api_doc unit/test_loot_phase23_api_doc.c)
    target_link_libraries(test_loot_phase23_api_doc PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase23_api_doc PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_api_doc COMMAND test_loot_phase23_api_doc)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_example_pack.c AND NOT TARGET test_loot_phase23_example_pack)
    add_executable(test_loot_phase23_example_pack unit/test_loot_phase23_example_pack.c)
    target_link_libraries(test_loot_phase23_example_pack PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase23_example_pack PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_example_pack COMMAND test_loot_phase23_example_pack)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_doc_paths.c AND NOT TARGET test_loot_phase23_doc_paths)
    add_executable(test_loot_phase23_doc_paths unit/test_loot_phase23_doc_paths.c)
    target_link_libraries(test_loot_phase23_doc_paths PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase23_doc_paths PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_doc_paths COMMAND test_loot_phase23_doc_paths)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_style_guide.c AND NOT TARGET test_loot_phase23_style_guide)
    add_executable(test_loot_phase23_style_guide unit/test_loot_phase23_style_guide.c)
    target_link_libraries(test_loot_phase23_style_guide PRIVATE rogue_core)
    if(SDL2_FOUND)
        target_compile_definitions(test_loot_phase23_style_guide PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_style_guide COMMAND test_loot_phase23_style_guide)
endif()
