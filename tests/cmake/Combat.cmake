# Combat Test Suite

# Explicitly add combat damage observer test (maintainability phase M2) to avoid glob cache issues
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_damage_observer.c AND NOT TARGET test_combat_damage_observer)
    add_executable(test_combat_damage_observer unit/test_combat_damage_observer.c)
    # Ensure C language (not C++)
    set_property(TARGET test_combat_damage_observer PROPERTY LINKER_LANGUAGE C)
    target_link_libraries(test_combat_damage_observer PRIVATE rogue_core)
    # Ensure observer feature macro visible so duplicate symbol guard engages correctly
    target_compile_definitions(test_combat_damage_observer PRIVATE ROGUE_FEATURE_COMBAT_OBSERVER=1)
    # Prevent SDL from redefining main to SDL_main when SDL headers transitively included
    target_compile_definitions(test_combat_damage_observer PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_damage_observer PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_damage_observer COMMAND test_combat_damage_observer)
endif()

# Ensure newly added directional combat test is always present (some generators cache GLOB results between incremental reconfigurations).
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_left_facing.c AND NOT TARGET test_combat_left_facing)
    add_executable(test_combat_left_facing unit/test_combat_left_facing.c)
    target_link_libraries(test_combat_left_facing PRIVATE rogue_core)
    target_compile_definitions(test_combat_left_facing PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_left_facing PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_left_facing COMMAND test_combat_left_facing)
endif()

# Explicitly add Phase 5.4/5.5 team filter & obstruction attenuation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_team_obstruction.c AND NOT TARGET test_combat_phase5_team_obstruction)
    add_executable(test_combat_phase5_team_obstruction unit/test_combat_phase5_team_obstruction.c)
    target_link_libraries(test_combat_phase5_team_obstruction PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase5_team_obstruction PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_team_obstruction PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_team_obstruction COMMAND test_combat_phase5_team_obstruction)
endif()

# Phase 5.6 lock-on acquisition/cycle/directional assist test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on.c AND NOT TARGET test_combat_phase5_lock_on)
    add_executable(test_combat_phase5_lock_on unit/test_combat_phase5_lock_on.c)
    target_link_libraries(test_combat_phase5_lock_on PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase5_lock_on PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on COMMAND test_combat_phase5_lock_on)
endif()

# Phase 5.1 hitbox primitive test (explicit add to avoid glob cache issues)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_hitbox_primitives.c AND NOT TARGET test_combat_phase5_hitbox_primitives)
    add_executable(test_combat_phase5_hitbox_primitives unit/test_combat_phase5_hitbox_primitives.c)
    target_link_libraries(test_combat_phase5_hitbox_primitives PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_hitbox_primitives PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_hitbox_primitives COMMAND test_combat_phase5_hitbox_primitives)
endif()

# Phase 5.2/5.3 authoring + broadphase tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_hitbox_authoring_broadphase.c AND NOT TARGET test_combat_phase5_hitbox_authoring_broadphase)
    add_executable(test_combat_phase5_hitbox_authoring_broadphase unit/test_combat_phase5_hitbox_authoring_broadphase.c)
    target_link_libraries(test_combat_phase5_hitbox_authoring_broadphase PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_hitbox_authoring_broadphase PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_hitbox_authoring_broadphase COMMAND test_combat_phase5_hitbox_authoring_broadphase)
endif()

# Explicit heavy multi-window test (heavy_2 triple window validation)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_heavy_multi_window.c AND NOT TARGET test_combat_heavy_multi_window)
    add_executable(test_combat_heavy_multi_window unit/test_combat_heavy_multi_window.c)
    target_link_libraries(test_combat_heavy_multi_window PRIVATE rogue_core)
    target_compile_definitions(test_combat_heavy_multi_window PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_heavy_multi_window PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_heavy_multi_window COMMAND test_combat_heavy_multi_window)
endif()

# Explicit window boundary overlap test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_window_boundary.c AND NOT TARGET test_combat_window_boundary)
    add_executable(test_combat_window_boundary unit/test_combat_window_boundary.c)
    target_link_libraries(test_combat_window_boundary PRIVATE rogue_core)
    target_compile_definitions(test_combat_window_boundary PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_window_boundary PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_window_boundary COMMAND test_combat_window_boundary)
endif()

# Phase 6.1 & 6.3 charge + dodge test (explicit)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_charge_and_dodge.c AND NOT TARGET test_combat_phase6_charge_and_dodge)
    add_executable(test_combat_phase6_charge_and_dodge unit/test_combat_phase6_charge_and_dodge.c)
    target_link_libraries(test_combat_phase6_charge_and_dodge PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_charge_and_dodge PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_charge_and_dodge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_charge_and_dodge COMMAND test_combat_phase6_charge_and_dodge)
endif()

# Phase 6.4/6.5/6.6 backstab + parry + riposte basic test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_parry_backstab_riposte.c AND NOT TARGET test_combat_phase6_parry_backstab_riposte)
    add_executable(test_combat_phase6_parry_backstab_riposte unit/test_combat_phase6_parry_backstab_riposte.c)
    target_link_libraries(test_combat_phase6_parry_backstab_riposte PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_parry_backstab_riposte PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_parry_backstab_riposte PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_parry_backstab_riposte COMMAND test_combat_phase6_parry_backstab_riposte)
endif()

# Phase 6.2 / 6.6 / 6.7 aerial, guard break, deflect placeholder test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_aerial_deflect_guardbreak.c AND NOT TARGET test_combat_phase6_aerial_deflect_guardbreak)
    add_executable(test_combat_phase6_aerial_deflect_guardbreak unit/test_combat_phase6_aerial_deflect_guardbreak.c)
    target_link_libraries(test_combat_phase6_aerial_deflect_guardbreak PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_aerial_deflect_guardbreak PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_aerial_deflect_guardbreak PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_aerial_deflect_guardbreak COMMAND test_combat_phase6_aerial_deflect_guardbreak)
endif()

# Phase 6 extended multipliers test (backstab + guard-break + riposte damage application)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_backstab_guardbreak_riposte_bonus.c AND NOT TARGET test_combat_phase6_backstab_guardbreak_riposte_bonus)
    add_executable(test_combat_phase6_backstab_guardbreak_riposte_bonus unit/test_combat_phase6_backstab_guardbreak_riposte_bonus.c)
    target_link_libraries(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_backstab_guardbreak_riposte_bonus COMMAND test_combat_phase6_backstab_guardbreak_riposte_bonus)
endif()

# Phase 7.1/7.3/7.5 weapon + stance + familiarity basic test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_weapon_stance_familiarity.c AND NOT TARGET test_combat_phase7_weapon_stance_familiarity)
    add_executable(test_combat_phase7_weapon_stance_familiarity unit/test_combat_phase7_weapon_stance_familiarity.c)
    target_link_libraries(test_combat_phase7_weapon_stance_familiarity PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_weapon_stance_familiarity PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_weapon_stance_familiarity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_weapon_stance_familiarity COMMAND test_combat_phase7_weapon_stance_familiarity)
endif()

# Phase 7.4 / 7.6 infusions + durability scalar test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_infusions_durability.c AND NOT TARGET test_combat_phase7_infusions_durability)
    add_executable(test_combat_phase7_infusions_durability unit/test_combat_phase7_infusions_durability.c)
    target_link_libraries(test_combat_phase7_infusions_durability PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_infusions_durability PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_infusions_durability PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_infusions_durability COMMAND test_combat_phase7_infusions_durability)
endif()

# Phase 7.2 armor weight classes test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_armor_weight_classes.c AND NOT TARGET test_combat_phase7_armor_weight_classes)
    add_executable(test_combat_phase7_armor_weight_classes unit/test_combat_phase7_armor_weight_classes.c)
    target_link_libraries(test_combat_phase7_armor_weight_classes PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_armor_weight_classes PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_armor_weight_classes PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_armor_weight_classes COMMAND test_combat_phase7_armor_weight_classes)
endif()

    # Phase 7.8 stance frame timing test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_stance_frame_timing.c AND NOT TARGET test_combat_phase7_stance_frame_timing)
        add_executable(test_combat_phase7_stance_frame_timing unit/test_combat_phase7_stance_frame_timing.c)
        target_link_libraries(test_combat_phase7_stance_frame_timing PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_stance_frame_timing PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_stance_frame_timing PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_stance_frame_timing COMMAND test_combat_phase7_stance_frame_timing)
    endif()

    # Phase 7.7 familiarity cap boundary test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_familiarity_cap.c AND NOT TARGET test_combat_phase7_familiarity_cap)
        add_executable(test_combat_phase7_familiarity_cap unit/test_combat_phase7_familiarity_cap.c)
        target_link_libraries(test_combat_phase7_familiarity_cap PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_familiarity_cap PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_familiarity_cap PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_familiarity_cap COMMAND test_combat_phase7_familiarity_cap)
    endif()

    # Phase 7.7 encumbrance mobility curve (tier thresholds) test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_encumbrance_mobility_curve.c AND NOT TARGET test_combat_phase7_encumbrance_mobility_curve)
        add_executable(test_combat_phase7_encumbrance_mobility_curve unit/test_combat_phase7_encumbrance_mobility_curve.c)
        target_link_libraries(test_combat_phase7_encumbrance_mobility_curve PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_encumbrance_mobility_curve PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_encumbrance_mobility_curve PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_encumbrance_mobility_curve COMMAND test_combat_phase7_encumbrance_mobility_curve)
    endif()

    # Execution flag behavior: low-health and overkill triggers
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_execution.c AND NOT TARGET test_combat_execution)
        add_executable(test_combat_execution unit/test_combat_execution.c)
        target_link_libraries(test_combat_execution PRIVATE rogue_core)
        target_compile_definitions(test_combat_execution PRIVATE SDL_MAIN_HANDLED=1)
        target_compile_definitions(test_combat_execution PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_execution PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_execution COMMAND test_combat_execution)
    endif()

    # Explicitly add combat block cancel test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_block_cancel.c AND NOT TARGET test_combat_block_cancel)
    add_executable(test_combat_block_cancel unit/test_combat_block_cancel.c)
    target_link_libraries(test_combat_block_cancel PRIVATE rogue_core)
    target_compile_definitions(test_combat_block_cancel PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_block_cancel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_block_cancel COMMAND test_combat_block_cancel)
endif()

# Explicitly add Phase 4.5 reaction cancel & DI test (ensure picked up even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_reaction_cancel_di.c AND NOT TARGET test_combat_phase4_reaction_cancel_di)
    add_executable(test_combat_phase4_reaction_cancel_di unit/test_combat_phase4_reaction_cancel_di.c)
    target_link_libraries(test_combat_phase4_reaction_cancel_di PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase4_reaction_cancel_di PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_reaction_cancel_di PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_reaction_cancel_di COMMAND test_combat_phase4_reaction_cancel_di)
endif()

# Explicitly add Phase 4.6 i-frame overlap protection test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_iframe_overlap.c AND NOT TARGET test_combat_phase4_iframe_overlap)
    add_executable(test_combat_phase4_iframe_overlap unit/test_combat_phase4_iframe_overlap.c)
    target_link_libraries(test_combat_phase4_iframe_overlap PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase4_iframe_overlap PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_iframe_overlap PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_iframe_overlap COMMAND test_combat_phase4_iframe_overlap)
endif()

# Explicitly add combat drift timing test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_drift_timing.c AND NOT TARGET test_combat_drift_timing)
    add_executable(test_combat_drift_timing unit/test_combat_drift_timing.c)
    target_link_libraries(test_combat_drift_timing PRIVATE rogue_core)
    target_compile_definitions(test_combat_drift_timing PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_drift_timing PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_drift_timing COMMAND test_combat_drift_timing)
endif()

# Explicitly add combat multi-hit window test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_multi_hit.c AND NOT TARGET test_combat_multi_hit)
    add_executable(test_combat_multi_hit unit/test_combat_multi_hit.c)

    target_link_libraries(test_combat_multi_hit PRIVATE rogue_core)
    target_compile_definitions(test_combat_multi_hit PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_multi_hit PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_multi_hit COMMAND test_combat_multi_hit)
endif()

# Add the new Phase 5.7 lock-on obstruction & latency test (guarded for incremental reconfigure)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on_obstruction_latency.c AND NOT TARGET test_combat_phase5_lock_on_obstruction_latency)
    add_executable(test_combat_phase5_lock_on_obstruction_latency unit/test_combat_phase5_lock_on_obstruction_latency.c)
    set_target_properties(test_combat_phase5_lock_on_obstruction_latency PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    target_link_libraries(test_combat_phase5_lock_on_obstruction_latency PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on_obstruction_latency PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on_obstruction_latency COMMAND test_combat_phase5_lock_on_obstruction_latency)
endif()

# Explicitly add multi-target lock-on test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on_multitarget.c AND NOT TARGET test_combat_phase5_lock_on_multitarget)
    add_executable(test_combat_phase5_lock_on_multitarget unit/test_combat_phase5_lock_on_multitarget.c)
    target_link_libraries(test_combat_phase5_lock_on_multitarget PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on_multitarget PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on_multitarget COMMAND test_combat_phase5_lock_on_multitarget)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_knockback_basic.c AND NOT TARGET test_knockback_basic)
    add_executable(test_knockback_basic unit/test_knockback_basic.c)
    target_link_libraries(test_knockback_basic PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_knockback_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_knockback_basic COMMAND test_knockback_basic)
endif()

# Explicitly add haste cast speed test (Phase 1A.3 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_haste_cast_speed.c AND NOT TARGET test_haste_cast_speed)
    add_executable(test_haste_cast_speed unit/test_haste_cast_speed.c)
    target_link_libraries(test_haste_cast_speed PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_haste_cast_speed PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_haste_cast_speed COMMAND test_haste_cast_speed)
endif()
# Explicitly add cast weaving & early cancel test (Phase 1A.2/1A.4 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_cast_weave_and_cancel.c AND NOT TARGET test_cast_weave_and_cancel)
    add_executable(test_cast_weave_and_cancel unit/test_cast_weave_and_cancel.c)
    target_link_libraries(test_cast_weave_and_cancel PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_cast_weave_and_cancel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_cast_weave_and_cancel COMMAND test_cast_weave_and_cancel)
endif()

# Explicit player damage number spawn test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_damage_numbers_player.c AND NOT TARGET test_damage_numbers_player)
    add_executable(test_damage_numbers_player unit/test_damage_numbers_player.c)
    target_link_libraries(test_damage_numbers_player PRIVATE rogue_core)
    target_compile_definitions(test_damage_numbers_player PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_damage_numbers_player PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_damage_numbers_player COMMAND test_damage_numbers_player)
endif()



# Explicitly add channel ticks scheduler test (Phase 1A.5 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_channel_ticks_and_buffer.c AND NOT TARGET test_channel_ticks_and_buffer)
    add_executable(test_channel_ticks_and_buffer unit/test_channel_ticks_and_buffer.c)
    target_link_libraries(test_channel_ticks_and_buffer PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_channel_ticks_and_buffer PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_channel_ticks_and_buffer COMMAND test_channel_ticks_and_buffer)
endif()
