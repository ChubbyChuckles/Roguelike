file(GLOB UNIT_TESTS unit/test_*.c)

# Filter out removed/legacy test filenames that may linger in generated projects
list(FILTER UNIT_TESTS EXCLUDE REGEX ".*test_skills_phase1_foundation.c$")

# Phase 1 SaveManager roundtrip binary test (explicit add to avoid glob cache issues)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_roundtrip.c AND NOT TARGET test_save_roundtrip)
    add_executable(test_save_roundtrip unit/test_save_roundtrip.c)
    target_link_libraries(test_save_roundtrip PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_roundtrip COMMAND test_save_roundtrip)
endif()

# Autosave ring test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_autosave_ring.c AND NOT TARGET test_save_autosave_ring)
    add_executable(test_save_autosave_ring unit/test_save_autosave_ring.c)
    target_link_libraries(test_save_autosave_ring PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_autosave_ring PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_autosave_ring COMMAND test_save_autosave_ring)
endif()

# Component ordering determinism test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_ordering_determinism.c AND NOT TARGET test_save_ordering_determinism)
    add_executable(test_save_ordering_determinism unit/test_save_ordering_determinism.c)
    target_link_libraries(test_save_ordering_determinism PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_ordering_determinism PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_ordering_determinism COMMAND test_save_ordering_determinism)
endif()

# Migration chain test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_migration_chain.c AND NOT TARGET test_save_migration_chain)
    add_executable(test_save_migration_chain unit/test_save_migration_chain.c)
    target_link_libraries(test_save_migration_chain PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_migration_chain PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_migration_chain COMMAND test_save_migration_chain)
endif()

# Migration metrics test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_migration_metrics.c AND NOT TARGET test_save_migration_metrics)
    add_executable(test_save_migration_metrics unit/test_save_migration_metrics.c)
    target_link_libraries(test_save_migration_metrics PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_migration_metrics PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_migration_metrics COMMAND test_save_migration_metrics)
endif()

# JSON export test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_json_export.c AND NOT TARGET test_save_json_export)
    add_executable(test_save_json_export unit/test_save_json_export.c)
    target_link_libraries(test_save_json_export PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_json_export PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_json_export COMMAND test_save_json_export)
endif()

# Component reload test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_component_reload.c AND NOT TARGET test_save_component_reload)
    add_executable(test_save_component_reload unit/test_save_component_reload.c)
    target_link_libraries(test_save_component_reload PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_component_reload PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_component_reload COMMAND test_save_component_reload)
endif()

# TLV header layout test (v3+)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v3_tlv_headers.c AND NOT TARGET test_save_v3_tlv_headers)
    add_executable(test_save_v3_tlv_headers unit/test_save_v3_tlv_headers.c)
    target_link_libraries(test_save_v3_tlv_headers PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v3_tlv_headers PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v3_tlv_headers COMMAND test_save_v3_tlv_headers)
endif()

# Backward compatibility: load fabricated v2 under v3 build
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v2_backward_load.c AND NOT TARGET test_save_v2_backward_load)
    add_executable(test_save_v2_backward_load unit/test_save_v2_backward_load.c)
    target_link_libraries(test_save_v2_backward_load PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v2_backward_load PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v2_backward_load COMMAND test_save_v2_backward_load)
endif()

# Debug JSON toggle test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_debug_json_toggle.c AND NOT TARGET test_save_debug_json_toggle)
    add_executable(test_save_debug_json_toggle unit/test_save_debug_json_toggle.c)
    target_link_libraries(test_save_debug_json_toggle PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_debug_json_toggle PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_debug_json_toggle COMMAND test_save_debug_json_toggle)
endif()

# Varint counts (v4) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v4_varint_counts.c AND NOT TARGET test_save_v4_varint_counts)
    add_executable(test_save_v4_varint_counts unit/test_save_v4_varint_counts.c)
    target_link_libraries(test_save_v4_varint_counts PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v4_varint_counts PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v4_varint_counts COMMAND test_save_v4_varint_counts)
endif()

# String intern table (v5) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v5_strings.c AND NOT TARGET test_save_v5_strings)
    add_executable(test_save_v5_strings unit/test_save_v5_strings.c)
    target_link_libraries(test_save_v5_strings PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v5_strings PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v5_strings COMMAND test_save_v5_strings)
endif()

# Compression (v6) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v6_compression.c AND NOT TARGET test_save_v6_compression)
    add_executable(test_save_v6_compression unit/test_save_v6_compression.c)
    target_link_libraries(test_save_v6_compression PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v6_compression PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v6_compression COMMAND test_save_v6_compression)
endif()

# Integrity (v7) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v7_integrity.c AND NOT TARGET test_save_v7_integrity)
    add_executable(test_save_v7_integrity unit/test_save_v7_integrity.c)
    target_link_libraries(test_save_v7_integrity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v7_integrity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v7_integrity COMMAND test_save_v7_integrity)
endif()

# Replay hash (v8) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v8_replay_hash.c AND NOT TARGET test_save_v8_replay_hash)
    add_executable(test_save_v8_replay_hash unit/test_save_v8_replay_hash.c)
    target_link_libraries(test_save_v8_replay_hash PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v8_replay_hash PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v8_replay_hash COMMAND test_save_v8_replay_hash)
endif()

# Tamper + recovery (v8) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v8_tamper_recovery.c AND NOT TARGET test_save_v8_tamper_recovery)
    add_executable(test_save_v8_tamper_recovery unit/test_save_v8_tamper_recovery.c)
    target_link_libraries(test_save_v8_tamper_recovery PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v8_tamper_recovery PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v8_tamper_recovery COMMAND test_save_v8_tamper_recovery)
endif()

# Signature (v9) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v9_signature.c AND NOT TARGET test_save_v9_signature)
    add_executable(test_save_v9_signature unit/test_save_v9_signature.c)
    target_link_libraries(test_save_v9_signature PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v9_signature PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v9_signature COMMAND test_save_v9_signature)
endif()

# Incremental save basic test (Phase 5)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_incremental_basic.c AND NOT TARGET test_save_incremental_basic)
    add_executable(test_save_incremental_basic unit/test_save_incremental_basic.c)
    target_link_libraries(test_save_incremental_basic PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_incremental_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_incremental_basic COMMAND test_save_incremental_basic)
endif()

# Autosave scheduler test (Phase 6.1/6.3/6.4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_autosave_scheduler.c AND NOT TARGET test_save_autosave_scheduler)
    add_executable(test_save_autosave_scheduler unit/test_save_autosave_scheduler.c)
    target_link_libraries(test_save_autosave_scheduler PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_autosave_scheduler PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_autosave_scheduler COMMAND test_save_autosave_scheduler)
endif()

# Autosave indicator/throttle test (Phase 6.5)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_autosave_indicator.c AND NOT TARGET test_save_autosave_indicator)
    add_executable(test_save_autosave_indicator unit/test_save_autosave_indicator.c)
    target_link_libraries(test_save_autosave_indicator PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_autosave_indicator PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_autosave_indicator COMMAND test_save_autosave_indicator)
endif()

# Phase 7.2/7.3 skill & buff extended state roundtrip test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_phase7_skill_buff_roundtrip.c AND NOT TARGET test_save_phase7_skill_buff_roundtrip)
    add_executable(test_save_phase7_skill_buff_roundtrip unit/test_save_phase7_skill_buff_roundtrip.c)
    target_link_libraries(test_save_phase7_skill_buff_roundtrip PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_phase7_skill_buff_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_phase7_skill_buff_roundtrip COMMAND test_save_phase7_skill_buff_roundtrip)
endif()

# Basic save_manager smoke test (legacy simple test)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_manager.c AND NOT TARGET test_save_manager)
    add_executable(test_save_manager unit/test_save_manager.c)
    target_link_libraries(test_save_manager PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_manager PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_manager COMMAND test_save_manager)
endif()

# Explicitly add new maintainability phase M3.4 asset dependency graph test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_asset_dep.c AND NOT TARGET test_asset_dep)
    add_executable(test_asset_dep unit/test_asset_dep.c)
    target_link_libraries(test_asset_dep PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_asset_dep PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_asset_dep COMMAND test_asset_dep)
endif()

# Explicitly add new maintainability phase M3.5 projectile config hot reload test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_projectiles_config.c AND NOT TARGET test_projectiles_config)
    add_executable(test_projectiles_config unit/test_projectiles_config.c)
    target_link_libraries(test_projectiles_config PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_projectiles_config PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_projectiles_config COMMAND test_projectiles_config)
endif()

# Phase M3.6: directory-based hitbox loading test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_hitbox_directory_load.c AND NOT TARGET test_hitbox_directory_load)
    add_executable(test_hitbox_directory_load unit/test_hitbox_directory_load.c)
    target_link_libraries(test_hitbox_directory_load PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_hitbox_directory_load PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_hitbox_directory_load COMMAND test_hitbox_directory_load)
endif()

# Phase M3.7: persistence version tag test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_persistence_versions.c AND NOT TARGET test_persistence_versions)
    add_executable(test_persistence_versions unit/test_persistence_versions.c)
    target_link_libraries(test_persistence_versions PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_persistence_versions PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_persistence_versions COMMAND test_persistence_versions)
endif()

# Phase M4.1: projectile config edge cases
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_projectiles_config_edge.c AND NOT TARGET test_projectiles_config_edge)
    add_executable(test_projectiles_config_edge unit/test_projectiles_config_edge.c)
    target_link_libraries(test_projectiles_config_edge PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_projectiles_config_edge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_projectiles_config_edge COMMAND test_projectiles_config_edge)
endif()

# Phase M4.1: persistence edge cases
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_persistence_edge_cases.c AND NOT TARGET test_persistence_edge_cases)
    add_executable(test_persistence_edge_cases unit/test_persistence_edge_cases.c)
    target_link_libraries(test_persistence_edge_cases PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_persistence_edge_cases PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_persistence_edge_cases COMMAND test_persistence_edge_cases)
endif()

# Phase M4.2/M4.3 determinism & golden master test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_determinism_damage_events.c AND NOT TARGET test_determinism_damage_events)
    add_executable(test_determinism_damage_events unit/test_determinism_damage_events.c)
    target_link_libraries(test_determinism_damage_events PRIVATE rogue_core)
    target_compile_definitions(test_determinism_damage_events PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_determinism_damage_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_determinism_damage_events COMMAND test_determinism_damage_events)
endif()

# Phase M4.4 fuzz parsers (affix/persistence/kv)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_fuzz_parsers.c AND NOT TARGET test_fuzz_parsers)
    add_executable(test_fuzz_parsers unit/test_fuzz_parsers.c)
    target_link_libraries(test_fuzz_parsers PRIVATE rogue_core)
    target_compile_definitions(test_fuzz_parsers PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_fuzz_parsers PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_fuzz_parsers COMMAND test_fuzz_parsers)
endif()
# Explicitly add combat damage observer test (maintainability phase M2) to avoid glob cache issues
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_damage_observer.c AND NOT TARGET test_combat_damage_observer)
    add_executable(test_combat_damage_observer unit/test_combat_damage_observer.c)
    # Ensure C language (not C++)
    set_property(TARGET test_combat_damage_observer PROPERTY LINKER_LANGUAGE C)
    target_link_libraries(test_combat_damage_observer PRIVATE rogue_core)
    # Ensure observer feature macro visible so duplicate symbol guard engages correctly
    target_compile_definitions(test_combat_damage_observer PRIVATE ROGUE_FEATURE_COMBAT_OBSERVER=1)
    # Prevent SDL from redefining main to SDL_main when SDL headers transitively included
    target_compile_definitions(test_combat_damage_observer PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_damage_observer PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_damage_observer COMMAND test_combat_damage_observer)
endif()

# Ensure newly added directional combat test is always present (some generators cache GLOB results between incremental reconfigurations).
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_left_facing.c AND NOT TARGET test_combat_left_facing)
    add_executable(test_combat_left_facing unit/test_combat_left_facing.c)
    target_link_libraries(test_combat_left_facing PRIVATE rogue_core)
    target_compile_definitions(test_combat_left_facing PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_left_facing PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_left_facing COMMAND test_combat_left_facing)
endif()

# Explicitly add Phase 5.4/5.5 team filter & obstruction attenuation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_team_obstruction.c AND NOT TARGET test_combat_phase5_team_obstruction)
    add_executable(test_combat_phase5_team_obstruction unit/test_combat_phase5_team_obstruction.c)
    target_link_libraries(test_combat_phase5_team_obstruction PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase5_team_obstruction PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_team_obstruction PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_team_obstruction COMMAND test_combat_phase5_team_obstruction)
endif()

# Phase 5.6 lock-on acquisition/cycle/directional assist test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on.c AND NOT TARGET test_combat_phase5_lock_on)
    add_executable(test_combat_phase5_lock_on unit/test_combat_phase5_lock_on.c)
    target_link_libraries(test_combat_phase5_lock_on PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase5_lock_on PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on COMMAND test_combat_phase5_lock_on)
endif()

# Phase 5.1 hitbox primitive test (explicit add to avoid glob cache issues)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_hitbox_primitives.c AND NOT TARGET test_combat_phase5_hitbox_primitives)
    add_executable(test_combat_phase5_hitbox_primitives unit/test_combat_phase5_hitbox_primitives.c)
    target_link_libraries(test_combat_phase5_hitbox_primitives PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_hitbox_primitives PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_hitbox_primitives COMMAND test_combat_phase5_hitbox_primitives)
endif()

# Phase 5.2/5.3 authoring + broadphase tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_hitbox_authoring_broadphase.c AND NOT TARGET test_combat_phase5_hitbox_authoring_broadphase)
    add_executable(test_combat_phase5_hitbox_authoring_broadphase unit/test_combat_phase5_hitbox_authoring_broadphase.c)
    target_link_libraries(test_combat_phase5_hitbox_authoring_broadphase PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_hitbox_authoring_broadphase PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_hitbox_authoring_broadphase COMMAND test_combat_phase5_hitbox_authoring_broadphase)
endif()

# Explicit heavy multi-window test (heavy_2 triple window validation)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_heavy_multi_window.c AND NOT TARGET test_combat_heavy_multi_window)
    add_executable(test_combat_heavy_multi_window unit/test_combat_heavy_multi_window.c)
    target_link_libraries(test_combat_heavy_multi_window PRIVATE rogue_core)
    target_compile_definitions(test_combat_heavy_multi_window PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_heavy_multi_window PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_heavy_multi_window COMMAND test_combat_heavy_multi_window)
endif()

# Explicit window boundary overlap test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_window_boundary.c AND NOT TARGET test_combat_window_boundary)
    add_executable(test_combat_window_boundary unit/test_combat_window_boundary.c)
    target_link_libraries(test_combat_window_boundary PRIVATE rogue_core)
    target_compile_definitions(test_combat_window_boundary PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_window_boundary PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_window_boundary COMMAND test_combat_window_boundary)
endif()

# Explicit player damage number spawn test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_damage_numbers_player.c AND NOT TARGET test_damage_numbers_player)
    add_executable(test_damage_numbers_player unit/test_damage_numbers_player.c)
    target_link_libraries(test_damage_numbers_player PRIVATE rogue_core)
    target_compile_definitions(test_damage_numbers_player PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_damage_numbers_player PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_damage_numbers_player COMMAND test_damage_numbers_player)
endif()

# UI Phase 3 input features test (clipboard, chords, replay)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase3_input_features.c AND NOT TARGET test_ui_phase3_input_features)
    add_executable(test_ui_phase3_input_features unit/test_ui_phase3_input_features.c)
    target_link_libraries(test_ui_phase3_input_features PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase3_input_features PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase3_input_features COMMAND test_ui_phase3_input_features)
endif()

# UI Phase 5.4-5.7 advanced skillgraph test (filter/export/undo)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase5_skillgraph_advanced.c AND NOT TARGET test_ui_phase5_skillgraph_advanced)
    add_executable(test_ui_phase5_skillgraph_advanced unit/test_ui_phase5_skillgraph_advanced.c)
    target_link_libraries(test_ui_phase5_skillgraph_advanced PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase5_skillgraph_advanced PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase5_skillgraph_advanced COMMAND test_ui_phase5_skillgraph_advanced)
endif()

# UI Phase 4.4 context menu test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_context_menu.c AND NOT TARGET test_ui_phase4_context_menu)
    add_executable(test_ui_phase4_context_menu unit/test_ui_phase4_context_menu.c)
    target_link_libraries(test_ui_phase4_context_menu PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_context_menu PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_context_menu COMMAND test_ui_phase4_context_menu)
endif()

# UI Phase 4.5 stat delta preview test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_stat_preview.c AND NOT TARGET test_ui_phase4_stat_preview)
    add_executable(test_ui_phase4_stat_preview unit/test_ui_phase4_stat_preview.c)
    target_link_libraries(test_ui_phase4_stat_preview PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_stat_preview PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_stat_preview COMMAND test_ui_phase4_stat_preview)
endif()

# UI Phase 4.6 rarity color theming test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_rarity_colors.c AND NOT TARGET test_ui_phase4_rarity_colors)
    add_executable(test_ui_phase4_rarity_colors unit/test_ui_phase4_rarity_colors.c)
    target_link_libraries(test_ui_phase4_rarity_colors PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_rarity_colors PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_rarity_colors COMMAND test_ui_phase4_rarity_colors)
endif()

# UI Phase 4.7 vendor restock timer fraction test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_vendor_restock.c AND NOT TARGET test_ui_phase4_vendor_restock)
    add_executable(test_ui_phase4_vendor_restock unit/test_ui_phase4_vendor_restock.c)
    target_link_libraries(test_ui_phase4_vendor_restock PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_vendor_restock PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_vendor_restock COMMAND test_ui_phase4_vendor_restock)
endif()

# UI Phase 4.8 vendor transaction confirmation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_vendor_transaction.c AND NOT TARGET test_ui_phase4_vendor_transaction)
    add_executable(test_ui_phase4_vendor_transaction unit/test_ui_phase4_vendor_transaction.c)
    target_link_libraries(test_ui_phase4_vendor_transaction PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_vendor_transaction PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_vendor_transaction COMMAND test_ui_phase4_vendor_transaction)
endif()

# UI Phase 4.9 durability threshold bucket test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_durability_thresholds.c AND NOT TARGET test_ui_phase4_durability_thresholds)
    add_executable(test_ui_phase4_durability_thresholds unit/test_ui_phase4_durability_thresholds.c)
    target_link_libraries(test_ui_phase4_durability_thresholds PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_durability_thresholds PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_durability_thresholds COMMAND test_ui_phase4_durability_thresholds)
endif()

# UI Phase 4.10 radial selector test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_radial_selector.c AND NOT TARGET test_ui_phase4_radial_selector)
    add_executable(test_ui_phase4_radial_selector unit/test_ui_phase4_radial_selector.c)
    target_link_libraries(test_ui_phase4_radial_selector PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_radial_selector PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_radial_selector COMMAND test_ui_phase4_radial_selector)
endif()

# UI Phase 5.1 skill graph quadtree culling & layering test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase5_skillgraph.c AND NOT TARGET test_ui_phase5_skillgraph)
    add_executable(test_ui_phase5_skillgraph unit/test_ui_phase5_skillgraph.c)
    target_link_libraries(test_ui_phase5_skillgraph PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase5_skillgraph PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase5_skillgraph COMMAND test_ui_phase5_skillgraph)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_skill_maze_generation.c AND NOT TARGET test_ui_skill_maze_generation)
    add_executable(test_ui_skill_maze_generation unit/test_ui_skill_maze_generation.c)
    target_link_libraries(test_ui_skill_maze_generation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_skill_maze_generation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_skill_maze_generation COMMAND test_ui_skill_maze_generation)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase5_skillgraph_anim.c AND NOT TARGET test_ui_phase5_skillgraph_anim)
    add_executable(test_ui_phase5_skillgraph_anim unit/test_ui_phase5_skillgraph_anim.c)
    target_link_libraries(test_ui_phase5_skillgraph_anim PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase5_skillgraph_anim PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase5_skillgraph_anim COMMAND test_ui_phase5_skillgraph_anim)
endif()

# Explicitly add vendor restock rotation test (10.3)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vendor_restock.c AND NOT TARGET test_vendor_restock)
    add_executable(test_vendor_restock unit/test_vendor_restock.c)
    target_link_libraries(test_vendor_restock PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vendor_restock PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vendor_restock COMMAND test_vendor_restock)
endif()

# Explicitly add loot phase 9 drop rates test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_drop_rates.c AND NOT TARGET test_loot_phase9_drop_rates)
    add_executable(test_loot_phase9_drop_rates unit/test_loot_phase9_drop_rates.c)
    target_link_libraries(test_loot_phase9_drop_rates PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_drop_rates PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_drop_rates COMMAND test_loot_phase9_drop_rates)
endif()

# Explicitly add loot phase 9 adaptive weighting test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_adaptive.c AND NOT TARGET test_loot_phase9_adaptive)
    add_executable(test_loot_phase9_adaptive unit/test_loot_phase9_adaptive.c)
    target_link_libraries(test_loot_phase9_adaptive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_adaptive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_adaptive COMMAND test_loot_phase9_adaptive)
endif()

# Explicitly add loot phase 9 preference learning test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_preference.c AND NOT TARGET test_loot_phase9_preference)
    add_executable(test_loot_phase9_preference unit/test_loot_phase9_preference.c)
    target_link_libraries(test_loot_phase9_preference PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_preference PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_preference COMMAND test_loot_phase9_preference)
endif()

# Explicitly add loot phase 9 pity acceleration test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_pity.c AND NOT TARGET test_loot_phase9_pity)
    add_executable(test_loot_phase9_pity unit/test_loot_phase9_pity.c)
    target_link_libraries(test_loot_phase9_pity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_pity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_pity COMMAND test_loot_phase9_pity)
endif()

# Explicitly add loot phase 9 tuning console test (9.6)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_tuning_console.c AND NOT TARGET test_loot_phase9_tuning_console)
    add_executable(test_loot_phase9_tuning_console unit/test_loot_phase9_tuning_console.c)
    target_link_libraries(test_loot_phase9_tuning_console PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_tuning_console PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_tuning_console COMMAND test_loot_phase9_tuning_console)
endif()

# Explicitly add generation quality test (ensure picked up even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase8_generation_quality.c AND NOT TARGET test_loot_phase8_generation_quality)
    add_executable(test_loot_phase8_generation_quality unit/test_loot_phase8_generation_quality.c)
    target_link_libraries(test_loot_phase8_generation_quality PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase8_generation_quality PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase8_generation_quality COMMAND test_loot_phase8_generation_quality)
endif()

# Explicitly add skill cast/channel test (Phase 1.3/1.4 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skill_cast_and_channel.c AND NOT TARGET test_skill_cast_and_channel)
    add_executable(test_skill_cast_and_channel unit/test_skill_cast_and_channel.c)
    target_link_libraries(test_skill_cast_and_channel PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skill_cast_and_channel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skill_cast_and_channel COMMAND test_skill_cast_and_channel)
endif()

# Explicitly add channel ticks scheduler test (Phase 1A.5 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_channel_ticks_and_buffer.c AND NOT TARGET test_channel_ticks_and_buffer)
    add_executable(test_channel_ticks_and_buffer unit/test_channel_ticks_and_buffer.c)
    target_link_libraries(test_channel_ticks_and_buffer PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_channel_ticks_and_buffer PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_channel_ticks_and_buffer COMMAND test_channel_ticks_and_buffer)
endif()

# Explicitly add input buffering cast test (Phase 1A.1 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_input_buffer_cast.c AND NOT TARGET test_input_buffer_cast)
    add_executable(test_input_buffer_cast unit/test_input_buffer_cast.c)
    target_link_libraries(test_input_buffer_cast PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_input_buffer_cast PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_input_buffer_cast COMMAND test_input_buffer_cast)
endif()

# Explicitly add haste cast speed test (Phase 1A.3 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_haste_cast_speed.c AND NOT TARGET test_haste_cast_speed)
    add_executable(test_haste_cast_speed unit/test_haste_cast_speed.c)
    target_link_libraries(test_haste_cast_speed PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_haste_cast_speed PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_haste_cast_speed COMMAND test_haste_cast_speed)
endif()

# Phase 6.1 & 6.3 charge + dodge test (explicit)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_charge_and_dodge.c AND NOT TARGET test_combat_phase6_charge_and_dodge)
    add_executable(test_combat_phase6_charge_and_dodge unit/test_combat_phase6_charge_and_dodge.c)
    target_link_libraries(test_combat_phase6_charge_and_dodge PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_charge_and_dodge PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_charge_and_dodge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_charge_and_dodge COMMAND test_combat_phase6_charge_and_dodge)
endif()

# Phase 6.4/6.5/6.6 backstab + parry + riposte basic test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_parry_backstab_riposte.c AND NOT TARGET test_combat_phase6_parry_backstab_riposte)
    add_executable(test_combat_phase6_parry_backstab_riposte unit/test_combat_phase6_parry_backstab_riposte.c)
    target_link_libraries(test_combat_phase6_parry_backstab_riposte PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_parry_backstab_riposte PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_parry_backstab_riposte PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_parry_backstab_riposte COMMAND test_combat_phase6_parry_backstab_riposte)
endif()

# Phase 6.2 / 6.6 / 6.7 aerial, guard break, deflect placeholder test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_aerial_deflect_guardbreak.c AND NOT TARGET test_combat_phase6_aerial_deflect_guardbreak)
    add_executable(test_combat_phase6_aerial_deflect_guardbreak unit/test_combat_phase6_aerial_deflect_guardbreak.c)
    target_link_libraries(test_combat_phase6_aerial_deflect_guardbreak PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_aerial_deflect_guardbreak PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_aerial_deflect_guardbreak PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_aerial_deflect_guardbreak COMMAND test_combat_phase6_aerial_deflect_guardbreak)
endif()

# Phase 6 extended multipliers test (backstab + guard-break + riposte damage application)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_backstab_guardbreak_riposte_bonus.c AND NOT TARGET test_combat_phase6_backstab_guardbreak_riposte_bonus)
    add_executable(test_combat_phase6_backstab_guardbreak_riposte_bonus unit/test_combat_phase6_backstab_guardbreak_riposte_bonus.c)
    target_link_libraries(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_backstab_guardbreak_riposte_bonus COMMAND test_combat_phase6_backstab_guardbreak_riposte_bonus)
endif()

# Phase 7.1/7.3/7.5 weapon + stance + familiarity basic test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_weapon_stance_familiarity.c AND NOT TARGET test_combat_phase7_weapon_stance_familiarity)
    add_executable(test_combat_phase7_weapon_stance_familiarity unit/test_combat_phase7_weapon_stance_familiarity.c)
    target_link_libraries(test_combat_phase7_weapon_stance_familiarity PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_weapon_stance_familiarity PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_weapon_stance_familiarity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_weapon_stance_familiarity COMMAND test_combat_phase7_weapon_stance_familiarity)
endif()

# Phase 7.4 / 7.6 infusions + durability scalar test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_infusions_durability.c AND NOT TARGET test_combat_phase7_infusions_durability)
    add_executable(test_combat_phase7_infusions_durability unit/test_combat_phase7_infusions_durability.c)
    target_link_libraries(test_combat_phase7_infusions_durability PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_infusions_durability PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_infusions_durability PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_infusions_durability COMMAND test_combat_phase7_infusions_durability)
endif()

# Phase 7.2 armor weight classes test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_armor_weight_classes.c AND NOT TARGET test_combat_phase7_armor_weight_classes)
    add_executable(test_combat_phase7_armor_weight_classes unit/test_combat_phase7_armor_weight_classes.c)
    target_link_libraries(test_combat_phase7_armor_weight_classes PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_armor_weight_classes PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_armor_weight_classes PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_armor_weight_classes COMMAND test_combat_phase7_armor_weight_classes)
endif()

# Phase 7.7 infusion damage redistribution & mitigation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_infusion_split_events.c AND NOT TARGET test_combat_phase7_infusion_split_events)
    add_executable(test_combat_phase7_infusion_split_events unit/test_combat_phase7_infusion_split_events.c)
    target_link_libraries(test_combat_phase7_infusion_split_events PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_infusion_split_events PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_infusion_split_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_infusion_split_events COMMAND test_combat_phase7_infusion_split_events)
endif()

    # Phase 7.8 stance frame timing test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_stance_frame_timing.c AND NOT TARGET test_combat_phase7_stance_frame_timing)
        add_executable(test_combat_phase7_stance_frame_timing unit/test_combat_phase7_stance_frame_timing.c)
        target_link_libraries(test_combat_phase7_stance_frame_timing PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_stance_frame_timing PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_stance_frame_timing PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_stance_frame_timing COMMAND test_combat_phase7_stance_frame_timing)
    endif()

    # Phase 7.7 familiarity cap boundary test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_familiarity_cap.c AND NOT TARGET test_combat_phase7_familiarity_cap)
        add_executable(test_combat_phase7_familiarity_cap unit/test_combat_phase7_familiarity_cap.c)
        target_link_libraries(test_combat_phase7_familiarity_cap PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_familiarity_cap PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_familiarity_cap PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_familiarity_cap COMMAND test_combat_phase7_familiarity_cap)
    endif()

    # Phase 7.7 encumbrance mobility curve (tier thresholds) test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_encumbrance_mobility_curve.c AND NOT TARGET test_combat_phase7_encumbrance_mobility_curve)
        add_executable(test_combat_phase7_encumbrance_mobility_curve unit/test_combat_phase7_encumbrance_mobility_curve.c)
        target_link_libraries(test_combat_phase7_encumbrance_mobility_curve PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_encumbrance_mobility_curve PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_encumbrance_mobility_curve PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_encumbrance_mobility_curve COMMAND test_combat_phase7_encumbrance_mobility_curve)
    endif()

    # Phase 7.7 per-component damage event emission test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_damage_event_components.c AND NOT TARGET test_combat_phase7_damage_event_components)
        add_executable(test_combat_phase7_damage_event_components unit/test_combat_phase7_damage_event_components.c)
        target_link_libraries(test_combat_phase7_damage_event_components PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_damage_event_components PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_damage_event_components PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_damage_event_components COMMAND test_combat_phase7_damage_event_components)
    endif()

# Explicitly add cast weaving & early cancel test (Phase 1A.2/1A.4 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_cast_weave_and_cancel.c AND NOT TARGET test_cast_weave_and_cancel)
    add_executable(test_cast_weave_and_cancel unit/test_cast_weave_and_cancel.c)
    target_link_libraries(test_cast_weave_and_cancel PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_cast_weave_and_cancel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_cast_weave_and_cancel COMMAND test_cast_weave_and_cancel)
endif()

foreach(ut ${UNIT_TESTS})
    get_filename_component(name ${ut} NAME_WE)
    if(TARGET ${name})
        # Skip if already added explicitly above
        continue()
    endif()
    add_executable(${name} ${ut})
    target_link_libraries(${name} PRIVATE rogue_core)
    target_compile_definitions(${name} PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME ${name} COMMAND ${name})
endforeach()

# Explicitly add vegetation collision test (ensure included even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_collision.c AND NOT TARGET test_vegetation_collision)
    add_executable(test_vegetation_collision unit/test_vegetation_collision.c)
    target_link_libraries(test_vegetation_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_collision COMMAND test_vegetation_collision)
endif()

# Explicitly add vegetation canopy block test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_canopy_block.c AND NOT TARGET test_vegetation_canopy_block)
    add_executable(test_vegetation_canopy_block unit/test_vegetation_canopy_block.c)
    target_link_libraries(test_vegetation_canopy_block PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_canopy_block PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_canopy_block COMMAND test_vegetation_canopy_block)
endif()

# Explicitly add vegetation trunk collision behavioural test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_trunk_collision.c AND NOT TARGET test_vegetation_trunk_collision)
    add_executable(test_vegetation_trunk_collision unit/test_vegetation_trunk_collision.c)
    target_link_libraries(test_vegetation_trunk_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_trunk_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_trunk_collision COMMAND test_vegetation_trunk_collision)
endif()

# Explicitly add mob collision test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_mob_collision.c AND NOT TARGET test_mob_collision)
    add_executable(test_mob_collision unit/test_mob_collision.c)
    target_link_libraries(test_mob_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_mob_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_mob_collision COMMAND test_mob_collision)
endif()

# Explicitly add navigation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_navigation.c AND NOT TARGET test_navigation)
    add_executable(test_navigation unit/test_navigation.c)
    target_link_libraries(test_navigation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_navigation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_navigation COMMAND test_navigation)
endif()

# Explicitly add combat block cancel test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_block_cancel.c AND NOT TARGET test_combat_block_cancel)
    add_executable(test_combat_block_cancel unit/test_combat_block_cancel.c)
    target_link_libraries(test_combat_block_cancel PRIVATE rogue_core)
    target_compile_definitions(test_combat_block_cancel PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_block_cancel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_block_cancel COMMAND test_combat_block_cancel)
endif()

# Explicitly add Phase 4.5 reaction cancel & DI test (ensure picked up even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_reaction_cancel_di.c AND NOT TARGET test_combat_phase4_reaction_cancel_di)
    add_executable(test_combat_phase4_reaction_cancel_di unit/test_combat_phase4_reaction_cancel_di.c)
    target_link_libraries(test_combat_phase4_reaction_cancel_di PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase4_reaction_cancel_di PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_reaction_cancel_di PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_reaction_cancel_di COMMAND test_combat_phase4_reaction_cancel_di)
endif()

# Explicitly add Phase 4.6 i-frame overlap protection test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_iframe_overlap.c AND NOT TARGET test_combat_phase4_iframe_overlap)
    add_executable(test_combat_phase4_iframe_overlap unit/test_combat_phase4_iframe_overlap.c)
    target_link_libraries(test_combat_phase4_iframe_overlap PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase4_iframe_overlap PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_iframe_overlap PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_iframe_overlap COMMAND test_combat_phase4_iframe_overlap)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_mitigation.c AND NOT TARGET test_combat_mitigation)
    add_executable(test_combat_mitigation unit/test_combat_mitigation.c)
    target_link_libraries(test_combat_mitigation PRIVATE rogue_core)
    target_compile_definitions(test_combat_mitigation PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_mitigation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_mitigation COMMAND test_combat_mitigation)
endif()

# Explicitly add combat penetration test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_penetration.c AND NOT TARGET test_combat_penetration)
    add_executable(test_combat_penetration unit/test_combat_penetration.c)
    target_link_libraries(test_combat_penetration PRIVATE rogue_core)
    target_compile_definitions(test_combat_penetration PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_penetration PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_penetration COMMAND test_combat_penetration)
endif()

# Explicitly add combat damage events test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_damage_events.c AND NOT TARGET test_combat_damage_events)
    add_executable(test_combat_damage_events unit/test_combat_damage_events.c)
    target_link_libraries(test_combat_damage_events PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_damage_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_damage_events COMMAND test_combat_damage_events)
endif()

# Phase 2.4 crit layering test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_crit_layering.c AND NOT TARGET test_combat_crit_layering)
    add_executable(test_combat_crit_layering unit/test_combat_crit_layering.c)
    target_link_libraries(test_combat_crit_layering PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_crit_layering PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_crit_layering COMMAND test_combat_crit_layering)
endif()

# Phase 2.6 execution trigger test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_execution.c AND NOT TARGET test_combat_execution)
    add_executable(test_combat_execution unit/test_combat_execution.c)
    target_link_libraries(test_combat_execution PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_execution PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_execution COMMAND test_combat_execution)
endif()

# Phase 2.2 phys resist diminishing returns curve test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phys_resist_curve.c AND NOT TARGET test_combat_phys_resist_curve)
    add_executable(test_combat_phys_resist_curve unit/test_combat_phys_resist_curve.c)
    target_link_libraries(test_combat_phys_resist_curve PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phys_resist_curve PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phys_resist_curve COMMAND test_combat_phys_resist_curve)
endif()

# Phase 3.1 guard & poise meter presence test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_guard_poise.c AND NOT TARGET test_combat_phase3_guard_poise)
    add_executable(test_combat_phase3_guard_poise unit/test_combat_phase3_guard_poise.c)
    target_link_libraries(test_combat_phase3_guard_poise PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_guard_poise PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_guard_poise COMMAND test_combat_phase3_guard_poise)
endif()

# Phase 3.2/3.5 encumbrance stamina regen scaling test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_encumbrance.c AND NOT TARGET test_combat_phase3_encumbrance)
    add_executable(test_combat_phase3_encumbrance unit/test_combat_phase3_encumbrance.c)
    target_link_libraries(test_combat_phase3_encumbrance PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_encumbrance PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_encumbrance COMMAND test_combat_phase3_encumbrance)
endif()

# Phase 3.3 poise damage & stagger test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_poise_stagger.c AND NOT TARGET test_combat_phase3_poise_stagger)
    add_executable(test_combat_phase3_poise_stagger unit/test_combat_phase3_poise_stagger.c)
    target_link_libraries(test_combat_phase3_poise_stagger PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_poise_stagger PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_poise_stagger COMMAND test_combat_phase3_poise_stagger)
endif()

# Phase 3.11 new precision tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_guard_cone_edge.c AND NOT TARGET test_combat_phase3_guard_cone_edge)
    add_executable(test_combat_phase3_guard_cone_edge unit/test_combat_phase3_guard_cone_edge.c)
    target_link_libraries(test_combat_phase3_guard_cone_edge PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_guard_cone_edge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_guard_cone_edge COMMAND test_combat_phase3_guard_cone_edge)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_poise_stagger_precision.c AND NOT TARGET test_combat_phase3_poise_stagger_precision)
    add_executable(test_combat_phase3_poise_stagger_precision unit/test_combat_phase3_poise_stagger_precision.c)
    target_link_libraries(test_combat_phase3_poise_stagger_precision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_poise_stagger_precision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_poise_stagger_precision COMMAND test_combat_phase3_poise_stagger_precision)
endif()

# Phase 4 reaction system tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_reactions.c AND NOT TARGET test_combat_phase4_reactions)
    add_executable(test_combat_phase4_reactions unit/test_combat_phase4_reactions.c)
    target_link_libraries(test_combat_phase4_reactions PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_reactions PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_reactions COMMAND test_combat_phase4_reactions)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_cc.c AND NOT TARGET test_combat_phase4_cc)
    add_executable(test_combat_phase4_cc unit/test_combat_phase4_cc.c)
    target_link_libraries(test_combat_phase4_cc PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_cc PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_cc COMMAND test_combat_phase4_cc)
endif()

# Phase 3.4 hyper armor flag plumbing test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_hyper_armor.c AND NOT TARGET test_combat_phase3_hyper_armor)
    add_executable(test_combat_phase3_hyper_armor unit/test_combat_phase3_hyper_armor.c)
    target_link_libraries(test_combat_phase3_hyper_armor PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_hyper_armor PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_hyper_armor COMMAND test_combat_phase3_hyper_armor)
endif()

# Phase 3.6 defensive weight soft cap test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_def_softcap.c AND NOT TARGET test_combat_phase3_def_softcap)
    add_executable(test_combat_phase3_def_softcap unit/test_combat_phase3_def_softcap.c)
    target_link_libraries(test_combat_phase3_def_softcap PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_def_softcap PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_def_softcap COMMAND test_combat_phase3_def_softcap)
endif()

# Phase 3.8 guard blocking & perfect guard test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_guard_block.c AND NOT TARGET test_combat_phase3_guard_block)
    add_executable(test_combat_phase3_guard_block unit/test_combat_phase3_guard_block.c)
    target_link_libraries(test_combat_phase3_guard_block PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_guard_block PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_guard_block COMMAND test_combat_phase3_guard_block)
endif()

# Phase 3.10 poise regen curve test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_poise_regen_curve.c AND NOT TARGET test_combat_phase3_poise_regen_curve)
    add_executable(test_combat_phase3_poise_regen_curve unit/test_combat_phase3_poise_regen_curve.c)
    target_link_libraries(test_combat_phase3_poise_regen_curve PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_poise_regen_curve PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_poise_regen_curve COMMAND test_combat_phase3_poise_regen_curve)
endif()

# Phase 3.11 hyper armor poise immunity test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_hyper_armor_immunity.c AND NOT TARGET test_combat_phase3_hyper_armor_immunity)
    add_executable(test_combat_phase3_hyper_armor_immunity unit/test_combat_phase3_hyper_armor_immunity.c)
    target_link_libraries(test_combat_phase3_hyper_armor_immunity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_hyper_armor_immunity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_hyper_armor_immunity COMMAND test_combat_phase3_hyper_armor_immunity)
endif()

# Explicitly add combat drift timing test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_drift_timing.c AND NOT TARGET test_combat_drift_timing)
    add_executable(test_combat_drift_timing unit/test_combat_drift_timing.c)
    target_link_libraries(test_combat_drift_timing PRIVATE rogue_core)
    target_compile_definitions(test_combat_drift_timing PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_drift_timing PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_drift_timing COMMAND test_combat_drift_timing)
endif()

# Explicitly add combat multi-hit window test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_multi_hit.c AND NOT TARGET test_combat_multi_hit)
    add_executable(test_combat_multi_hit unit/test_combat_multi_hit.c)
    target_link_libraries(test_combat_multi_hit PRIVATE rogue_core)
    target_compile_definitions(test_combat_multi_hit PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_multi_hit PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_multi_hit COMMAND test_combat_multi_hit)
endif()

# Explicitly add combat events test (Phase 1A.5 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_events.c AND NOT TARGET test_combat_events)
    add_executable(test_combat_events unit/test_combat_events.c)
    target_link_libraries(test_combat_events PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_events COMMAND test_combat_events)
endif()

# Explicitly add passive skills test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skills_passive.c AND NOT TARGET test_skills_passive)
    add_executable(test_skills_passive unit/test_skills_passive.c)
    target_link_libraries(test_skills_passive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skills_passive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skills_passive COMMAND test_skills_passive)
endif()

# Explicitly add fireball skill test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_fireball_skill.c AND NOT TARGET test_fireball_skill)
    add_executable(test_fireball_skill unit/test_fireball_skill.c)
    target_link_libraries(test_fireball_skill PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_fireball_skill PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_fireball_skill COMMAND test_fireball_skill)
endif()

# Explicitly add fireball skill test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skill_fireball.c AND NOT TARGET test_skill_fireball)
    add_executable(test_skill_fireball unit/test_skill_fireball.c)
    target_link_libraries(test_skill_fireball PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skill_fireball PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skill_fireball COMMAND test_skill_fireball)
endif()

# Explicitly add A* pathfinding test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_astar.c AND NOT TARGET test_astar)
    add_executable(test_astar unit/test_astar.c)
    target_link_libraries(test_astar PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_astar PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_astar COMMAND test_astar)
endif()

file(GLOB INTEGRATION_TESTS integration/test_*.c)
foreach(it ${INTEGRATION_TESTS})
    get_filename_component(name ${it} NAME_WE)
    add_executable(${name} ${it})
    target_link_libraries(${name} PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    if(ROGUE_ENABLE_SDL)
        add_test(NAME ${name} COMMAND ${name})
        set_tests_properties(${name} PROPERTIES ENVIRONMENT "SDL_VIDEODRIVER=dummy")
    else()
        add_test(NAME ${name} COMMAND ${name})
    endif()
endforeach()

# Explicitly add inventory persistence test (loot phase 4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase4_inventory_persistence.c AND NOT TARGET test_loot_phase4_inventory_persistence)
    add_executable(test_loot_phase4_inventory_persistence unit/test_loot_phase4_inventory_persistence.c)
    target_link_libraries(test_loot_phase4_inventory_persistence PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase4_inventory_persistence PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase4_inventory_persistence COMMAND test_loot_phase4_inventory_persistence)
endif()

# Explicitly add loot phase 5 rarity parse test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_parse.c AND NOT TARGET test_loot_phase5_rarity_parse)
    add_executable(test_loot_phase5_rarity_parse unit/test_loot_phase5_rarity_parse.c)
    target_link_libraries(test_loot_phase5_rarity_parse PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase5_rarity_parse PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_parse COMMAND test_loot_phase5_rarity_parse)
endif()

# Explicitly add loot phase 5 rarity roll test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_roll.c AND NOT TARGET test_loot_phase5_rarity_roll)
    add_executable(test_loot_phase5_rarity_roll unit/test_loot_phase5_rarity_roll.c)
    target_link_libraries(test_loot_phase5_rarity_roll PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase5_rarity_roll PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_roll COMMAND test_loot_phase5_rarity_roll)
endif()

# Explicitly add loot phase 6 merge/despawn test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase6_merge_despawn.c AND NOT TARGET test_loot_phase6_merge_despawn)
    add_executable(test_loot_phase6_merge_despawn unit/test_loot_phase6_merge_despawn.c)
    target_link_libraries(test_loot_phase6_merge_despawn PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase6_merge_despawn PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase6_merge_despawn COMMAND test_loot_phase6_merge_despawn)
endif()

# Explicitly add equipment stat bonus test (14.2 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_stat_bonus.c AND NOT TARGET test_equipment_stat_bonus)
    add_executable(test_equipment_stat_bonus unit/test_equipment_stat_bonus.c)
    target_link_libraries(test_equipment_stat_bonus PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_stat_bonus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_stat_bonus COMMAND test_equipment_stat_bonus)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_stat_cache.c AND NOT TARGET test_stat_cache)
    add_executable(test_stat_cache unit/test_stat_cache.c)
    target_link_libraries(test_stat_cache PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_stat_cache PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_stat_cache COMMAND test_stat_cache)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_unequip_delta.c AND NOT TARGET test_equipment_unequip_delta)
    add_executable(test_equipment_unequip_delta unit/test_equipment_unequip_delta.c)
    target_link_libraries(test_equipment_unequip_delta PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_unequip_delta PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_unequip_delta COMMAND test_equipment_unequip_delta)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_repair_costs.c AND NOT TARGET test_repair_costs)
    add_executable(test_repair_costs unit/test_repair_costs.c)
    target_link_libraries(test_repair_costs PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_repair_costs PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_repair_costs COMMAND test_repair_costs)
endif()

# Add the new Phase 5.7 lock-on obstruction & latency test (guarded for incremental reconfigure)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on_obstruction_latency.c AND NOT TARGET test_combat_phase5_lock_on_obstruction_latency)
    add_executable(test_combat_phase5_lock_on_obstruction_latency unit/test_combat_phase5_lock_on_obstruction_latency.c)
    set_target_properties(test_combat_phase5_lock_on_obstruction_latency PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    target_link_libraries(test_combat_phase5_lock_on_obstruction_latency PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on_obstruction_latency PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on_obstruction_latency COMMAND test_combat_phase5_lock_on_obstruction_latency)
endif()

# Explicitly add multi-target lock-on test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on_multitarget.c AND NOT TARGET test_combat_phase5_lock_on_multitarget)
    add_executable(test_combat_phase5_lock_on_multitarget unit/test_combat_phase5_lock_on_multitarget.c)
    target_link_libraries(test_combat_phase5_lock_on_multitarget PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on_multitarget PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on_multitarget COMMAND test_combat_phase5_lock_on_multitarget)
endif()

# UI Phase 1 basic context & primitive test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase1_basic.c AND NOT TARGET test_ui_phase1_basic)
    add_executable(test_ui_phase1_basic unit/test_ui_phase1_basic.c)
    target_link_libraries(test_ui_phase1_basic PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase1_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase1_basic COMMAND test_ui_phase1_basic)
endif()

# UI Phase 1 extended features (1.4-1.7) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase1_features_ext.c AND NOT TARGET test_ui_phase1_features_ext)
    add_executable(test_ui_phase1_features_ext unit/test_ui_phase1_features_ext.c)
    target_link_libraries(test_ui_phase1_features_ext PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase1_features_ext PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase1_features_ext COMMAND test_ui_phase1_features_ext)
endif()

# UI Phase 2 core primitives test (Image/Sprite/ProgressBar)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_primitives.c AND NOT TARGET test_ui_phase2_primitives)
    add_executable(test_ui_phase2_primitives unit/test_ui_phase2_primitives.c)
    target_link_libraries(test_ui_phase2_primitives PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_primitives PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_primitives COMMAND test_ui_phase2_primitives)
endif()

# UI Phase 2.3/2.7 layout + id hashing test explicit add
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_layout_id.c AND NOT TARGET test_ui_phase2_layout_id)
    add_executable(test_ui_phase2_layout_id unit/test_ui_phase2_layout_id.c)
    target_link_libraries(test_ui_phase2_layout_id PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_layout_id PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_layout_id COMMAND test_ui_phase2_layout_id)
endif()

# UI Phase 2.4/2.5/2.8 scroll + tooltip + navigation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_scroll_tooltip_nav.c AND NOT TARGET test_ui_phase2_scroll_tooltip_nav)
    add_executable(test_ui_phase2_scroll_tooltip_nav unit/test_ui_phase2_scroll_tooltip_nav.c)
    target_link_libraries(test_ui_phase2_scroll_tooltip_nav PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_scroll_tooltip_nav PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_scroll_tooltip_nav COMMAND test_ui_phase2_scroll_tooltip_nav)
endif()

# UI Phase 2.2 interactive widgets test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_interactive.c AND NOT TARGET test_ui_phase2_interactive)
    add_executable(test_ui_phase2_interactive unit/test_ui_phase2_interactive.c)
    target_link_libraries(test_ui_phase2_interactive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_interactive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_interactive COMMAND test_ui_phase2_interactive)
endif()

