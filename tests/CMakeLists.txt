# Ensure SDL doesn't redefine main() in any unit test binaries
add_compile_definitions(SDL_MAIN_HANDLED=1)

# Modularized test suites
include(${CMAKE_CURRENT_LIST_DIR}/cmake/AI.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Skills.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Talents.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/StartScreen.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/UI.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Vendor.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Loot.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/WorldGen.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Config.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Resource.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Sync.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Event.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Dialogue.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/SaveSystem.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/AudioVfx.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Combat.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Equipment.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Enemy.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Inventory.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Vegetation.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Hit.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Progression.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/System_Bridges.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/Util.cmake)

# Minimap loot pings test (Itemsystem 12.4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_minimap_loot_pings.c AND NOT TARGET test_minimap_loot_pings)
    add_executable(test_minimap_loot_pings unit/test_minimap_loot_pings.c)
    target_link_libraries(test_minimap_loot_pings PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_minimap_loot_pings PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_minimap_loot_pings COMMAND test_minimap_loot_pings)
endif()
file(GLOB UNIT_TESTS unit/test_*.c)

# Filter out removed/legacy test filenames that may linger in generated projects
list(FILTER UNIT_TESTS EXCLUDE REGEX ".*test_skills_phase1_foundation.c$")

# Explicitly add new maintainability phase M3.5 projectile config hot reload test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_projectiles_config.c AND NOT TARGET test_projectiles_config)
    add_executable(test_projectiles_config unit/test_projectiles_config.c)
    target_link_libraries(test_projectiles_config PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_projectiles_config PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_projectiles_config COMMAND test_projectiles_config)
endif()
# Phase M3.7: persistence version tag test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_persistence_versions.c AND NOT TARGET test_persistence_versions)
    add_executable(test_persistence_versions unit/test_persistence_versions.c)
    target_link_libraries(test_persistence_versions PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_persistence_versions PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_persistence_versions COMMAND test_persistence_versions)
endif()

# Phase M4.1: projectile config edge cases
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_projectiles_config_edge.c AND NOT TARGET test_projectiles_config_edge)
    add_executable(test_projectiles_config_edge unit/test_projectiles_config_edge.c)
    target_link_libraries(test_projectiles_config_edge PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_projectiles_config_edge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_projectiles_config_edge COMMAND test_projectiles_config_edge)
endif()

# Phase M4.1: persistence edge cases
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_persistence_edge_cases.c AND NOT TARGET test_persistence_edge_cases)
    add_executable(test_persistence_edge_cases unit/test_persistence_edge_cases.c)
    target_link_libraries(test_persistence_edge_cases PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_persistence_edge_cases PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_persistence_edge_cases COMMAND test_persistence_edge_cases)
endif()

foreach(ut ${UNIT_TESTS})
    get_filename_component(name ${ut} NAME_WE)
    if(TARGET ${name})
        # Skip if already added explicitly above
        continue()
    endif()
    add_executable(${name} ${ut})
    target_link_libraries(${name} PRIVATE rogue_core)
    # Prevent SDL from redefining main to SDL_main when SDL headers transitively included
    target_compile_definitions(${name} PRIVATE SDL_MAIN_HANDLED=1)
    target_compile_definitions(${name} PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME ${name} COMMAND ${name})
endforeach()

file(GLOB INTEGRATION_TESTS integration/test_*.c)
foreach(it ${INTEGRATION_TESTS})
    get_filename_component(name ${it} NAME_WE)
    add_executable(${name} ${it})
    target_link_libraries(${name} PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    if(ROGUE_ENABLE_SDL)
        add_test(NAME ${name} COMMAND ${name})
        set_tests_properties(${name} PROPERTIES ENVIRONMENT "SDL_VIDEODRIVER=dummy")
    else()
        add_test(NAME ${name} COMMAND ${name})
    endif()
endforeach()
