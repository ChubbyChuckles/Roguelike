# Loot filter predicate evaluation test (Itemsystem 12.7)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_filter_predicates.c AND NOT TARGET test_loot_filter_predicates)
    add_executable(test_loot_filter_predicates unit/test_loot_filter_predicates.c)
    target_link_libraries(test_loot_filter_predicates PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_filter_predicates PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_filter_predicates COMMAND test_loot_filter_predicates)
endif()

# Equipment Phase 5 sockets test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase5_sockets.c AND NOT TARGET test_equipment_phase5_sockets)
    add_executable(test_equipment_phase5_sockets unit/test_equipment_phase5_sockets.c)
    target_link_libraries(test_equipment_phase5_sockets PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_sockets PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_sockets COMMAND test_equipment_phase5_sockets)
endif()

# Equipment Phase 5 gems test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase5_gems.c AND NOT TARGET test_equipment_phase5_gems)
    add_executable(test_equipment_phase5_gems unit/test_equipment_phase5_gems.c)
    target_link_libraries(test_equipment_phase5_gems PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_gems PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_gems COMMAND test_equipment_phase5_gems)
    set_tests_properties(test_equipment_phase5_gems PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
endif()

    add_executable(test_equipment_phase5_enchant_reforge unit/test_equipment_phase5_enchant_reforge.c)
    target_link_libraries(test_equipment_phase5_enchant_reforge PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_enchant_reforge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_enchant_reforge COMMAND test_equipment_phase5_enchant_reforge)
    set_tests_properties(test_equipment_phase5_enchant_reforge PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    add_executable(test_equipment_phase5_protective_seal unit/test_equipment_phase5_protective_seal.c)
    target_link_libraries(test_equipment_phase5_protective_seal PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase5_protective_seal PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase5_protective_seal COMMAND test_equipment_phase5_protective_seal)
    set_tests_properties(test_equipment_phase5_protective_seal PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    add_executable(test_equipment_phase6_proc_engine unit/test_equipment_phase6_proc_engine.c)
    target_link_libraries(test_equipment_phase6_proc_engine PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase6_proc_engine PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase6_proc_engine COMMAND test_equipment_phase6_proc_engine)
    set_tests_properties(test_equipment_phase6_proc_engine PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    # Extended proc engine stacking/order/telemetry test (Phase 6.4-6.7)
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase6_proc_engine_extended.c AND NOT TARGET test_equipment_phase6_proc_engine_extended)
        add_executable(test_equipment_phase6_proc_engine_extended unit/test_equipment_phase6_proc_engine_extended.c)
        target_link_libraries(test_equipment_phase6_proc_engine_extended PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase6_proc_engine_extended PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase6_proc_engine_extended COMMAND test_equipment_phase6_proc_engine_extended)
        set_tests_properties(test_equipment_phase6_proc_engine_extended PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    endif()
        add_executable(test_equipment_phase7_defensive unit/test_equipment_phase7_defensive.c)
        target_link_libraries(test_equipment_phase7_defensive PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_defensive PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_defensive COMMAND test_equipment_phase7_defensive)
        set_tests_properties(test_equipment_phase7_defensive PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_block_affixes unit/test_equipment_phase7_block_affixes.c)
        target_link_libraries(test_equipment_phase7_block_affixes PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_block_affixes PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_block_affixes COMMAND test_equipment_phase7_block_affixes)
        set_tests_properties(test_equipment_phase7_block_affixes PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_conversion_reflect unit/test_equipment_phase7_conversion_reflect.c)
        target_link_libraries(test_equipment_phase7_conversion_reflect PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_conversion_reflect PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_conversion_reflect COMMAND test_equipment_phase7_conversion_reflect)
        set_tests_properties(test_equipment_phase7_conversion_reflect PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_affix_parsing_newstats unit/test_equipment_phase7_affix_parsing_newstats.c)
        target_link_libraries(test_equipment_phase7_affix_parsing_newstats PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_affix_parsing_newstats PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_affix_parsing_newstats COMMAND test_equipment_phase7_affix_parsing_newstats)
        set_tests_properties(test_equipment_phase7_affix_parsing_newstats PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase7_reactive_shield unit/test_equipment_phase7_reactive_shield.c)
        target_link_libraries(test_equipment_phase7_reactive_shield PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase7_reactive_shield PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase7_reactive_shield COMMAND test_equipment_phase7_reactive_shield)
        set_tests_properties(test_equipment_phase7_reactive_shield PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase8_durability_model unit/test_equipment_phase8_durability_model.c)
        target_link_libraries(test_equipment_phase8_durability_model PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase8_durability_model PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase8_durability_model COMMAND test_equipment_phase8_durability_model)
        set_tests_properties(test_equipment_phase8_durability_model PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase8_repair_cost unit/test_equipment_phase8_repair_cost.c)
        target_link_libraries(test_equipment_phase8_repair_cost PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase8_repair_cost PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase8_repair_cost COMMAND test_equipment_phase8_repair_cost)
        set_tests_properties(test_equipment_phase8_repair_cost PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        add_executable(test_equipment_phase8_salvage_fracture unit/test_equipment_phase8_salvage_fracture.c)
        target_link_libraries(test_equipment_phase8_salvage_fracture PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_equipment_phase8_salvage_fracture PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase8_salvage_fracture COMMAND test_equipment_phase8_salvage_fracture)
        set_tests_properties(test_equipment_phase8_salvage_fracture PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 9 Loadout Optimization tests
        add_executable(test_equipment_phase9_loadout_opt unit/test_equipment_phase9_loadout_opt.c)
        target_link_libraries(test_equipment_phase9_loadout_opt PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase9_loadout_opt PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase9_loadout_opt COMMAND test_equipment_phase9_loadout_opt)
        set_tests_properties(test_equipment_phase9_loadout_opt PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 10.4 Quality metric test
        add_executable(test_equipment_phase10_quality unit/test_equipment_phase10_quality.c)
        target_link_libraries(test_equipment_phase10_quality PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase10_quality PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase10_quality COMMAND test_equipment_phase10_quality)
        set_tests_properties(test_equipment_phase10_quality PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 10.1-10.3 crafting pipeline test (upgrade stones, affix transfer, fusion)
        add_executable(test_equipment_phase10_crafting unit/test_equipment_phase10_crafting.c)
        target_link_libraries(test_equipment_phase10_crafting PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase10_crafting PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase10_crafting COMMAND test_equipment_phase10_crafting)
        set_tests_properties(test_equipment_phase10_crafting PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 10.5 crafting success chance scaling test (optional)
        add_executable(test_equipment_phase10_crafting_success unit/test_equipment_phase10_crafting_success.c)
        target_link_libraries(test_equipment_phase10_crafting_success PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase10_crafting_success PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase10_crafting_success COMMAND test_equipment_phase10_crafting_success)
        set_tests_properties(test_equipment_phase10_crafting_success PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 11 analytics snapshot & histogram test
        add_executable(test_equipment_phase11_analytics unit/test_equipment_phase11_analytics.c)
        target_link_libraries(test_equipment_phase11_analytics PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase11_analytics PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase11_analytics COMMAND test_equipment_phase11_analytics)
        set_tests_properties(test_equipment_phase11_analytics PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 11.5-11.6 balance analytics & A/B harness tests
        add_executable(test_equipment_phase11_balance unit/test_equipment_phase11_balance.c)
        target_link_libraries(test_equipment_phase11_balance PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase11_balance PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase11_balance COMMAND test_equipment_phase11_balance)
        set_tests_properties(test_equipment_phase11_balance PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 12 initial UI helpers (panel, layered tooltip, proc preview)
        add_executable(test_equipment_phase12_ui unit/test_equipment_phase12_ui.c)
        target_link_libraries(test_equipment_phase12_ui PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase12_ui PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase12_ui COMMAND test_equipment_phase12_ui)
        set_tests_properties(test_equipment_phase12_ui PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

        # Phase 13 equipment persistence & hash
        add_executable(test_equipment_phase13_persistence unit/test_equipment_phase13_persistence.c)
        target_link_libraries(test_equipment_phase13_persistence PRIVATE rogue_core)
        if (SDL2_FOUND AND NOT ROGUE_HEADLESS)
            target_compile_definitions(test_equipment_phase13_persistence PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_equipment_phase13_persistence COMMAND test_equipment_phase13_persistence)
        set_tests_properties(test_equipment_phase13_persistence PROPERTIES WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

# UI Phase 6.2 bars + AP smoothing test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase6_bars_ap.c AND NOT TARGET test_ui_phase6_bars_ap)
    add_executable(test_ui_phase6_bars_ap unit/test_ui_phase6_bars_ap.c)
    target_link_libraries(test_ui_phase6_bars_ap PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase6_bars_ap PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase6_bars_ap COMMAND test_ui_phase6_bars_ap)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase13_slot_migration.c AND NOT TARGET test_equipment_phase13_slot_migration)
    add_executable(test_equipment_phase13_slot_migration unit/test_equipment_phase13_slot_migration.c)
    target_link_libraries(test_equipment_phase13_slot_migration PRIVATE rogue_core)
    if(ROGUE_BUILD_WITH_SDL2)
        target_compile_definitions(test_equipment_phase13_slot_migration PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase13_slot_migration COMMAND test_equipment_phase13_slot_migration)
endif()
# UI Phase 6.3 buff belt test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase6_buff_belt.c AND NOT TARGET test_ui_phase6_buff_belt)
    add_executable(test_ui_phase6_buff_belt unit/test_ui_phase6_buff_belt.c)
    target_link_libraries(test_ui_phase6_buff_belt PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase6_buff_belt PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase6_buff_belt COMMAND test_ui_phase6_buff_belt)
endif()
    
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase6_minimap_metrics_alerts.c AND NOT TARGET test_ui_phase6_minimap_metrics_alerts)
    add_executable(test_ui_phase6_minimap_metrics_alerts unit/test_ui_phase6_minimap_metrics_alerts.c)
    target_link_libraries(test_ui_phase6_minimap_metrics_alerts PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase6_minimap_metrics_alerts PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase6_minimap_metrics_alerts COMMAND test_ui_phase6_minimap_metrics_alerts)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase7_theme.c AND NOT TARGET test_ui_phase7_theme)
    add_executable(test_ui_phase7_theme unit/test_ui_phase7_theme.c)
    target_link_libraries(test_ui_phase7_theme PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase7_theme PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase7_theme COMMAND test_ui_phase7_theme)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase7_accessibility.c AND NOT TARGET test_ui_phase7_accessibility)
    add_executable(test_ui_phase7_accessibility unit/test_ui_phase7_accessibility.c)
    target_link_libraries(test_ui_phase7_accessibility PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase7_accessibility PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase7_accessibility COMMAND test_ui_phase7_accessibility)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase8_animation.c AND NOT TARGET test_ui_phase8_animation)
    add_executable(test_ui_phase8_animation unit/test_ui_phase8_animation.c)
    target_link_libraries(test_ui_phase8_animation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase8_animation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase8_animation COMMAND test_ui_phase8_animation)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase8_timeline.c AND NOT TARGET test_ui_phase8_timeline)
    add_executable(test_ui_phase8_timeline unit/test_ui_phase8_timeline.c)
    target_link_libraries(test_ui_phase8_timeline PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase8_timeline PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase8_timeline COMMAND test_ui_phase8_timeline)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase9_perf_virtual.c AND NOT TARGET test_ui_phase9_perf_virtual)
    add_executable(test_ui_phase9_perf_virtual unit/test_ui_phase9_perf_virtual.c)
    target_link_libraries(test_ui_phase9_perf_virtual PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase9_perf_virtual PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase9_perf_virtual COMMAND test_ui_phase9_perf_virtual)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase9_extended.c AND NOT TARGET test_ui_phase9_extended)
    add_executable(test_ui_phase9_extended unit/test_ui_phase9_extended.c)
    target_link_libraries(test_ui_phase9_extended PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase9_extended PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase9_extended COMMAND test_ui_phase9_extended)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase9_virtual_inventory.c AND NOT TARGET test_ui_phase9_virtual_inventory)
    add_executable(test_ui_phase9_virtual_inventory unit/test_ui_phase9_virtual_inventory.c)
    target_link_libraries(test_ui_phase9_virtual_inventory PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase9_virtual_inventory PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase9_virtual_inventory COMMAND test_ui_phase9_virtual_inventory)
endif()

# UI Phase 10.1 headless harness test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase10_headless_harness.c AND NOT TARGET test_ui_phase10_headless_harness)
    add_executable(test_ui_phase10_headless_harness unit/test_ui_phase10_headless_harness.c)
    target_link_libraries(test_ui_phase10_headless_harness PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase10_headless_harness PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase10_headless_harness COMMAND test_ui_phase10_headless_harness)
endif()

# World Generation Phase 1 foundation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase1_foundation.c AND NOT TARGET test_worldgen_phase1_foundation)
    add_executable(test_worldgen_phase1_foundation unit/test_worldgen_phase1_foundation.c)
    target_link_libraries(test_worldgen_phase1_foundation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase1_foundation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase1_foundation COMMAND test_worldgen_phase1_foundation)
endif()

# World Generation Phase 2 macro layout test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase2_macro.c AND NOT TARGET test_worldgen_phase2_macro)
    add_executable(test_worldgen_phase2_macro unit/test_worldgen_phase2_macro.c)
    target_link_libraries(test_worldgen_phase2_macro PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase2_macro PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase2_macro COMMAND test_worldgen_phase2_macro)
endif()

# World Generation Phase 3 biome descriptor & registry test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase3_biome_descriptors.c AND NOT TARGET test_worldgen_phase3_biome_descriptors)
    add_executable(test_worldgen_phase3_biome_descriptors unit/test_worldgen_phase3_biome_descriptors.c)
    target_link_libraries(test_worldgen_phase3_biome_descriptors PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase3_biome_descriptors PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase3_biome_descriptors COMMAND test_worldgen_phase3_biome_descriptors)
endif()

# World Generation Phase 4 local terrain & caves test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase4_local_caves.c AND NOT TARGET test_worldgen_phase4_local_caves)
    add_executable(test_worldgen_phase4_local_caves unit/test_worldgen_phase4_local_caves.c)
    target_link_libraries(test_worldgen_phase4_local_caves PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase4_local_caves PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase4_local_caves COMMAND test_worldgen_phase4_local_caves)
endif()

# World Generation Phase 5 rivers & erosion detailing test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase5_rivers_erosion.c AND NOT TARGET test_worldgen_phase5_rivers_erosion)
    add_executable(test_worldgen_phase5_rivers_erosion unit/test_worldgen_phase5_rivers_erosion.c)
    target_link_libraries(test_worldgen_phase5_rivers_erosion PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase5_rivers_erosion PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase5_rivers_erosion COMMAND test_worldgen_phase5_rivers_erosion)
endif()

# World Generation Phase 6 structures & POIs test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase6_structures.c AND NOT TARGET test_worldgen_phase6_structures)
    add_executable(test_worldgen_phase6_structures unit/test_worldgen_phase6_structures.c)
    target_link_libraries(test_worldgen_phase6_structures PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase6_structures PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase6_structures COMMAND test_worldgen_phase6_structures)
endif()

# World Generation Phase 7 dungeon generator test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase7_dungeon.c AND NOT TARGET test_worldgen_phase7_dungeon)
    add_executable(test_worldgen_phase7_dungeon unit/test_worldgen_phase7_dungeon.c)
    target_link_libraries(test_worldgen_phase7_dungeon PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase7_dungeon PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase7_dungeon COMMAND test_worldgen_phase7_dungeon)
endif()

# World Generation Phase 8 fauna & spawn ecology test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase8_spawns.c AND NOT TARGET test_worldgen_phase8_spawns)
    add_executable(test_worldgen_phase8_spawns unit/test_worldgen_phase8_spawns.c)
    target_link_libraries(test_worldgen_phase8_spawns PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase8_spawns PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase8_spawns COMMAND test_worldgen_phase8_spawns)
endif()

# World Generation Phase 9 resource nodes test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase9_resources.c AND NOT TARGET test_worldgen_phase9_resources)
    add_executable(test_worldgen_phase9_resources unit/test_worldgen_phase9_resources.c)
    target_link_libraries(test_worldgen_phase9_resources PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase9_resources PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase9_resources COMMAND test_worldgen_phase9_resources)
endif()

# World Generation Phase 10 weather simulation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase10_weather.c AND NOT TARGET test_worldgen_phase10_weather)
    add_executable(test_worldgen_phase10_weather unit/test_worldgen_phase10_weather.c)
    target_link_libraries(test_worldgen_phase10_weather PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase10_weather PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase10_weather COMMAND test_worldgen_phase10_weather)
endif()

# World Generation Phase 11 streaming & caching test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase11_streaming.c AND NOT TARGET test_worldgen_phase11_streaming)
    add_executable(test_worldgen_phase11_streaming unit/test_worldgen_phase11_streaming.c)
    target_link_libraries(test_worldgen_phase11_streaming PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase11_streaming PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase11_streaming COMMAND test_worldgen_phase11_streaming)
endif()

# World Generation Phase 12 telemetry & analytics test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase12_telemetry.c AND NOT TARGET test_worldgen_phase12_telemetry)
    add_executable(test_worldgen_phase12_telemetry unit/test_worldgen_phase12_telemetry.c)
    target_link_libraries(test_worldgen_phase12_telemetry PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase12_telemetry PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase12_telemetry COMMAND test_worldgen_phase12_telemetry)
endif()

# World Generation Phase 13 modding & data extensibility test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase13_modding.c AND NOT TARGET test_worldgen_phase13_modding)
    add_executable(test_worldgen_phase13_modding unit/test_worldgen_phase13_modding.c)
    target_link_libraries(test_worldgen_phase13_modding PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase13_modding PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase13_modding COMMAND test_worldgen_phase13_modding)
endif()

# World Generation Phase 14 optimization & memory test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_worldgen_phase14_optimization.c AND NOT TARGET test_worldgen_phase14_optimization)
    add_executable(test_worldgen_phase14_optimization unit/test_worldgen_phase14_optimization.c)
    target_link_libraries(test_worldgen_phase14_optimization PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_worldgen_phase14_optimization PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_worldgen_phase14_optimization COMMAND test_worldgen_phase14_optimization)
endif()

# Phase 14.4 parallel optimization test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase14_parallel.c AND NOT TARGET test_equipment_phase14_parallel)
    add_executable(test_equipment_phase14_parallel unit/test_equipment_phase14_parallel.c)
    target_link_libraries(test_equipment_phase14_parallel PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase14_parallel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase14_parallel COMMAND test_equipment_phase14_parallel)
endif()

# Phase 15 integrity & anti-duplication test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase15_integrity.c AND NOT TARGET test_equipment_phase15_integrity)
    add_executable(test_equipment_phase15_integrity unit/test_equipment_phase15_integrity.c)
    target_link_libraries(test_equipment_phase15_integrity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase15_integrity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase15_integrity COMMAND test_equipment_phase15_integrity)
endif()

# Phase 15.4–15.6 replay auditor & blacklist tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase15_replay_auditor.c AND NOT TARGET test_equipment_phase15_replay_auditor)
    add_executable(test_equipment_phase15_replay_auditor unit/test_equipment_phase15_replay_auditor.c)
    target_link_libraries(test_equipment_phase15_replay_auditor PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase15_replay_auditor PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase15_replay_auditor COMMAND test_equipment_phase15_replay_auditor)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase10_golden_theming.c AND NOT TARGET test_ui_phase10_golden_theming)
    add_executable(test_ui_phase10_golden_theming unit/test_ui_phase10_golden_theming.c)
    target_link_libraries(test_ui_phase10_golden_theming PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase10_golden_theming PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase10_golden_theming COMMAND test_ui_phase10_golden_theming)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase10_layout_fuzz.c AND NOT TARGET test_ui_phase10_layout_fuzz)
    add_executable(test_ui_phase10_layout_fuzz unit/test_ui_phase10_layout_fuzz.c)
    target_link_libraries(test_ui_phase10_layout_fuzz PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase10_layout_fuzz PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase10_layout_fuzz COMMAND test_ui_phase10_layout_fuzz)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase10_perf_smoke.c AND NOT TARGET test_ui_phase10_perf_smoke)
    add_executable(test_ui_phase10_perf_smoke unit/test_ui_phase10_perf_smoke.c)
    target_link_libraries(test_ui_phase10_perf_smoke PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase10_perf_smoke PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase10_perf_smoke COMMAND test_ui_phase10_perf_smoke)
endif()

# UI Phase 10.3 navigation traversal test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase10_navigation_traversal.c AND NOT TARGET test_ui_phase10_navigation_traversal)
    add_executable(test_ui_phase10_navigation_traversal unit/test_ui_phase10_navigation_traversal.c)
    target_link_libraries(test_ui_phase10_navigation_traversal PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase10_navigation_traversal PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase10_navigation_traversal COMMAND test_ui_phase10_navigation_traversal)
endif()

# UI Phase 11 docs & tooling test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase11_docs_tooling.c AND NOT TARGET test_ui_phase11_docs_tooling)
    add_executable(test_ui_phase11_docs_tooling unit/test_ui_phase11_docs_tooling.c)
    target_link_libraries(test_ui_phase11_docs_tooling PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase11_docs_tooling PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase11_docs_tooling COMMAND test_ui_phase11_docs_tooling)
endif()

# Loot API doc generator test (Itemsystem 23.5)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_api_doc.c AND NOT TARGET test_loot_phase23_api_doc)
    add_executable(test_loot_phase23_api_doc unit/test_loot_phase23_api_doc.c)
    target_link_libraries(test_loot_phase23_api_doc PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase23_api_doc PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_api_doc COMMAND test_loot_phase23_api_doc)
endif()

# Example config pack load test (Itemsystem 23.4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_example_pack.c AND NOT TARGET test_loot_phase23_example_pack)
    add_executable(test_loot_phase23_example_pack unit/test_loot_phase23_example_pack.c)
    target_link_libraries(test_loot_phase23_example_pack PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase23_example_pack PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_example_pack COMMAND test_loot_phase23_example_pack)
endif()

# Doc path finder test (Cleanup 24.1 extension)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_doc_paths.c AND NOT TARGET test_loot_phase23_doc_paths)
    add_executable(test_loot_phase23_doc_paths unit/test_loot_phase23_doc_paths.c)
    target_link_libraries(test_loot_phase23_doc_paths PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase23_doc_paths PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_doc_paths COMMAND test_loot_phase23_doc_paths)
endif()
# Style guide doc presence test (Itemsystem 23.2)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase23_style_guide.c AND NOT TARGET test_loot_phase23_style_guide)
    add_executable(test_loot_phase23_style_guide unit/test_loot_phase23_style_guide.c)
    target_link_libraries(test_loot_phase23_style_guide PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase23_style_guide PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase23_style_guide COMMAND test_loot_phase23_style_guide)
endif()
# Loot tooltip comparison test (Itemsystem 12.6)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooltip_compare.c AND NOT TARGET test_loot_tooltip_compare)
    add_executable(test_loot_tooltip_compare unit/test_loot_tooltip_compare.c)
    target_link_libraries(test_loot_tooltip_compare PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_tooltip_compare PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooltip_compare COMMAND test_loot_tooltip_compare)
endif()
# Loot tooltip basic test (Itemsystem 12.5)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooltip_basic.c AND NOT TARGET test_loot_tooltip_basic)
    add_executable(test_loot_tooltip_basic unit/test_loot_tooltip_basic.c)
    target_link_libraries(test_loot_tooltip_basic PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_tooltip_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooltip_basic COMMAND test_loot_tooltip_basic)
endif()
# Minimap loot pings test (Itemsystem 12.4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_minimap_loot_pings.c AND NOT TARGET test_minimap_loot_pings)
    add_executable(test_minimap_loot_pings unit/test_minimap_loot_pings.c)
    target_link_libraries(test_minimap_loot_pings PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_minimap_loot_pings PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_minimap_loot_pings COMMAND test_minimap_loot_pings)
endif()
file(GLOB UNIT_TESTS unit/test_*.c)

# Explicitly add AI Phase 1.1-1.3 behavior tree scaffolding test to avoid glob caching issues
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_behavior_tree.c AND NOT TARGET test_ai_behavior_tree)
    add_executable(test_ai_behavior_tree unit/test_ai_behavior_tree.c)
    target_link_libraries(test_ai_behavior_tree PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_behavior_tree PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_behavior_tree COMMAND test_ai_behavior_tree)
endif()

# AI Phase 1.4-1.7 scheduler/trace + RNG test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase1_scheduler_trace.c AND NOT TARGET test_ai_phase1_scheduler_trace)
    add_executable(test_ai_phase1_scheduler_trace unit/test_ai_phase1_scheduler_trace.c)
    target_link_libraries(test_ai_phase1_scheduler_trace PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase1_scheduler_trace PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase1_scheduler_trace COMMAND test_ai_phase1_scheduler_trace)
endif()

# AI Phase 2 blackboard extensions test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase2_blackboard.c AND NOT TARGET test_ai_phase2_blackboard)
    add_executable(test_ai_phase2_blackboard unit/test_ai_phase2_blackboard.c)
    target_link_libraries(test_ai_phase2_blackboard PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase2_blackboard PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase2_blackboard COMMAND test_ai_phase2_blackboard)
endif()

# AI Phase 3 perception system test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase3_perception.c AND NOT TARGET test_ai_phase3_perception)
    add_executable(test_ai_phase3_perception unit/test_ai_phase3_perception.c)
    target_link_libraries(test_ai_phase3_perception PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase3_perception PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase3_perception COMMAND test_ai_phase3_perception)
endif()

# AI Phase 4 node library test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_nodes.c AND NOT TARGET test_ai_phase4_nodes)
    add_executable(test_ai_phase4_nodes unit/test_ai_phase4_nodes.c)
    target_link_libraries(test_ai_phase4_nodes PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_nodes PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_nodes COMMAND test_ai_phase4_nodes)
endif()

# AI Phase 4 tactical/strafe test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_tactical.c AND NOT TARGET test_ai_phase4_tactical)
    add_executable(test_ai_phase4_tactical unit/test_ai_phase4_tactical.c)
    target_link_libraries(test_ai_phase4_tactical PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_tactical PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_tactical COMMAND test_ai_phase4_tactical)
endif()

# AI Phase 4 cover seek test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_cover.c AND NOT TARGET test_ai_phase4_cover)
    add_executable(test_ai_phase4_cover unit/test_ai_phase4_cover.c)
    target_link_libraries(test_ai_phase4_cover PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_cover PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_cover COMMAND test_ai_phase4_cover)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase4_retry.c AND NOT TARGET test_ai_phase4_retry)
    add_executable(test_ai_phase4_retry unit/test_ai_phase4_retry.c)
    target_link_libraries(test_ai_phase4_retry PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase4_retry PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase4_retry COMMAND test_ai_phase4_retry)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase5_enemy_integration.c AND NOT TARGET test_ai_phase5_enemy_integration)
    add_executable(test_ai_phase5_enemy_integration unit/test_ai_phase5_enemy_integration.c)
    target_link_libraries(test_ai_phase5_enemy_integration PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase5_enemy_integration PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase5_enemy_integration COMMAND test_ai_phase5_enemy_integration)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase9_budget.c AND NOT TARGET test_ai_phase9_budget)
    add_executable(test_ai_phase9_budget unit/test_ai_phase9_budget.c)
    target_link_libraries(test_ai_phase9_budget PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase9_budget PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase9_budget COMMAND test_ai_phase9_budget)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase9_incremental_lod.c AND NOT TARGET test_ai_phase9_incremental_lod)
    add_executable(test_ai_phase9_incremental_lod unit/test_ai_phase9_incremental_lod.c)
    target_link_libraries(test_ai_phase9_incremental_lod PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase9_incremental_lod PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase9_incremental_lod COMMAND test_ai_phase9_incremental_lod)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase9_agent_pool.c AND NOT TARGET test_ai_phase9_agent_pool)
    add_executable(test_ai_phase9_agent_pool unit/test_ai_phase9_agent_pool.c)
    target_link_libraries(test_ai_phase9_agent_pool PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase9_agent_pool PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase9_agent_pool COMMAND test_ai_phase9_agent_pool)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase10_debug.c AND NOT TARGET test_ai_phase10_debug)
    add_executable(test_ai_phase10_debug unit/test_ai_phase10_debug.c)
    target_link_libraries(test_ai_phase10_debug PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase10_debug PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase10_debug COMMAND test_ai_phase10_debug)
endif()

# AI Phase 11 tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_core_nodes.c AND NOT TARGET test_ai_phase11_core_nodes)
    add_executable(test_ai_phase11_core_nodes unit/test_ai_phase11_core_nodes.c)
    target_link_libraries(test_ai_phase11_core_nodes PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_core_nodes PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_core_nodes COMMAND test_ai_phase11_core_nodes)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_blackboard_fuzz.c AND NOT TARGET test_ai_phase11_blackboard_fuzz)
    add_executable(test_ai_phase11_blackboard_fuzz unit/test_ai_phase11_blackboard_fuzz.c)
    target_link_libraries(test_ai_phase11_blackboard_fuzz PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_blackboard_fuzz PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_blackboard_fuzz COMMAND test_ai_phase11_blackboard_fuzz)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_scenario.c AND NOT TARGET test_ai_phase11_scenario)
    add_executable(test_ai_phase11_scenario unit/test_ai_phase11_scenario.c)
    target_link_libraries(test_ai_phase11_scenario PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_scenario PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_scenario COMMAND test_ai_phase11_scenario)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_repro_trace.c AND NOT TARGET test_ai_phase11_repro_trace)
    add_executable(test_ai_phase11_repro_trace unit/test_ai_phase11_repro_trace.c)
    target_link_libraries(test_ai_phase11_repro_trace PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_repro_trace PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_repro_trace COMMAND test_ai_phase11_repro_trace)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ai_phase11_perf_guard.c AND NOT TARGET test_ai_phase11_perf_guard)
    add_executable(test_ai_phase11_perf_guard unit/test_ai_phase11_perf_guard.c)
    target_link_libraries(test_ai_phase11_perf_guard PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ai_phase11_perf_guard PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ai_phase11_perf_guard COMMAND test_ai_phase11_perf_guard)
endif()

# Filter out removed/legacy test filenames that may linger in generated projects
list(FILTER UNIT_TESTS EXCLUDE REGEX ".*test_skills_phase1_foundation.c$")

# Crafting system tests (11.2 - 11.6)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_crafting_basic.c AND NOT TARGET test_crafting_basic)
    add_executable(test_crafting_basic unit/test_crafting_basic.c)
    target_link_libraries(test_crafting_basic PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_crafting_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_crafting_basic COMMAND test_crafting_basic)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_reroll_affix.c AND NOT TARGET test_reroll_affix)
    add_executable(test_reroll_affix unit/test_reroll_affix.c)
    target_link_libraries(test_reroll_affix PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_reroll_affix PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_reroll_affix COMMAND test_reroll_affix)
endif()

# Loot filter tests (12.1 - 12.2)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_filter_basic.c AND NOT TARGET test_loot_filter_basic)
    add_executable(test_loot_filter_basic unit/test_loot_filter_basic.c)
    target_link_libraries(test_loot_filter_basic PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_filter_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_filter_basic COMMAND test_loot_filter_basic)
endif()

# Ensure dialogue tests are included (some CI environments cache glob results pre-file creation)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase0.c AND NOT TARGET test_dialogue_phase0)
    add_executable(test_dialogue_phase0 unit/test_dialogue_phase0.c)
    target_link_libraries(test_dialogue_phase0 PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase0 PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase0 COMMAND test_dialogue_phase0)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase1.c AND NOT TARGET test_dialogue_phase1)
    add_executable(test_dialogue_phase1 unit/test_dialogue_phase1.c)
    target_link_libraries(test_dialogue_phase1 PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase1 PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase1 COMMAND test_dialogue_phase1)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase2_tokens.c AND NOT TARGET test_dialogue_phase2_tokens)
    add_executable(test_dialogue_phase2_tokens unit/test_dialogue_phase2_tokens.c)
    target_link_libraries(test_dialogue_phase2_tokens PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase2_tokens PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase2_tokens COMMAND test_dialogue_phase2_tokens)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase3_effects.c AND NOT TARGET test_dialogue_phase3_effects)
    add_executable(test_dialogue_phase3_effects unit/test_dialogue_phase3_effects.c)
    target_link_libraries(test_dialogue_phase3_effects PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase3_effects PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase3_effects COMMAND test_dialogue_phase3_effects)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase4_persistence.c AND NOT TARGET test_dialogue_phase4_persistence)
    add_executable(test_dialogue_phase4_persistence unit/test_dialogue_phase4_persistence.c)
    target_link_libraries(test_dialogue_phase4_persistence PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase4_persistence PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase4_persistence COMMAND test_dialogue_phase4_persistence)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase5_localization.c AND NOT TARGET test_dialogue_phase5_localization)
    add_executable(test_dialogue_phase5_localization unit/test_dialogue_phase5_localization.c)
    target_link_libraries(test_dialogue_phase5_localization PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase5_localization PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase5_localization COMMAND test_dialogue_phase5_localization)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase6_typewriter.c AND NOT TARGET test_dialogue_phase6_typewriter)
    add_executable(test_dialogue_phase6_typewriter unit/test_dialogue_phase6_typewriter.c)
    target_link_libraries(test_dialogue_phase6_typewriter PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase6_typewriter PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase6_typewriter COMMAND test_dialogue_phase6_typewriter)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_phase7_analytics.c AND NOT TARGET test_dialogue_phase7_analytics)
    add_executable(test_dialogue_phase7_analytics unit/test_dialogue_phase7_analytics.c)
    target_link_libraries(test_dialogue_phase7_analytics PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_phase7_analytics PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_phase7_analytics COMMAND test_dialogue_phase7_analytics)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_dialogue_json.c AND NOT TARGET test_dialogue_json)
    add_executable(test_dialogue_json unit/test_dialogue_json.c)
    target_link_libraries(test_dialogue_json PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_dialogue_json PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_dialogue_json COMMAND test_dialogue_json)
endif()

# Phase 1 SaveManager roundtrip binary test (explicit add to avoid glob cache issues)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_roundtrip.c AND NOT TARGET test_save_roundtrip)
    add_executable(test_save_roundtrip unit/test_save_roundtrip.c)
    target_link_libraries(test_save_roundtrip PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_roundtrip COMMAND test_save_roundtrip)
endif()

# Autosave ring test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_autosave_ring.c AND NOT TARGET test_save_autosave_ring)
    add_executable(test_save_autosave_ring unit/test_save_autosave_ring.c)
    target_link_libraries(test_save_autosave_ring PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_autosave_ring PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_autosave_ring COMMAND test_save_autosave_ring)
endif()

# Component ordering determinism test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_ordering_determinism.c AND NOT TARGET test_save_ordering_determinism)
    add_executable(test_save_ordering_determinism unit/test_save_ordering_determinism.c)
    target_link_libraries(test_save_ordering_determinism PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_ordering_determinism PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_ordering_determinism COMMAND test_save_ordering_determinism)
endif()

# Migration chain test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_migration_chain.c AND NOT TARGET test_save_migration_chain)
    add_executable(test_save_migration_chain unit/test_save_migration_chain.c)
    target_link_libraries(test_save_migration_chain PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_migration_chain PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_migration_chain COMMAND test_save_migration_chain)
endif()

# Migration metrics test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_migration_metrics.c AND NOT TARGET test_save_migration_metrics)
    add_executable(test_save_migration_metrics unit/test_save_migration_metrics.c)
    target_link_libraries(test_save_migration_metrics PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_migration_metrics PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_migration_metrics COMMAND test_save_migration_metrics)
endif()

# JSON export test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_json_export.c AND NOT TARGET test_save_json_export)
    add_executable(test_save_json_export unit/test_save_json_export.c)
    target_link_libraries(test_save_json_export PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_json_export PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_json_export COMMAND test_save_json_export)
endif()

# Component reload test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_component_reload.c AND NOT TARGET test_save_component_reload)
    add_executable(test_save_component_reload unit/test_save_component_reload.c)
    target_link_libraries(test_save_component_reload PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_component_reload PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_component_reload COMMAND test_save_component_reload)
endif()

# TLV header layout test (v3+)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v3_tlv_headers.c AND NOT TARGET test_save_v3_tlv_headers)
    add_executable(test_save_v3_tlv_headers unit/test_save_v3_tlv_headers.c)
    target_link_libraries(test_save_v3_tlv_headers PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v3_tlv_headers PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v3_tlv_headers COMMAND test_save_v3_tlv_headers)
endif()

# Backward compatibility: load fabricated v2 under v3 build
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v2_backward_load.c AND NOT TARGET test_save_v2_backward_load)
    add_executable(test_save_v2_backward_load unit/test_save_v2_backward_load.c)
    target_link_libraries(test_save_v2_backward_load PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v2_backward_load PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v2_backward_load COMMAND test_save_v2_backward_load)
endif()

# Debug JSON toggle test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_debug_json_toggle.c AND NOT TARGET test_save_debug_json_toggle)
    add_executable(test_save_debug_json_toggle unit/test_save_debug_json_toggle.c)
    target_link_libraries(test_save_debug_json_toggle PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_debug_json_toggle PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_debug_json_toggle COMMAND test_save_debug_json_toggle)
endif()

# Varint counts (v4) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v4_varint_counts.c AND NOT TARGET test_save_v4_varint_counts)
    add_executable(test_save_v4_varint_counts unit/test_save_v4_varint_counts.c)
    target_link_libraries(test_save_v4_varint_counts PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v4_varint_counts PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v4_varint_counts COMMAND test_save_v4_varint_counts)
endif()

# String intern table (v5) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v5_strings.c AND NOT TARGET test_save_v5_strings)
    add_executable(test_save_v5_strings unit/test_save_v5_strings.c)
    target_link_libraries(test_save_v5_strings PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v5_strings PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v5_strings COMMAND test_save_v5_strings)
endif()

# Compression (v6) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v6_compression.c AND NOT TARGET test_save_v6_compression)
    add_executable(test_save_v6_compression unit/test_save_v6_compression.c)
    target_link_libraries(test_save_v6_compression PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v6_compression PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v6_compression COMMAND test_save_v6_compression)
endif()

# Integrity (v7) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v7_integrity.c AND NOT TARGET test_save_v7_integrity)
    add_executable(test_save_v7_integrity unit/test_save_v7_integrity.c)
    target_link_libraries(test_save_v7_integrity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v7_integrity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v7_integrity COMMAND test_save_v7_integrity)
endif()

# Replay hash (v8) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v8_replay_hash.c AND NOT TARGET test_save_v8_replay_hash)
    add_executable(test_save_v8_replay_hash unit/test_save_v8_replay_hash.c)
    target_link_libraries(test_save_v8_replay_hash PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v8_replay_hash PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v8_replay_hash COMMAND test_save_v8_replay_hash)
endif()

# Tamper + recovery (v8) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v8_tamper_recovery.c AND NOT TARGET test_save_v8_tamper_recovery)
    add_executable(test_save_v8_tamper_recovery unit/test_save_v8_tamper_recovery.c)
    target_link_libraries(test_save_v8_tamper_recovery PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v8_tamper_recovery PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v8_tamper_recovery COMMAND test_save_v8_tamper_recovery)
endif()

# Signature (v9) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_v9_signature.c AND NOT TARGET test_save_v9_signature)
    add_executable(test_save_v9_signature unit/test_save_v9_signature.c)
    target_link_libraries(test_save_v9_signature PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_v9_signature PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_v9_signature COMMAND test_save_v9_signature)
endif()

# Phase 15 inventory partial + backup test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_phase15_inventory_partial_backup.c AND NOT TARGET test_save_phase15_inventory_partial_backup)
    add_executable(test_save_phase15_inventory_partial_backup unit/test_save_phase15_inventory_partial_backup.c)
    target_link_libraries(test_save_phase15_inventory_partial_backup PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_phase15_inventory_partial_backup PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_phase15_inventory_partial_backup COMMAND test_save_phase15_inventory_partial_backup)
endif()

# Incremental save basic test (Phase 5)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_incremental_basic.c AND NOT TARGET test_save_incremental_basic)
    add_executable(test_save_incremental_basic unit/test_save_incremental_basic.c)
    target_link_libraries(test_save_incremental_basic PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_incremental_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_incremental_basic COMMAND test_save_incremental_basic)
endif()

# Phase 16 personal loot mode test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase16_personal_mode.c AND NOT TARGET test_loot_phase16_personal_mode)
    add_executable(test_loot_phase16_personal_mode unit/test_loot_phase16_personal_mode.c)
    target_link_libraries(test_loot_phase16_personal_mode PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase16_personal_mode PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase16_personal_mode COMMAND test_loot_phase16_personal_mode)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase16_need_greed_trade.c AND NOT TARGET test_loot_phase16_need_greed_trade)
    add_executable(test_loot_phase16_need_greed_trade unit/test_loot_phase16_need_greed_trade.c)
    target_link_libraries(test_loot_phase16_need_greed_trade PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase16_need_greed_trade PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase16_need_greed_trade COMMAND test_loot_phase16_need_greed_trade)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase17_perf.c AND NOT TARGET test_loot_phase17_perf)
    add_executable(test_loot_phase17_perf unit/test_loot_phase17_perf.c)
    target_link_libraries(test_loot_phase17_perf PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase17_perf PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase17_perf COMMAND test_loot_phase17_perf)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase17_index.c AND NOT TARGET test_loot_phase17_index)
    add_executable(test_loot_phase17_index unit/test_loot_phase17_index.c)
    target_link_libraries(test_loot_phase17_index PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase17_index PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase17_index COMMAND test_loot_phase17_index)
endif()

# Phase 17.5 diff metrics test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase17_5_diff.c AND NOT TARGET test_loot_phase17_5_diff)
    add_executable(test_loot_phase17_5_diff unit/test_loot_phase17_5_diff.c)
    target_link_libraries(test_loot_phase17_5_diff PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase17_5_diff PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase17_5_diff COMMAND test_loot_phase17_5_diff)
endif()

# Phase 18 analytics test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase18_analytics.c AND NOT TARGET test_loot_phase18_analytics)
    add_executable(test_loot_phase18_analytics unit/test_loot_phase18_analytics.c)
    target_link_libraries(test_loot_phase18_analytics PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase18_analytics PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase18_analytics COMMAND test_loot_phase18_analytics)
endif()

# Phase 18.3/18.4/18.5 advanced analytics (drift + summary + heatmap)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase18_3_4_5_advanced.c AND NOT TARGET test_loot_phase18_3_4_5_advanced)
    add_executable(test_loot_phase18_3_4_5_advanced unit/test_loot_phase18_3_4_5_advanced.c)
    target_link_libraries(test_loot_phase18_3_4_5_advanced PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase18_3_4_5_advanced PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase18_3_4_5_advanced COMMAND test_loot_phase18_3_4_5_advanced)
endif()

# Phase 19.1 pickup sounds test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase19_1_pickup_sounds.c AND NOT TARGET test_loot_phase19_1_pickup_sounds)
    add_executable(test_loot_phase19_1_pickup_sounds unit/test_loot_phase19_1_pickup_sounds.c)
    target_link_libraries(test_loot_phase19_1_pickup_sounds PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase19_1_pickup_sounds PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase19_1_pickup_sounds COMMAND test_loot_phase19_1_pickup_sounds)
endif()

# Phase 19.2–19.5 VFX (sparkle, beam, edge notifier, pulse) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase19_2_5_vfx.c AND NOT TARGET test_loot_phase19_2_5_vfx)
    add_executable(test_loot_phase19_2_5_vfx unit/test_loot_phase19_2_5_vfx.c)
    target_link_libraries(test_loot_phase19_2_5_vfx PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_loot_phase19_2_5_vfx PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase19_2_5_vfx COMMAND test_loot_phase19_2_5_vfx)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_1_fuzz_tables.c AND NOT TARGET test_loot_phase20_1_fuzz_tables)
    add_executable(test_loot_phase20_1_fuzz_tables unit/test_loot_phase20_1_fuzz_tables.c)
    target_link_libraries(test_loot_phase20_1_fuzz_tables PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase20_1_fuzz_tables PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_1_fuzz_tables COMMAND test_loot_phase20_1_fuzz_tables)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_2_3_stats_regression.c AND NOT TARGET test_loot_phase20_2_3_stats_regression)
    add_executable(test_loot_phase20_2_3_stats_regression unit/test_loot_phase20_2_3_stats_regression.c)
    target_link_libraries(test_loot_phase20_2_3_stats_regression PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase20_2_3_stats_regression PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_2_3_stats_regression COMMAND test_loot_phase20_2_3_stats_regression)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_4_persistence_roundtrip.c AND NOT TARGET test_loot_phase20_4_persistence_roundtrip)
    add_executable(test_loot_phase20_4_persistence_roundtrip unit/test_loot_phase20_4_persistence_roundtrip.c)
    target_link_libraries(test_loot_phase20_4_persistence_roundtrip PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase20_4_persistence_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_4_persistence_roundtrip COMMAND test_loot_phase20_4_persistence_roundtrip)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase20_5_merge_stress.c AND NOT TARGET test_loot_phase20_5_merge_stress)
    add_executable(test_loot_phase20_5_merge_stress unit/test_loot_phase20_5_merge_stress.c)
    target_link_libraries(test_loot_phase20_5_merge_stress PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase20_5_merge_stress PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase20_5_merge_stress COMMAND test_loot_phase20_5_merge_stress)
endif()

# Phase 21.2 tooling validation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_2_validation.c AND NOT TARGET test_loot_tooling_phase21_2_validation)
    add_executable(test_loot_tooling_phase21_2_validation unit/test_loot_tooling_phase21_2_validation.c)
    target_link_libraries(test_loot_tooling_phase21_2_validation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_tooling_phase21_2_validation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_2_validation COMMAND test_loot_tooling_phase21_2_validation)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_1_convert.c AND NOT TARGET test_loot_tooling_phase21_1_convert)
    add_executable(test_loot_tooling_phase21_1_convert unit/test_loot_tooling_phase21_1_convert.c)
    target_link_libraries(test_loot_tooling_phase21_1_convert PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_tooling_phase21_1_convert PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_1_convert COMMAND test_loot_tooling_phase21_1_convert)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_3_affix_json.c AND NOT TARGET test_loot_tooling_phase21_3_affix_json)
    add_executable(test_loot_tooling_phase21_3_affix_json unit/test_loot_tooling_phase21_3_affix_json.c)
    target_link_libraries(test_loot_tooling_phase21_3_affix_json PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_tooling_phase21_3_affix_json PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_3_affix_json COMMAND test_loot_tooling_phase21_3_affix_json)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_4_rebalance.c AND NOT TARGET test_loot_tooling_phase21_4_rebalance)
    add_executable(test_loot_tooling_phase21_4_rebalance unit/test_loot_tooling_phase21_4_rebalance.c)
    target_link_libraries(test_loot_tooling_phase21_4_rebalance PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_tooling_phase21_4_rebalance PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_4_rebalance COMMAND test_loot_tooling_phase21_4_rebalance)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_tooling_phase21_5_sort.c AND NOT TARGET test_loot_tooling_phase21_5_sort)
    add_executable(test_loot_tooling_phase21_5_sort unit/test_loot_tooling_phase21_5_sort.c)
    target_link_libraries(test_loot_tooling_phase21_5_sort PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_tooling_phase21_5_sort PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_tooling_phase21_5_sort COMMAND test_loot_tooling_phase21_5_sort)
endif()

# Phase 22 Security / Cheat Resistance tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase22_security.c AND NOT TARGET test_loot_phase22_security)
    add_executable(test_loot_phase22_security unit/test_loot_phase22_security.c)
    target_link_libraries(test_loot_phase22_security PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase22_security PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase22_security COMMAND test_loot_phase22_security)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase22_server_anomaly.c AND NOT TARGET test_loot_phase22_server_anomaly)
    add_executable(test_loot_phase22_server_anomaly unit/test_loot_phase22_server_anomaly.c)
    target_link_libraries(test_loot_phase22_server_anomaly PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase22_server_anomaly PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase22_server_anomaly COMMAND test_loot_phase22_server_anomaly)
endif()

# Autosave scheduler test (Phase 6.1/6.3/6.4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_autosave_scheduler.c AND NOT TARGET test_save_autosave_scheduler)
    add_executable(test_save_autosave_scheduler unit/test_save_autosave_scheduler.c)
    target_link_libraries(test_save_autosave_scheduler PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_autosave_scheduler PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_autosave_scheduler COMMAND test_save_autosave_scheduler)
endif()

# Autosave indicator/throttle test (Phase 6.5)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_autosave_indicator.c AND NOT TARGET test_save_autosave_indicator)
    add_executable(test_save_autosave_indicator unit/test_save_autosave_indicator.c)
    target_link_libraries(test_save_autosave_indicator PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_autosave_indicator PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_autosave_indicator COMMAND test_save_autosave_indicator)
endif()

# Phase 7.2/7.3 skill & buff extended state roundtrip test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_phase7_skill_buff_roundtrip.c AND NOT TARGET test_save_phase7_skill_buff_roundtrip)
    add_executable(test_save_phase7_skill_buff_roundtrip unit/test_save_phase7_skill_buff_roundtrip.c)
    target_link_libraries(test_save_phase7_skill_buff_roundtrip PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_phase7_skill_buff_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_phase7_skill_buff_roundtrip COMMAND test_save_phase7_skill_buff_roundtrip)
endif()

# Phase 7.1/7.7/7.8 player progression + analytics roundtrip test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_phase7_player_analytics_roundtrip.c AND NOT TARGET test_save_phase7_player_analytics_roundtrip)
    add_executable(test_save_phase7_player_analytics_roundtrip unit/test_save_phase7_player_analytics_roundtrip.c)
    target_link_libraries(test_save_phase7_player_analytics_roundtrip PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_phase7_player_analytics_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_phase7_player_analytics_roundtrip COMMAND test_save_phase7_player_analytics_roundtrip)
endif()

# Phase 7.5 vendor inventory roundtrip test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_phase7_vendor_inventory_roundtrip.c AND NOT TARGET test_save_phase7_vendor_inventory_roundtrip)
    add_executable(test_save_phase7_vendor_inventory_roundtrip unit/test_save_phase7_vendor_inventory_roundtrip.c)
    target_link_libraries(test_save_phase7_vendor_inventory_roundtrip PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_phase7_vendor_inventory_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_phase7_vendor_inventory_roundtrip COMMAND test_save_phase7_vendor_inventory_roundtrip)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_phase7_inventory_durability_roundtrip.c AND NOT TARGET test_save_phase7_inventory_durability_roundtrip)
    add_executable(test_save_phase7_inventory_durability_roundtrip unit/test_save_phase7_inventory_durability_roundtrip.c)
    target_link_libraries(test_save_phase7_inventory_durability_roundtrip PRIVATE rogue_core)
    if(ROGUE_HAVE_SDL)
        target_compile_definitions(test_save_phase7_inventory_durability_roundtrip PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_phase7_inventory_durability_roundtrip COMMAND test_save_phase7_inventory_durability_roundtrip)
endif()

# Basic save_manager smoke test (legacy simple test)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_save_manager.c AND NOT TARGET test_save_manager)
    add_executable(test_save_manager unit/test_save_manager.c)
    target_link_libraries(test_save_manager PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_save_manager PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_save_manager COMMAND test_save_manager)
endif()

# Explicitly add new maintainability phase M3.4 asset dependency graph test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_asset_dep.c AND NOT TARGET test_asset_dep)
    add_executable(test_asset_dep unit/test_asset_dep.c)
    target_link_libraries(test_asset_dep PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_asset_dep PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_asset_dep COMMAND test_asset_dep)
endif()

# Explicitly add new maintainability phase M3.5 projectile config hot reload test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_projectiles_config.c AND NOT TARGET test_projectiles_config)
    add_executable(test_projectiles_config unit/test_projectiles_config.c)
    target_link_libraries(test_projectiles_config PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_projectiles_config PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_projectiles_config COMMAND test_projectiles_config)
endif()

# Phase M3.6: directory-based hitbox loading test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_hitbox_directory_load.c AND NOT TARGET test_hitbox_directory_load)
    add_executable(test_hitbox_directory_load unit/test_hitbox_directory_load.c)
    target_link_libraries(test_hitbox_directory_load PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_hitbox_directory_load PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_hitbox_directory_load COMMAND test_hitbox_directory_load)
endif()

# Phase M3.7: persistence version tag test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_persistence_versions.c AND NOT TARGET test_persistence_versions)
    add_executable(test_persistence_versions unit/test_persistence_versions.c)
    target_link_libraries(test_persistence_versions PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_persistence_versions PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_persistence_versions COMMAND test_persistence_versions)
endif()

# Phase M4.1: projectile config edge cases
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_projectiles_config_edge.c AND NOT TARGET test_projectiles_config_edge)
    add_executable(test_projectiles_config_edge unit/test_projectiles_config_edge.c)
    target_link_libraries(test_projectiles_config_edge PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_projectiles_config_edge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_projectiles_config_edge COMMAND test_projectiles_config_edge)
endif()

# Phase M4.1: persistence edge cases
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_persistence_edge_cases.c AND NOT TARGET test_persistence_edge_cases)
    add_executable(test_persistence_edge_cases unit/test_persistence_edge_cases.c)
    target_link_libraries(test_persistence_edge_cases PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_persistence_edge_cases PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_persistence_edge_cases COMMAND test_persistence_edge_cases)
endif()

# Phase M4.2/M4.3 determinism & golden master test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_determinism_damage_events.c AND NOT TARGET test_determinism_damage_events)
    add_executable(test_determinism_damage_events unit/test_determinism_damage_events.c)
    target_link_libraries(test_determinism_damage_events PRIVATE rogue_core)
    target_compile_definitions(test_determinism_damage_events PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_determinism_damage_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_determinism_damage_events COMMAND test_determinism_damage_events)
endif()

# Phase M4.4 fuzz parsers (affix/persistence/kv)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_fuzz_parsers.c AND NOT TARGET test_fuzz_parsers)
    add_executable(test_fuzz_parsers unit/test_fuzz_parsers.c)
    target_link_libraries(test_fuzz_parsers PRIVATE rogue_core)
    target_compile_definitions(test_fuzz_parsers PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_fuzz_parsers PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_fuzz_parsers COMMAND test_fuzz_parsers)
endif()
# Explicitly add combat damage observer test (maintainability phase M2) to avoid glob cache issues
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_damage_observer.c AND NOT TARGET test_combat_damage_observer)
    add_executable(test_combat_damage_observer unit/test_combat_damage_observer.c)
    # Ensure C language (not C++)
    set_property(TARGET test_combat_damage_observer PROPERTY LINKER_LANGUAGE C)
    target_link_libraries(test_combat_damage_observer PRIVATE rogue_core)
    # Ensure observer feature macro visible so duplicate symbol guard engages correctly
    target_compile_definitions(test_combat_damage_observer PRIVATE ROGUE_FEATURE_COMBAT_OBSERVER=1)
    # Prevent SDL from redefining main to SDL_main when SDL headers transitively included
    target_compile_definitions(test_combat_damage_observer PRIVATE SDL_MAIN_HANDLED=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_damage_observer PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_damage_observer COMMAND test_combat_damage_observer)
endif()

# Ensure newly added directional combat test is always present (some generators cache GLOB results between incremental reconfigurations).
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_left_facing.c AND NOT TARGET test_combat_left_facing)
    add_executable(test_combat_left_facing unit/test_combat_left_facing.c)
    target_link_libraries(test_combat_left_facing PRIVATE rogue_core)
    target_compile_definitions(test_combat_left_facing PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_left_facing PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_left_facing COMMAND test_combat_left_facing)
endif()

# Explicitly add Phase 5.4/5.5 team filter & obstruction attenuation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_team_obstruction.c AND NOT TARGET test_combat_phase5_team_obstruction)
    add_executable(test_combat_phase5_team_obstruction unit/test_combat_phase5_team_obstruction.c)
    target_link_libraries(test_combat_phase5_team_obstruction PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase5_team_obstruction PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_team_obstruction PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_team_obstruction COMMAND test_combat_phase5_team_obstruction)
endif()

# Phase 5.6 lock-on acquisition/cycle/directional assist test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on.c AND NOT TARGET test_combat_phase5_lock_on)
    add_executable(test_combat_phase5_lock_on unit/test_combat_phase5_lock_on.c)
    target_link_libraries(test_combat_phase5_lock_on PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase5_lock_on PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on COMMAND test_combat_phase5_lock_on)
endif()

# Phase 5.1 hitbox primitive test (explicit add to avoid glob cache issues)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_hitbox_primitives.c AND NOT TARGET test_combat_phase5_hitbox_primitives)
    add_executable(test_combat_phase5_hitbox_primitives unit/test_combat_phase5_hitbox_primitives.c)
    target_link_libraries(test_combat_phase5_hitbox_primitives PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_hitbox_primitives PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_hitbox_primitives COMMAND test_combat_phase5_hitbox_primitives)
endif()

# Phase 5.2/5.3 authoring + broadphase tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_hitbox_authoring_broadphase.c AND NOT TARGET test_combat_phase5_hitbox_authoring_broadphase)
    add_executable(test_combat_phase5_hitbox_authoring_broadphase unit/test_combat_phase5_hitbox_authoring_broadphase.c)
    target_link_libraries(test_combat_phase5_hitbox_authoring_broadphase PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_hitbox_authoring_broadphase PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_hitbox_authoring_broadphase COMMAND test_combat_phase5_hitbox_authoring_broadphase)
endif()

# Explicit heavy multi-window test (heavy_2 triple window validation)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_heavy_multi_window.c AND NOT TARGET test_combat_heavy_multi_window)
    add_executable(test_combat_heavy_multi_window unit/test_combat_heavy_multi_window.c)
    target_link_libraries(test_combat_heavy_multi_window PRIVATE rogue_core)
    target_compile_definitions(test_combat_heavy_multi_window PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_heavy_multi_window PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_heavy_multi_window COMMAND test_combat_heavy_multi_window)
endif()

# Explicit window boundary overlap test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_window_boundary.c AND NOT TARGET test_combat_window_boundary)
    add_executable(test_combat_window_boundary unit/test_combat_window_boundary.c)
    target_link_libraries(test_combat_window_boundary PRIVATE rogue_core)
    target_compile_definitions(test_combat_window_boundary PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_window_boundary PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_window_boundary COMMAND test_combat_window_boundary)
endif()

# Explicit player damage number spawn test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_damage_numbers_player.c AND NOT TARGET test_damage_numbers_player)
    add_executable(test_damage_numbers_player unit/test_damage_numbers_player.c)
    target_link_libraries(test_damage_numbers_player PRIVATE rogue_core)
    target_compile_definitions(test_damage_numbers_player PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_damage_numbers_player PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_damage_numbers_player COMMAND test_damage_numbers_player)
endif()

# UI Phase 3 input features test (clipboard, chords, replay)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase3_input_features.c AND NOT TARGET test_ui_phase3_input_features)
    add_executable(test_ui_phase3_input_features unit/test_ui_phase3_input_features.c)
    target_link_libraries(test_ui_phase3_input_features PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase3_input_features PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase3_input_features COMMAND test_ui_phase3_input_features)
endif()

# UI Phase 5.4-5.7 advanced skillgraph test (filter/export/undo)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase5_skillgraph_advanced.c AND NOT TARGET test_ui_phase5_skillgraph_advanced)
    add_executable(test_ui_phase5_skillgraph_advanced unit/test_ui_phase5_skillgraph_advanced.c)
    target_link_libraries(test_ui_phase5_skillgraph_advanced PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase5_skillgraph_advanced PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase5_skillgraph_advanced COMMAND test_ui_phase5_skillgraph_advanced)
endif()

# UI Phase 4.4 context menu test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_context_menu.c AND NOT TARGET test_ui_phase4_context_menu)
    add_executable(test_ui_phase4_context_menu unit/test_ui_phase4_context_menu.c)
    target_link_libraries(test_ui_phase4_context_menu PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_context_menu PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_context_menu COMMAND test_ui_phase4_context_menu)
endif()

# UI Phase 4.5 stat delta preview test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_stat_preview.c AND NOT TARGET test_ui_phase4_stat_preview)
    add_executable(test_ui_phase4_stat_preview unit/test_ui_phase4_stat_preview.c)
    target_link_libraries(test_ui_phase4_stat_preview PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_stat_preview PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_stat_preview COMMAND test_ui_phase4_stat_preview)
endif()

# UI Phase 4.6 rarity color theming test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_rarity_colors.c AND NOT TARGET test_ui_phase4_rarity_colors)
    add_executable(test_ui_phase4_rarity_colors unit/test_ui_phase4_rarity_colors.c)
    target_link_libraries(test_ui_phase4_rarity_colors PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_rarity_colors PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_rarity_colors COMMAND test_ui_phase4_rarity_colors)
endif()

# UI Phase 4.7 vendor restock timer fraction test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_vendor_restock.c AND NOT TARGET test_ui_phase4_vendor_restock)
    add_executable(test_ui_phase4_vendor_restock unit/test_ui_phase4_vendor_restock.c)
    target_link_libraries(test_ui_phase4_vendor_restock PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_vendor_restock PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_vendor_restock COMMAND test_ui_phase4_vendor_restock)
endif()

# UI Phase 4.8 vendor transaction confirmation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_vendor_transaction.c AND NOT TARGET test_ui_phase4_vendor_transaction)
    add_executable(test_ui_phase4_vendor_transaction unit/test_ui_phase4_vendor_transaction.c)
    target_link_libraries(test_ui_phase4_vendor_transaction PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_vendor_transaction PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_vendor_transaction COMMAND test_ui_phase4_vendor_transaction)
endif()

# UI Phase 4.9 durability threshold bucket test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_durability_thresholds.c AND NOT TARGET test_ui_phase4_durability_thresholds)
    add_executable(test_ui_phase4_durability_thresholds unit/test_ui_phase4_durability_thresholds.c)
    target_link_libraries(test_ui_phase4_durability_thresholds PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_durability_thresholds PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_durability_thresholds COMMAND test_ui_phase4_durability_thresholds)
endif()

# UI Phase 4.10 radial selector test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase4_radial_selector.c AND NOT TARGET test_ui_phase4_radial_selector)
    add_executable(test_ui_phase4_radial_selector unit/test_ui_phase4_radial_selector.c)
    target_link_libraries(test_ui_phase4_radial_selector PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase4_radial_selector PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase4_radial_selector COMMAND test_ui_phase4_radial_selector)
endif()

# UI Phase 5.1 skill graph quadtree culling & layering test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase5_skillgraph.c AND NOT TARGET test_ui_phase5_skillgraph)
    add_executable(test_ui_phase5_skillgraph unit/test_ui_phase5_skillgraph.c)
    target_link_libraries(test_ui_phase5_skillgraph PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase5_skillgraph PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase5_skillgraph COMMAND test_ui_phase5_skillgraph)
endif()

# UI Phase 6.1 HUD layout spec test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase6_hud_layout.c AND NOT TARGET test_ui_phase6_hud_layout)
    add_executable(test_ui_phase6_hud_layout unit/test_ui_phase6_hud_layout.c)
    target_link_libraries(test_ui_phase6_hud_layout PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase6_hud_layout PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase6_hud_layout COMMAND test_ui_phase6_hud_layout)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_skill_maze_generation.c AND NOT TARGET test_ui_skill_maze_generation)
    add_executable(test_ui_skill_maze_generation unit/test_ui_skill_maze_generation.c)
    target_link_libraries(test_ui_skill_maze_generation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_skill_maze_generation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_skill_maze_generation COMMAND test_ui_skill_maze_generation)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase5_skillgraph_anim.c AND NOT TARGET test_ui_phase5_skillgraph_anim)
    add_executable(test_ui_phase5_skillgraph_anim unit/test_ui_phase5_skillgraph_anim.c)
    target_link_libraries(test_ui_phase5_skillgraph_anim PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase5_skillgraph_anim PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase5_skillgraph_anim COMMAND test_ui_phase5_skillgraph_anim)
endif()

# Explicitly add vendor restock rotation test (10.3)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vendor_restock.c AND NOT TARGET test_vendor_restock)
    add_executable(test_vendor_restock unit/test_vendor_restock.c)
    target_link_libraries(test_vendor_restock PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vendor_restock PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vendor_restock COMMAND test_vendor_restock)
endif()

# Explicitly add loot phase 9 drop rates test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_drop_rates.c AND NOT TARGET test_loot_phase9_drop_rates)
    add_executable(test_loot_phase9_drop_rates unit/test_loot_phase9_drop_rates.c)
    target_link_libraries(test_loot_phase9_drop_rates PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_drop_rates PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_drop_rates COMMAND test_loot_phase9_drop_rates)
endif()

# Explicitly add loot phase 9 adaptive weighting test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_adaptive.c AND NOT TARGET test_loot_phase9_adaptive)
    add_executable(test_loot_phase9_adaptive unit/test_loot_phase9_adaptive.c)
    target_link_libraries(test_loot_phase9_adaptive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_adaptive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_adaptive COMMAND test_loot_phase9_adaptive)
endif()

# Explicitly add loot phase 9 preference learning test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_preference.c AND NOT TARGET test_loot_phase9_preference)
    add_executable(test_loot_phase9_preference unit/test_loot_phase9_preference.c)
    target_link_libraries(test_loot_phase9_preference PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_preference PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_preference COMMAND test_loot_phase9_preference)
endif()

# Explicitly add loot phase 9 pity acceleration test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_pity.c AND NOT TARGET test_loot_phase9_pity)
    add_executable(test_loot_phase9_pity unit/test_loot_phase9_pity.c)
    target_link_libraries(test_loot_phase9_pity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_pity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_pity COMMAND test_loot_phase9_pity)
endif()

# Explicitly add loot phase 9 tuning console test (9.6)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_tuning_console.c AND NOT TARGET test_loot_phase9_tuning_console)
    add_executable(test_loot_phase9_tuning_console unit/test_loot_phase9_tuning_console.c)
    target_link_libraries(test_loot_phase9_tuning_console PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_tuning_console PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_tuning_console COMMAND test_loot_phase9_tuning_console)
endif()

# Explicitly add generation quality test (ensure picked up even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase8_generation_quality.c AND NOT TARGET test_loot_phase8_generation_quality)
   
    add_executable(test_loot_phase8_generation_quality unit/test_loot_phase8_generation_quality.c)
    target_link_libraries(test_loot_phase8_generation_quality PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase8_generation_quality PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase8_generation_quality COMMAND test_loot_phase8_generation_quality)
endif()

# Explicitly add skill cast/channel test (Phase 1.3/1.4 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skill_cast_and_channel.c AND NOT TARGET test_skill_cast_and_channel)
    add_executable(test_skill_cast_and_channel unit/test_skill_cast_and_channel.c)
    target_link_libraries(test_skill_cast_and_channel PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skill_cast_and_channel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skill_cast_and_channel COMMAND test_skill_cast_and_channel)
endif()

# Explicitly add channel ticks scheduler test (Phase 1A.5 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_channel_ticks_and_buffer.c AND NOT TARGET test_channel_ticks_and_buffer)
    add_executable(test_channel_ticks_and_buffer unit/test_channel_ticks_and_buffer.c)
    target_link_libraries(test_channel_ticks_and_buffer PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_channel_ticks_and_buffer PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_channel_ticks_and_buffer COMMAND test_channel_ticks_and_buffer)
endif()

# Explicitly add input buffering cast test (Phase 1A.1 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_input_buffer_cast.c AND NOT TARGET test_input_buffer_cast)
    add_executable(test_input_buffer_cast unit/test_input_buffer_cast.c)
    target_link_libraries(test_input_buffer_cast PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_input_buffer_cast PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_input_buffer_cast COMMAND test_input_buffer_cast)
endif()

# Explicitly add haste cast speed test (Phase 1A.3 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_haste_cast_speed.c AND NOT TARGET test_haste_cast_speed)
    add_executable(test_haste_cast_speed unit/test_haste_cast_speed.c)
    target_link_libraries(test_haste_cast_speed PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_haste_cast_speed PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_haste_cast_speed COMMAND test_haste_cast_speed)
endif()

# Phase 6.1 & 6.3 charge + dodge test (explicit)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_charge_and_dodge.c AND NOT TARGET test_combat_phase6_charge_and_dodge)
    add_executable(test_combat_phase6_charge_and_dodge unit/test_combat_phase6_charge_and_dodge.c)
    target_link_libraries(test_combat_phase6_charge_and_dodge PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_charge_and_dodge PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_charge_and_dodge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_charge_and_dodge COMMAND test_combat_phase6_charge_and_dodge)
endif()

# Phase 6.4/6.5/6.6 backstab + parry + riposte basic test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_parry_backstab_riposte.c AND NOT TARGET test_combat_phase6_parry_backstab_riposte)
    add_executable(test_combat_phase6_parry_backstab_riposte unit/test_combat_phase6_parry_backstab_riposte.c)
    target_link_libraries(test_combat_phase6_parry_backstab_riposte PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_parry_backstab_riposte PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_parry_backstab_riposte PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_parry_backstab_riposte COMMAND test_combat_phase6_parry_backstab_riposte)
endif()

# Phase 6.2 / 6.6 / 6.7 aerial, guard break, deflect placeholder test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_aerial_deflect_guardbreak.c AND NOT TARGET test_combat_phase6_aerial_deflect_guardbreak)
    add_executable(test_combat_phase6_aerial_deflect_guardbreak unit/test_combat_phase6_aerial_deflect_guardbreak.c)
    target_link_libraries(test_combat_phase6_aerial_deflect_guardbreak PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_aerial_deflect_guardbreak PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_aerial_deflect_guardbreak PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_aerial_deflect_guardbreak COMMAND test_combat_phase6_aerial_deflect_guardbreak)
endif()

# Phase 6 extended multipliers test (backstab + guard-break + riposte damage application)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase6_backstab_guardbreak_riposte_bonus.c AND NOT TARGET test_combat_phase6_backstab_guardbreak_riposte_bonus)
    add_executable(test_combat_phase6_backstab_guardbreak_riposte_bonus unit/test_combat_phase6_backstab_guardbreak_riposte_bonus.c)
    target_link_libraries(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase6_backstab_guardbreak_riposte_bonus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase6_backstab_guardbreak_riposte_bonus COMMAND test_combat_phase6_backstab_guardbreak_riposte_bonus)
endif()

# Phase 7.1/7.3/7.5 weapon + stance + familiarity basic test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_weapon_stance_familiarity.c AND NOT TARGET test_combat_phase7_weapon_stance_familiarity)
    add_executable(test_combat_phase7_weapon_stance_familiarity unit/test_combat_phase7_weapon_stance_familiarity.c)
    target_link_libraries(test_combat_phase7_weapon_stance_familiarity PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_weapon_stance_familiarity PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_weapon_stance_familiarity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_weapon_stance_familiarity COMMAND test_combat_phase7_weapon_stance_familiarity)
endif()

# Phase 7.4 / 7.6 infusions + durability scalar test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_infusions_durability.c AND NOT TARGET test_combat_phase7_infusions_durability)
    add_executable(test_combat_phase7_infusions_durability unit/test_combat_phase7_infusions_durability.c)
    target_link_libraries(test_combat_phase7_infusions_durability PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_infusions_durability PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_infusions_durability PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_infusions_durability COMMAND test_combat_phase7_infusions_durability)
endif()

# Phase 7.2 armor weight classes test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_armor_weight_classes.c AND NOT TARGET test_combat_phase7_armor_weight_classes)
    add_executable(test_combat_phase7_armor_weight_classes unit/test_combat_phase7_armor_weight_classes.c)
    target_link_libraries(test_combat_phase7_armor_weight_classes PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_armor_weight_classes PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_armor_weight_classes PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_armor_weight_classes COMMAND test_combat_phase7_armor_weight_classes)
endif()

# Phase 7.7 infusion damage redistribution & mitigation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_infusion_split_events.c AND NOT TARGET test_combat_phase7_infusion_split_events)
    add_executable(test_combat_phase7_infusion_split_events unit/test_combat_phase7_infusion_split_events.c)
    target_link_libraries(test_combat_phase7_infusion_split_events PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase7_infusion_split_events PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase7_infusion_split_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase7_infusion_split_events COMMAND test_combat_phase7_infusion_split_events)
endif()

    # Phase 7.8 stance frame timing test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_stance_frame_timing.c AND NOT TARGET test_combat_phase7_stance_frame_timing)
        add_executable(test_combat_phase7_stance_frame_timing unit/test_combat_phase7_stance_frame_timing.c)
        target_link_libraries(test_combat_phase7_stance_frame_timing PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_stance_frame_timing PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_stance_frame_timing PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_stance_frame_timing COMMAND test_combat_phase7_stance_frame_timing)
    endif()

    # Phase 7.7 familiarity cap boundary test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_familiarity_cap.c AND NOT TARGET test_combat_phase7_familiarity_cap)
        add_executable(test_combat_phase7_familiarity_cap unit/test_combat_phase7_familiarity_cap.c)
        target_link_libraries(test_combat_phase7_familiarity_cap PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_familiarity_cap PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_familiarity_cap PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_familiarity_cap COMMAND test_combat_phase7_familiarity_cap)
    endif()

    # Phase 7.7 encumbrance mobility curve (tier thresholds) test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_encumbrance_mobility_curve.c AND NOT TARGET test_combat_phase7_encumbrance_mobility_curve)
        add_executable(test_combat_phase7_encumbrance_mobility_curve unit/test_combat_phase7_encumbrance_mobility_curve.c)
        target_link_libraries(test_combat_phase7_encumbrance_mobility_curve PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_encumbrance_mobility_curve PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_encumbrance_mobility_curve PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_encumbrance_mobility_curve COMMAND test_combat_phase7_encumbrance_mobility_curve)
    endif()

    # Phase 7.7 per-component damage event emission test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase7_damage_event_components.c AND NOT TARGET test_combat_phase7_damage_event_components)
        add_executable(test_combat_phase7_damage_event_components unit/test_combat_phase7_damage_event_components.c)
        target_link_libraries(test_combat_phase7_damage_event_components PRIVATE rogue_core)
        target_compile_definitions(test_combat_phase7_damage_event_components PRIVATE TEST_COMBAT_PERMISSIVE=1)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_combat_phase7_damage_event_components PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_combat_phase7_damage_event_components COMMAND test_combat_phase7_damage_event_components)
    endif()

# Explicitly add cast weaving & early cancel test (Phase 1A.2/1A.4 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_cast_weave_and_cancel.c AND NOT TARGET test_cast_weave_and_cancel)
    add_executable(test_cast_weave_and_cancel unit/test_cast_weave_and_cancel.c)
    target_link_libraries(test_cast_weave_and_cancel PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_cast_weave_and_cancel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_cast_weave_and_cancel COMMAND test_cast_weave_and_cancel)
endif()

foreach(ut ${UNIT_TESTS})
    get_filename_component(name ${ut} NAME_WE)
    if(TARGET ${name})
        # Skip if already added explicitly above
        continue()
    endif()
    add_executable(${name} ${ut})
    target_link_libraries(${name} PRIVATE rogue_core)
    target_compile_definitions(${name} PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME ${name} COMMAND ${name})
endforeach()

# Explicitly add vegetation collision test (ensure included even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_collision.c AND NOT TARGET test_vegetation_collision)
    add_executable(test_vegetation_collision unit/test_vegetation_collision.c)
    target_link_libraries(test_vegetation_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_collision COMMAND test_vegetation_collision)
endif()

# Explicitly add vegetation canopy block test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_canopy_block.c AND NOT TARGET test_vegetation_canopy_block)
    add_executable(test_vegetation_canopy_block unit/test_vegetation_canopy_block.c)
    target_link_libraries(test_vegetation_canopy_block PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_canopy_block PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_canopy_block COMMAND test_vegetation_canopy_block)
endif()

# Explicitly add vegetation trunk collision behavioural test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_trunk_collision.c AND NOT TARGET test_vegetation_trunk_collision)
    add_executable(test_vegetation_trunk_collision unit/test_vegetation_trunk_collision.c)
    target_link_libraries(test_vegetation_trunk_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_trunk_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_trunk_collision COMMAND test_vegetation_trunk_collision)
endif()

# Explicitly add mob collision test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_mob_collision.c AND NOT TARGET test_mob_collision)
    add_executable(test_mob_collision unit/test_mob_collision.c)
    target_link_libraries(test_mob_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_mob_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_mob_collision COMMAND test_mob_collision)
endif()

# Explicitly add navigation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_navigation.c AND NOT TARGET test_navigation)
    add_executable(test_navigation unit/test_navigation.c)
    target_link_libraries(test_navigation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_navigation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_navigation COMMAND test_navigation)
endif()

# Explicitly add combat block cancel test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_block_cancel.c AND NOT TARGET test_combat_block_cancel)
    add_executable(test_combat_block_cancel unit/test_combat_block_cancel.c)
    target_link_libraries(test_combat_block_cancel PRIVATE rogue_core)
    target_compile_definitions(test_combat_block_cancel PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_block_cancel PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_block_cancel COMMAND test_combat_block_cancel)
endif()

# Explicitly add Phase 4.5 reaction cancel & DI test (ensure picked up even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_reaction_cancel_di.c AND NOT TARGET test_combat_phase4_reaction_cancel_di)
    add_executable(test_combat_phase4_reaction_cancel_di unit/test_combat_phase4_reaction_cancel_di.c)
    target_link_libraries(test_combat_phase4_reaction_cancel_di PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase4_reaction_cancel_di PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_reaction_cancel_di PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_reaction_cancel_di COMMAND test_combat_phase4_reaction_cancel_di)
endif()

# Explicitly add Phase 4.6 i-frame overlap protection test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_iframe_overlap.c AND NOT TARGET test_combat_phase4_iframe_overlap)
    add_executable(test_combat_phase4_iframe_overlap unit/test_combat_phase4_iframe_overlap.c)
    target_link_libraries(test_combat_phase4_iframe_overlap PRIVATE rogue_core)
    target_compile_definitions(test_combat_phase4_iframe_overlap PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_iframe_overlap PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_iframe_overlap COMMAND test_combat_phase4_iframe_overlap)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_mitigation.c AND NOT TARGET test_combat_mitigation)
    add_executable(test_combat_mitigation unit/test_combat_mitigation.c)
    target_link_libraries(test_combat_mitigation PRIVATE rogue_core)
    target_compile_definitions(test_combat_mitigation PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_mitigation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_mitigation COMMAND test_combat_mitigation)
endif()

# Explicitly add combat penetration test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_penetration.c AND NOT TARGET test_combat_penetration)
    add_executable(test_combat_penetration unit/test_combat_penetration.c)
    target_link_libraries(test_combat_penetration PRIVATE rogue_core)
    target_compile_definitions(test_combat_penetration PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_penetration PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_penetration COMMAND test_combat_penetration)
endif()

# Explicitly add combat damage events test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_damage_events.c AND NOT TARGET test_combat_damage_events)
    add_executable(test_combat_damage_events unit/test_combat_damage_events.c)
    target_link_libraries(test_combat_damage_events PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_damage_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_damage_events COMMAND test_combat_damage_events)
endif()

# Phase 2.4 crit layering test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_crit_layering.c AND NOT TARGET test_combat_crit_layering)
    add_executable(test_combat_crit_layering unit/test_combat_crit_layering.c)
    target_link_libraries(test_combat_crit_layering PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_crit_layering PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_crit_layering COMMAND test_combat_crit_layering)
endif()

# Phase 2.6 execution trigger test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_execution.c AND NOT TARGET test_combat_execution)
    add_executable(test_combat_execution unit/test_combat_execution.c)
    target_link_libraries(test_combat_execution PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_execution PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_execution COMMAND test_combat_execution)
endif()

# Phase 2.2 phys resist diminishing returns curve test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phys_resist_curve.c AND NOT TARGET test_combat_phys_resist_curve)
    add_executable(test_combat_phys_resist_curve unit/test_combat_phys_resist_curve.c)
    target_link_libraries(test_combat_phys_resist_curve PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phys_resist_curve PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phys_resist_curve COMMAND test_combat_phys_resist_curve)
endif()

# Phase 3.1 guard & poise meter presence test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_guard_poise.c AND NOT TARGET test_combat_phase3_guard_poise)
    add_executable(test_combat_phase3_guard_poise unit/test_combat_phase3_guard_poise.c)
    target_link_libraries(test_combat_phase3_guard_poise PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_guard_poise PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_guard_poise COMMAND test_combat_phase3_guard_poise)
endif()

# Phase 3.2/3.5 encumbrance stamina regen scaling test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_encumbrance.c AND NOT TARGET test_combat_phase3_encumbrance)
    add_executable(test_combat_phase3_encumbrance unit/test_combat_phase3_encumbrance.c)
    target_link_libraries(test_combat_phase3_encumbrance PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_encumbrance PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_encumbrance COMMAND test_combat_phase3_encumbrance)
endif()

# Phase 3.3 poise damage & stagger test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_poise_stagger.c AND NOT TARGET test_combat_phase3_poise_stagger)
    add_executable(test_combat_phase3_poise_stagger unit/test_combat_phase3_poise_stagger.c)
    target_link_libraries(test_combat_phase3_poise_stagger PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_poise_stagger PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_poise_stagger COMMAND test_combat_phase3_poise_stagger)
endif()

# Phase 3.11 new precision tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_guard_cone_edge.c AND NOT TARGET test_combat_phase3_guard_cone_edge)
    add_executable(test_combat_phase3_guard_cone_edge unit/test_combat_phase3_guard_cone_edge.c)
    target_link_libraries(test_combat_phase3_guard_cone_edge PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_guard_cone_edge PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_guard_cone_edge COMMAND test_combat_phase3_guard_cone_edge)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_poise_stagger_precision.c AND NOT TARGET test_combat_phase3_poise_stagger_precision)
    add_executable(test_combat_phase3_poise_stagger_precision unit/test_combat_phase3_poise_stagger_precision.c)
    target_link_libraries(test_combat_phase3_poise_stagger_precision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_poise_stagger_precision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_poise_stagger_precision COMMAND test_combat_phase3_poise_stagger_precision)
endif()

# Phase 4 reaction system tests
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_reactions.c AND NOT TARGET test_combat_phase4_reactions)
    add_executable(test_combat_phase4_reactions unit/test_combat_phase4_reactions.c)
    target_link_libraries(test_combat_phase4_reactions PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_reactions PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_reactions COMMAND test_combat_phase4_reactions)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase4_cc.c AND NOT TARGET test_combat_phase4_cc)
    add_executable(test_combat_phase4_cc unit/test_combat_phase4_cc.c)
    target_link_libraries(test_combat_phase4_cc PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase4_cc PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase4_cc COMMAND test_combat_phase4_cc)
endif()

# Phase 3.4 hyper armor flag plumbing test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_hyper_armor.c AND NOT TARGET test_combat_phase3_hyper_armor)
    add_executable(test_combat_phase3_hyper_armor unit/test_combat_phase3_hyper_armor.c)
    target_link_libraries(test_combat_phase3_hyper_armor PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_hyper_armor PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_hyper_armor COMMAND test_combat_phase3_hyper_armor)
endif()

# Phase 3.6 defensive weight soft cap test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_def_softcap.c AND NOT TARGET test_combat_phase3_def_softcap)
    add_executable(test_combat_phase3_def_softcap unit/test_combat_phase3_def_softcap.c)
    target_link_libraries(test_combat_phase3_def_softcap PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_def_softcap PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_def_softcap COMMAND test_combat_phase3_def_softcap)
endif()

# Phase 3.8 guard blocking & perfect guard test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_guard_block.c AND NOT TARGET test_combat_phase3_guard_block)
    add_executable(test_combat_phase3_guard_block unit/test_combat_phase3_guard_block.c)
    target_link_libraries(test_combat_phase3_guard_block PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_guard_block PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_guard_block COMMAND test_combat_phase3_guard_block)
endif()

# Phase 3.10 poise regen curve test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_poise_regen_curve.c AND NOT TARGET test_combat_phase3_poise_regen_curve)
    add_executable(test_combat_phase3_poise_regen_curve unit/test_combat_phase3_poise_regen_curve.c)
    target_link_libraries(test_combat_phase3_poise_regen_curve PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_poise_regen_curve PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_poise_regen_curve COMMAND test_combat_phase3_poise_regen_curve)
endif()

# Phase 3.11 hyper armor poise immunity test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase3_hyper_armor_immunity.c AND NOT TARGET test_combat_phase3_hyper_armor_immunity)
    add_executable(test_combat_phase3_hyper_armor_immunity unit/test_combat_phase3_hyper_armor_immunity.c)
    target_link_libraries(test_combat_phase3_hyper_armor_immunity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase3_hyper_armor_immunity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase3_hyper_armor_immunity COMMAND test_combat_phase3_hyper_armor_immunity)
endif()

# Explicitly add combat drift timing test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_drift_timing.c AND NOT TARGET test_combat_drift_timing)
    add_executable(test_combat_drift_timing unit/test_combat_drift_timing.c)
    target_link_libraries(test_combat_drift_timing PRIVATE rogue_core)
    target_compile_definitions(test_combat_drift_timing PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_drift_timing PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_drift_timing COMMAND test_combat_drift_timing)
endif()

# Explicitly add combat multi-hit window test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_multi_hit.c AND NOT TARGET test_combat_multi_hit)
    add_executable(test_combat_multi_hit unit/test_combat_multi_hit.c)
    target_link_libraries(test_combat_multi_hit PRIVATE rogue_core)
    target_compile_definitions(test_combat_multi_hit PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_multi_hit PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_multi_hit COMMAND test_combat_multi_hit)
endif()

# Explicitly add combat events test (Phase 1A.5 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_events.c AND NOT TARGET test_combat_events)
    add_executable(test_combat_events unit/test_combat_events.c)
    target_link_libraries(test_combat_events PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_events PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_events COMMAND test_combat_events)
endif()

# Explicitly add passive skills test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skills_passive.c AND NOT TARGET test_skills_passive)
    add_executable(test_skills_passive unit/test_skills_passive.c)
    target_link_libraries(test_skills_passive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skills_passive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skills_passive COMMAND test_skills_passive)
endif()

# Explicitly add fireball skill test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_fireball_skill.c AND NOT TARGET test_fireball_skill)
    add_executable(test_fireball_skill unit/test_fireball_skill.c)
    target_link_libraries(test_fireball_skill PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_fireball_skill PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_fireball_skill COMMAND test_fireball_skill)
endif()

# Explicitly add fireball skill test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skill_fireball.c AND NOT TARGET test_skill_fireball)
    add_executable(test_skill_fireball unit/test_skill_fireball.c)
    target_link_libraries(test_skill_fireball PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skill_fireball PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skill_fireball COMMAND test_skill_fireball)
endif()

# Explicitly add A* pathfinding test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_astar.c AND NOT TARGET test_astar)
    add_executable(test_astar unit/test_astar.c)
    target_link_libraries(test_astar PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_astar PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_astar COMMAND test_astar)
endif()

file(GLOB INTEGRATION_TESTS integration/test_*.c)
foreach(it ${INTEGRATION_TESTS})
    get_filename_component(name ${it} NAME_WE)
    add_executable(${name} ${it})
    target_link_libraries(${name} PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    if(ROGUE_ENABLE_SDL)
        add_test(NAME ${name} COMMAND ${name})
        set_tests_properties(${name} PROPERTIES ENVIRONMENT "SDL_VIDEODRIVER=dummy")
    else()
        add_test(NAME ${name} COMMAND ${name})
    endif()
endforeach()

# Explicitly add inventory persistence test (loot phase 4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase4_inventory_persistence.c AND NOT TARGET test_loot_phase4_inventory_persistence)
    add_executable(test_loot_phase4_inventory_persistence unit/test_loot_phase4_inventory_persistence.c)
    target_link_libraries(test_loot_phase4_inventory_persistence PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase4_inventory_persistence PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase4_inventory_persistence COMMAND test_loot_phase4_inventory_persistence)

    # Phase 13 inventory UI management test
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_inventory_ui_phase13.c AND NOT TARGET test_inventory_ui_phase13)
        add_executable(test_inventory_ui_phase13 unit/test_inventory_ui_phase13.c)
        target_link_libraries(test_inventory_ui_phase13 PRIVATE rogue_core)
        if(ROGUE_ENABLE_SDL)
            target_compile_definitions(test_inventory_ui_phase13 PRIVATE ROGUE_HAVE_SDL=1)
        endif()
        add_test(NAME test_inventory_ui_phase13 COMMAND test_inventory_ui_phase13)
    endif()
endif()

# Phase 14 equipment expanded stat pipeline test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase14_extended.c AND NOT TARGET test_equipment_phase14_extended)
    add_executable(test_equipment_phase14_extended unit/test_equipment_phase14_extended.c)
    target_link_libraries(test_equipment_phase14_extended PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase14_extended PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase14_extended COMMAND test_equipment_phase14_extended)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase14_perf.c AND NOT TARGET test_equipment_phase14_perf)
    add_executable(test_equipment_phase14_perf unit/test_equipment_phase14_perf.c)
    target_link_libraries(test_equipment_phase14_perf PRIVATE rogue_core)
    if(ROGUE_BUILD_WITH_SDL2)
        target_compile_definitions(test_equipment_phase14_perf PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase14_perf COMMAND test_equipment_phase14_perf)
endif()

# Equipment System Phase 1 slot expansion test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase1_slots.c AND NOT TARGET test_equipment_phase1_slots)
    add_executable(test_equipment_phase1_slots unit/test_equipment_phase1_slots.c)
    target_link_libraries(test_equipment_phase1_slots PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase1_slots PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase1_slots COMMAND test_equipment_phase1_slots)
endif()

# Equipment System Phase 1 cosmetic transmog test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase1_transmog.c AND NOT TARGET test_equipment_phase1_transmog)
    add_executable(test_equipment_phase1_transmog unit/test_equipment_phase1_transmog.c)
    target_link_libraries(test_equipment_phase1_transmog PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase1_transmog PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase1_transmog COMMAND test_equipment_phase1_transmog)
endif()

# Equipment System Phase 1.7 persistence & atomicity test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase1_persistence.c AND NOT TARGET test_equipment_phase1_persistence)
    add_executable(test_equipment_phase1_persistence unit/test_equipment_phase1_persistence.c)
    target_link_libraries(test_equipment_phase1_persistence PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase1_persistence PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase1_persistence COMMAND test_equipment_phase1_persistence)
endif()

# Equipment System Phase 2 stat cache layering & fingerprint test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase2_stat_cache.c AND NOT TARGET test_equipment_phase2_stat_cache)
    add_executable(test_equipment_phase2_stat_cache unit/test_equipment_phase2_stat_cache.c)
    target_link_libraries(test_equipment_phase2_stat_cache PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase2_stat_cache PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase2_stat_cache COMMAND test_equipment_phase2_stat_cache)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase2_affix_layers.c AND NOT TARGET test_equipment_phase2_affix_layers)
    add_executable(test_equipment_phase2_affix_layers unit/test_equipment_phase2_affix_layers.c)
    target_link_libraries(test_equipment_phase2_affix_layers PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase2_affix_layers PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase2_affix_layers COMMAND test_equipment_phase2_affix_layers)
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase2_resists.c AND NOT TARGET test_equipment_phase2_resists)
    add_executable(test_equipment_phase2_resists unit/test_equipment_phase2_resists.c)
    target_link_libraries(test_equipment_phase2_resists PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase2_resists PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase2_resists COMMAND test_equipment_phase2_resists)
endif()

# Equipment System Phase 3 item level & budget governance test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase3_budget.c AND NOT TARGET test_equipment_phase3_budget)
    add_executable(test_equipment_phase3_budget unit/test_equipment_phase3_budget.c)
    target_link_libraries(test_equipment_phase3_budget PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase3_budget PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase3_budget COMMAND test_equipment_phase3_budget)
endif()

# Equipment System Phase 4.1 implicit layer test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase4_1_implicits.c AND NOT TARGET test_equipment_phase4_1_implicits)
    add_executable(test_equipment_phase4_1_implicits unit/test_equipment_phase4_1_implicits.c)
    target_link_libraries(test_equipment_phase4_1_implicits PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase4_1_implicits PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase4_1_implicits COMMAND test_equipment_phase4_1_implicits)
endif()

# Equipment System Phase 4.2 unique layer test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase4_2_uniques.c AND NOT TARGET test_equipment_phase4_2_uniques)
    add_executable(test_equipment_phase4_2_uniques unit/test_equipment_phase4_2_uniques.c)
    target_link_libraries(test_equipment_phase4_2_uniques PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase4_2_uniques PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase4_2_uniques COMMAND test_equipment_phase4_2_uniques)
endif()

# Equipment System Phase 4.3-4.6 sets & runewords precedence test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_phase4_3_5_sets_runewords.c AND NOT TARGET test_equipment_phase4_3_5_sets_runewords)
    add_executable(test_equipment_phase4_3_5_sets_runewords unit/test_equipment_phase4_3_5_sets_runewords.c)
    target_link_libraries(test_equipment_phase4_3_5_sets_runewords PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_phase4_3_5_sets_runewords PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_phase4_3_5_sets_runewords COMMAND test_equipment_phase4_3_5_sets_runewords)
endif()

# Explicitly add loot phase 5 rarity parse test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_parse.c AND NOT TARGET test_loot_phase5_rarity_parse)
    add_executable(test_loot_phase5_rarity_parse unit/test_loot_phase5_rarity_parse.c)
    target_link_libraries(test_loot_phase5_rarity_parse PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase5_rarity_parse PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_parse COMMAND test_loot_phase5_rarity_parse)
endif()

# Explicitly add loot phase 5 rarity roll test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_roll.c AND NOT TARGET test_loot_phase5_rarity_roll)
    add_executable(test_loot_phase5_rarity_roll unit/test_loot_phase5_rarity_roll.c)
    target_link_libraries(test_loot_phase5_rarity_roll PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase5_rarity_roll PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_roll COMMAND test_loot_phase5_rarity_roll)
endif()

# Explicitly add loot phase 6 merge/despawn test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase6_merge_despawn.c AND NOT TARGET test_loot_phase6_merge_despawn)
    add_executable(test_loot_phase6_merge_despawn unit/test_loot_phase6_merge_despawn.c)
    target_link_libraries(test_loot_phase6_merge_despawn PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase6_merge_despawn PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase6_merge_despawn COMMAND test_loot_phase6_merge_despawn)
endif()

# Explicitly add equipment stat bonus test (14.2 partial)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_stat_bonus.c AND NOT TARGET test_equipment_stat_bonus)
    add_executable(test_equipment_stat_bonus unit/test_equipment_stat_bonus.c)
    target_link_libraries(test_equipment_stat_bonus PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_stat_bonus PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_stat_bonus COMMAND test_equipment_stat_bonus)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_stat_cache.c AND NOT TARGET test_stat_cache)
    add_executable(test_stat_cache unit/test_stat_cache.c)
    target_link_libraries(test_stat_cache PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_stat_cache PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_stat_cache COMMAND test_stat_cache)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_equipment_unequip_delta.c AND NOT TARGET test_equipment_unequip_delta)
    add_executable(test_equipment_unequip_delta unit/test_equipment_unequip_delta.c)
    target_link_libraries(test_equipment_unequip_delta PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_equipment_unequip_delta PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_equipment_unequip_delta COMMAND test_equipment_unequip_delta)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_repair_costs.c AND NOT TARGET test_repair_costs)
    add_executable(test_repair_costs unit/test_repair_costs.c)
    target_link_libraries(test_repair_costs PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_repair_costs PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_repair_costs COMMAND test_repair_costs)
endif()

# Add the new Phase 5.7 lock-on obstruction & latency test (guarded for incremental reconfigure)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on_obstruction_latency.c AND NOT TARGET test_combat_phase5_lock_on_obstruction_latency)
    add_executable(test_combat_phase5_lock_on_obstruction_latency unit/test_combat_phase5_lock_on_obstruction_latency.c)
    set_target_properties(test_combat_phase5_lock_on_obstruction_latency PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    target_link_libraries(test_combat_phase5_lock_on_obstruction_latency PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on_obstruction_latency PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on_obstruction_latency COMMAND test_combat_phase5_lock_on_obstruction_latency)
endif()

# Explicitly add multi-target lock-on test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_phase5_lock_on_multitarget.c AND NOT TARGET test_combat_phase5_lock_on_multitarget)
    add_executable(test_combat_phase5_lock_on_multitarget unit/test_combat_phase5_lock_on_multitarget.c)
    target_link_libraries(test_combat_phase5_lock_on_multitarget PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_phase5_lock_on_multitarget PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_phase5_lock_on_multitarget COMMAND test_combat_phase5_lock_on_multitarget)
endif()

# UI Phase 1 basic context & primitive test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase1_basic.c AND NOT TARGET test_ui_phase1_basic)
    add_executable(test_ui_phase1_basic unit/test_ui_phase1_basic.c)
    target_link_libraries(test_ui_phase1_basic PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase1_basic PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase1_basic COMMAND test_ui_phase1_basic)
endif()

# UI Phase 1 extended features (1.4-1.7) test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase1_features_ext.c AND NOT TARGET test_ui_phase1_features_ext)
    add_executable(test_ui_phase1_features_ext unit/test_ui_phase1_features_ext.c)
    target_link_libraries(test_ui_phase1_features_ext PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase1_features_ext PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase1_features_ext COMMAND test_ui_phase1_features_ext)
endif()

# UI Phase 2 core primitives test (Image/Sprite/ProgressBar)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_primitives.c AND NOT TARGET test_ui_phase2_primitives)
    add_executable(test_ui_phase2_primitives unit/test_ui_phase2_primitives.c)
    target_link_libraries(test_ui_phase2_primitives PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_primitives PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_primitives COMMAND test_ui_phase2_primitives)
endif()

# UI Phase 2.3/2.7 layout + id hashing test explicit add
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_layout_id.c AND NOT TARGET test_ui_phase2_layout_id)
    add_executable(test_ui_phase2_layout_id unit/test_ui_phase2_layout_id.c)
    target_link_libraries(test_ui_phase2_layout_id PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_layout_id PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_layout_id COMMAND test_ui_phase2_layout_id)
endif()

# UI Phase 2.4/2.5/2.8 scroll + tooltip + navigation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_scroll_tooltip_nav.c AND NOT TARGET test_ui_phase2_scroll_tooltip_nav)
    add_executable(test_ui_phase2_scroll_tooltip_nav unit/test_ui_phase2_scroll_tooltip_nav.c)
    target_link_libraries(test_ui_phase2_scroll_tooltip_nav PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_scroll_tooltip_nav PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_scroll_tooltip_nav COMMAND test_ui_phase2_scroll_tooltip_nav)
endif()

# UI Phase 2.2 interactive widgets test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_ui_phase2_interactive.c AND NOT TARGET test_ui_phase2_interactive)
    add_executable(test_ui_phase2_interactive unit/test_ui_phase2_interactive.c)
    target_link_libraries(test_ui_phase2_interactive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_ui_phase2_interactive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_ui_phase2_interactive COMMAND test_ui_phase2_interactive)
endif()

