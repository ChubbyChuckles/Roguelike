file(GLOB UNIT_TESTS unit/test_*.c)

# Ensure newly added directional combat test is always present (some generators cache GLOB results between incremental reconfigurations).
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_combat_left_facing.c AND NOT TARGET test_combat_left_facing)
    add_executable(test_combat_left_facing unit/test_combat_left_facing.c)
    target_link_libraries(test_combat_left_facing PRIVATE rogue_core)
    target_compile_definitions(test_combat_left_facing PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_combat_left_facing PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_combat_left_facing COMMAND test_combat_left_facing)
endif()

# Explicitly add loot phase 9 drop rates test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_drop_rates.c AND NOT TARGET test_loot_phase9_drop_rates)
    add_executable(test_loot_phase9_drop_rates unit/test_loot_phase9_drop_rates.c)
    target_link_libraries(test_loot_phase9_drop_rates PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_drop_rates PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_drop_rates COMMAND test_loot_phase9_drop_rates)
endif()

# Explicitly add loot phase 9 adaptive weighting test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_adaptive.c AND NOT TARGET test_loot_phase9_adaptive)
    add_executable(test_loot_phase9_adaptive unit/test_loot_phase9_adaptive.c)
    target_link_libraries(test_loot_phase9_adaptive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_adaptive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_adaptive COMMAND test_loot_phase9_adaptive)
endif()

# Explicitly add loot phase 9 preference learning test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_preference.c AND NOT TARGET test_loot_phase9_preference)
    add_executable(test_loot_phase9_preference unit/test_loot_phase9_preference.c)
    target_link_libraries(test_loot_phase9_preference PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_preference PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_preference COMMAND test_loot_phase9_preference)
endif()

# Explicitly add loot phase 9 pity acceleration test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase9_pity.c AND NOT TARGET test_loot_phase9_pity)
    add_executable(test_loot_phase9_pity unit/test_loot_phase9_pity.c)
    target_link_libraries(test_loot_phase9_pity PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase9_pity PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase9_pity COMMAND test_loot_phase9_pity)
endif()

# Explicitly add generation quality test (ensure picked up even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase8_generation_quality.c AND NOT TARGET test_loot_phase8_generation_quality)
    add_executable(test_loot_phase8_generation_quality unit/test_loot_phase8_generation_quality.c)
    target_link_libraries(test_loot_phase8_generation_quality PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase8_generation_quality PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase8_generation_quality COMMAND test_loot_phase8_generation_quality)
endif()

foreach(ut ${UNIT_TESTS})
    get_filename_component(name ${ut} NAME_WE)
    if(TARGET ${name})
        # Skip if already added explicitly above
        continue()
    endif()
    add_executable(${name} ${ut})
    target_link_libraries(${name} PRIVATE rogue_core)
    target_compile_definitions(${name} PRIVATE TEST_COMBAT_PERMISSIVE=1)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME ${name} COMMAND ${name})
endforeach()

# Explicitly add vegetation collision test (ensure included even if glob cache stale)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_collision.c AND NOT TARGET test_vegetation_collision)
    add_executable(test_vegetation_collision unit/test_vegetation_collision.c)
    target_link_libraries(test_vegetation_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_collision COMMAND test_vegetation_collision)
endif()

# Explicitly add vegetation canopy block test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_canopy_block.c AND NOT TARGET test_vegetation_canopy_block)
    add_executable(test_vegetation_canopy_block unit/test_vegetation_canopy_block.c)
    target_link_libraries(test_vegetation_canopy_block PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_canopy_block PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_canopy_block COMMAND test_vegetation_canopy_block)
endif()

# Explicitly add vegetation trunk collision behavioural test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_vegetation_trunk_collision.c AND NOT TARGET test_vegetation_trunk_collision)
    add_executable(test_vegetation_trunk_collision unit/test_vegetation_trunk_collision.c)
    target_link_libraries(test_vegetation_trunk_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_vegetation_trunk_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_vegetation_trunk_collision COMMAND test_vegetation_trunk_collision)
endif()

# Explicitly add mob collision test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_mob_collision.c AND NOT TARGET test_mob_collision)
    add_executable(test_mob_collision unit/test_mob_collision.c)
    target_link_libraries(test_mob_collision PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_mob_collision PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_mob_collision COMMAND test_mob_collision)
endif()

# Explicitly add navigation test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_navigation.c AND NOT TARGET test_navigation)
    add_executable(test_navigation unit/test_navigation.c)
    target_link_libraries(test_navigation PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_navigation PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_navigation COMMAND test_navigation)
endif()

# Explicitly add passive skills test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skills_passive.c AND NOT TARGET test_skills_passive)
    add_executable(test_skills_passive unit/test_skills_passive.c)
    target_link_libraries(test_skills_passive PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skills_passive PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skills_passive COMMAND test_skills_passive)
endif()

# Explicitly add fireball skill test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_fireball_skill.c AND NOT TARGET test_fireball_skill)
    add_executable(test_fireball_skill unit/test_fireball_skill.c)
    target_link_libraries(test_fireball_skill PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_fireball_skill PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_fireball_skill COMMAND test_fireball_skill)
endif()

# Explicitly add fireball skill test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_skill_fireball.c AND NOT TARGET test_skill_fireball)
    add_executable(test_skill_fireball unit/test_skill_fireball.c)
    target_link_libraries(test_skill_fireball PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_skill_fireball PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_skill_fireball COMMAND test_skill_fireball)
endif()

# Explicitly add A* pathfinding test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_astar.c AND NOT TARGET test_astar)
    add_executable(test_astar unit/test_astar.c)
    target_link_libraries(test_astar PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_astar PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_astar COMMAND test_astar)
endif()

file(GLOB INTEGRATION_TESTS integration/test_*.c)
foreach(it ${INTEGRATION_TESTS})
    get_filename_component(name ${it} NAME_WE)
    add_executable(${name} ${it})
    target_link_libraries(${name} PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(${name} PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    if(ROGUE_ENABLE_SDL)
        add_test(NAME ${name} COMMAND ${name})
        set_tests_properties(${name} PROPERTIES ENVIRONMENT "SDL_VIDEODRIVER=dummy")
    else()
        add_test(NAME ${name} COMMAND ${name})
    endif()
endforeach()

# Explicitly add inventory persistence test (loot phase 4)
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase4_inventory_persistence.c AND NOT TARGET test_loot_phase4_inventory_persistence)
    add_executable(test_loot_phase4_inventory_persistence unit/test_loot_phase4_inventory_persistence.c)
    target_link_libraries(test_loot_phase4_inventory_persistence PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase4_inventory_persistence PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase4_inventory_persistence COMMAND test_loot_phase4_inventory_persistence)
endif()

# Explicitly add loot phase 5 rarity parse test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_parse.c AND NOT TARGET test_loot_phase5_rarity_parse)
    add_executable(test_loot_phase5_rarity_parse unit/test_loot_phase5_rarity_parse.c)
    target_link_libraries(test_loot_phase5_rarity_parse PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase5_rarity_parse PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_parse COMMAND test_loot_phase5_rarity_parse)
endif()

# Explicitly add loot phase 5 rarity roll test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase5_rarity_roll.c AND NOT TARGET test_loot_phase5_rarity_roll)
    add_executable(test_loot_phase5_rarity_roll unit/test_loot_phase5_rarity_roll.c)
    target_link_libraries(test_loot_phase5_rarity_roll PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase5_rarity_roll PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase5_rarity_roll COMMAND test_loot_phase5_rarity_roll)
endif()

# Explicitly add loot phase 6 merge/despawn test
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/unit/test_loot_phase6_merge_despawn.c AND NOT TARGET test_loot_phase6_merge_despawn)
    add_executable(test_loot_phase6_merge_despawn unit/test_loot_phase6_merge_despawn.c)
    target_link_libraries(test_loot_phase6_merge_despawn PRIVATE rogue_core)
    if(ROGUE_ENABLE_SDL)
        target_compile_definitions(test_loot_phase6_merge_despawn PRIVATE ROGUE_HAVE_SDL=1)
    endif()
    add_test(NAME test_loot_phase6_merge_despawn COMMAND test_loot_phase6_merge_despawn)
endif()
